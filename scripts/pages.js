var pages = [{"name":" def isEmpty[T]: Boolean","description":"scala.opaques$.Callable(name=isEmpty, receiver=null, params=[])","location":"api/scala/opaques/array-ops/is-empty.html","searchKeys":["isEmpty"]},{"name":" def typeMembers: List[Symbol]","description":"scala.quoted.Quotes.Callable(name=typeMembers, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/type-members.html","searchKeys":["typeMembers"]},{"name":" def transformStatement(tree: Statement)(owner: Symbol): Statement","description":"scala.quoted.Quotes.Callable(name=transformStatement, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-map/transform-statement.html","searchKeys":["transformStatement"]},{"name":"Implicit Conversions - More Details","description":"","location":"docs/reference/changed-features/implicit-conversions-spec.html","searchKeys":["Implicit Conversions - More Details"]},{"name":" def field(name: String): Symbol","description":"scala.quoted.Quotes.Callable(name=field, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/field.html","searchKeys":["field"]},{"name":" def tpt: TypeTree","description":"scala.quoted.Quotes.Callable(name=tpt, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-new-methods/tpt.html","searchKeys":["tpt"]},{"name":" def filterNot[T](p: T => Boolean): IArray[T]","description":"scala.opaques$.Callable(name=filterNot, receiver=null, params=[])","location":"api/scala/opaques/array-ops/filter-not.html","searchKeys":["filterNot"]},{"name":" def apply(aliases: List[TypeDef], tpt: TypeTree): TypeBlock","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-block-module/apply.html","searchKeys":["apply"]},{"name":"given TypeTest_Tree_TypeCaseDef as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_TypeCaseDef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-type-case-def.html","searchKeys":["TypeTest_Tree_TypeCaseDef"]},{"name":" trait QuoteMatching","description":"scala.quoted.runtime.QuoteMatching","location":"api/scala/quoted/runtime/-quote-matching.html","searchKeys":["QuoteMatching"]},{"name":" def ==(that: Addr): Boolean","description":"dotty.tools.tasty.TastyBuffer$.Callable(name===, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer$/-addr/==.html","searchKeys":["=="]},{"name":" def copy(original: Tree)(expr: Term, from: Symbol): Return","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-return-module/copy.html","searchKeys":["copy"]},{"name":" def ExtensionMethod: Flags","description":"scala.quoted.Quotes.Callable(name=ExtensionMethod, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-extension-method.html","searchKeys":["ExtensionMethod"]},{"name":" def unpickleType[T <: AnyKind](pickled: String | List[String], typeHole: (Int, Seq[Any]) => Type[ <: AnyKind], termHole: (Int, Seq[Any], Quotes) => Expr[]): Type[T]","description":"scala.quoted.runtime.QuoteUnpickler.Callable(name=unpickleType, receiver=null, params=[])","location":"api/scala/quoted/runtime/-quote-unpickler/unpickle-type.html","searchKeys":["unpickleType"]},{"name":" def concat[T](xss: IArray[T]*)(evidence$2: ClassTag[T]): IArray[T]","description":"scala.IArray$package$.Callable(name=concat, receiver=null, params=[])","location":"api/scala/-i-array/concat.html","searchKeys":["concat"]},{"name":"given TypeTest_Tree_Try as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Try, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-try.html","searchKeys":["TypeTest_Tree_Try"]},{"name":" def apply(arg: TypeTree, annotation: Term): Annotated","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-annotated-module/apply.html","searchKeys":["apply"]},{"name":"final def skipZeroes(at: Addr): Addr","description":"dotty.tools.tasty.TastyBuffer.Callable(name=skipZeroes, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/skip-zeroes.html","searchKeys":["skipZeroes"]},{"name":" def nameTagToString(tag: Int): String","description":"dotty.tools.tasty.TastyFormat$.Callable(name=nameTagToString, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-format/name-tag-to-string.html","searchKeys":["nameTagToString"]},{"name":" given given_FromString_String as FromString[String]","description":"scala.util.CommandLineParser$","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-string.html","searchKeys":["given_FromString_String"]},{"name":" def returnTpt: TypeTree","description":"scala.quoted.Quotes.Callable(name=returnTpt, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-def-def-methods/return-tpt.html","searchKeys":["returnTpt"]},{"name":" def apply(tparams: List[TypeDef], body: Tree): LambdaTypeTree","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-lambda-type-tree-module/apply.html","searchKeys":["apply"]},{"name":" def constant: Constant","description":"scala.quoted.Quotes.Callable(name=constant, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-literal-methods/constant.html","searchKeys":["constant"]},{"name":" def unapplySeq[T](x: IArray[T]): UnapplySeqWrapper[ <: T]","description":"scala.IArray$package$.Callable(name=unapplySeq, receiver=null, params=[])","location":"api/scala/-i-array/unapply-seq.html","searchKeys":["unapplySeq"]},{"name":" def unapply(constant: Constant): Option[Int]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-int-module/unapply.html","searchKeys":["unapply"]},{"name":"Macros Spec","description":"","location":"docs/reference/metaprogramming/macros-spec.html","searchKeys":["Macros Spec"]},{"name":" def apply(meth: Term, tpe: Option[TypeRepr]): Closure","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-closure-module/apply.html","searchKeys":["apply"]},{"name":"Announcing Dotty 0.14.0-RC1 with export, immutable arrays, creator applications and more","description":"","location":"blog/_posts/2019-04-15-14th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.14.0-RC1 with export, immutable arrays, creator applications and more"]},{"name":" given IdentMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-ident-methods.html","searchKeys":["IdentMethods"]},{"name":" def copy(original: Tree)(qualifier: Term, name: String, levels: Int): SelectOuter","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-select-outer-module/copy.html","searchKeys":["copy"]},{"name":"Type Lambdas - More Details","description":"","location":"docs/reference/new-types/type-lambdas-spec.html","searchKeys":["Type Lambdas - More Details"]},{"name":" def block[T](statements: List[Expr[Any]], expr: Expr[T])(x$3: Quotes): Expr[T]","description":"scala.quoted.Expr$.Callable(name=block, receiver=null, params=[])","location":"api/scala/quoted/-expr$/block.html","searchKeys":["block"]},{"name":" def sortWith[T](f: (T, T) => Boolean): IArray[T]","description":"scala.opaques$.Callable(name=sortWith, receiver=null, params=[])","location":"api/scala/opaques/array-ops/sort-with.html","searchKeys":["sortWith"]},{"name":" def copy(original: Tree)(tparams: List[TypeDef], body: Tree): LambdaTypeTree","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-lambda-type-tree-module/copy.html","searchKeys":["copy"]},{"name":"given OptionLiftable","description":"scala.quoted.Liftable$.Callable(name=OptionLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-option-liftable.html","searchKeys":["OptionLiftable"]},{"name":"given TypeTest_Tree_Inlined as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Inlined, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-inlined.html","searchKeys":["TypeTest_Tree_Inlined"]},{"name":" given InlinedMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-inlined-methods.html","searchKeys":["InlinedMethods"]},{"name":"given TypeTest_TypeRepr_RecursiveType as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_RecursiveType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-recursive-type.html","searchKeys":["TypeTest_TypeRepr_RecursiveType"]},{"name":"given Tuple9Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple9Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple9-unliftable.html","searchKeys":["Tuple9Unliftable"]},{"name":" trait ConstantClassOfModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-class-of-module.html","searchKeys":["ConstantClassOfModule"]},{"name":" def search(tpe: TypeRepr): ImplicitSearchResult","description":"scala.quoted.Quotes.Callable(name=search, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-implicits-module/search.html","searchKeys":["search"]},{"name":" def id: Option[String]","description":"scala.quoted.Quotes.Callable(name=id, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-this-methods/id.html","searchKeys":["id"]},{"name":" def astTagToString(tag: Int): String","description":"dotty.tools.tasty.TastyFormat$.Callable(name=astTagToString, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-format/ast-tag-to-string.html","searchKeys":["astTagToString"]},{"name":"inline def tail[This >: NonEmptyTuple <: NonEmptyTuple]: Tail[This]","description":"scala.NonEmptyTuple.Callable(name=tail, receiver=null, params=[])","location":"api/scala/-non-empty-tuple/tail.html","searchKeys":["tail"]},{"name":" def exists: Boolean","description":"scala.quoted.Quotes.Callable(name=exists, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/exists.html","searchKeys":["exists"]},{"name":" trait TypeApplyModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-apply-module.html","searchKeys":["TypeApplyModule"]},{"name":" given FlagsMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-flags-methods.html","searchKeys":["FlagsMethods"]},{"name":"given Tuple11Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple11Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple11-unliftable.html","searchKeys":["Tuple11Unliftable"]},{"name":" trait ValDefModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-val-def-module.html","searchKeys":["ValDefModule"]},{"name":" def args: List[TypeRepr]","description":"scala.quoted.Quotes.Callable(name=args, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-applied-type-methods/args.html","searchKeys":["args"]},{"name":"given TypeTest_Tree_Typed as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Typed, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-typed.html","searchKeys":["TypeTest_Tree_Typed"]},{"name":"The @targetName annotation","description":"","location":"docs/reference/other-new-features/targetName.html","searchKeys":["The @targetName annotation"]},{"name":" def finalizer: Option[Term]","description":"scala.quoted.Quotes.Callable(name=finalizer, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-try-methods/finalizer.html","searchKeys":["finalizer"]},{"name":" trait WhileModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-while-module.html","searchKeys":["WhileModule"]},{"name":" def partition[T](p: T => Boolean): (IArray[T], IArray[T])","description":"scala.opaques$.Callable(name=partition, receiver=null, params=[])","location":"api/scala/opaques/array-ops/partition.html","searchKeys":["partition"]},{"name":" def show: String","description":"scala.quoted.Quotes.Callable(name=show, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-methods/show.html","searchKeys":["show"]},{"name":" given AnnotatedTypeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-annotated-type-methods.html","searchKeys":["AnnotatedTypeMethods"]},{"name":" def selectors: List[ImportSelector]","description":"scala.quoted.Quotes.Callable(name=selectors, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-import-methods/selectors.html","searchKeys":["selectors"]},{"name":" def flags: Flags","description":"scala.quoted.Quotes.Callable(name=flags, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/flags.html","searchKeys":["flags"]},{"name":" def usecases: List[(String, Option[DefDef])]","description":"scala.quoted.Quotes.Callable(name=usecases, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-documentation-methods/usecases.html","searchKeys":["usecases"]},{"name":"given TypeTest_Tree_ClassDef as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_ClassDef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-class-def.html","searchKeys":["TypeTest_Tree_ClassDef"]},{"name":"Overview","description":"","location":"docs/reference/contextual/motivation.html","searchKeys":["Overview"]},{"name":" object int","description":"scala.compiletime.ops.package$","location":"api/scala/compiletime/ops/int.html","searchKeys":["int"]},{"name":" trait Sum extends Mirror","description":"scala.deriving.Mirror$","location":"api/scala/deriving/-mirror$/-sum.html","searchKeys":["Sum"]},{"name":"Other New Features","description":"","location":"docs/Other New Features/index.html","searchKeys":["Other New Features"]},{"name":"Dropped: Scala 2 Macros","description":"","location":"docs/reference/dropped-features/macros.html","searchKeys":["Dropped: Scala 2 Macros"]},{"name":" trait SuperTypeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-super-type-module.html","searchKeys":["SuperTypeModule"]},{"name":"@deprecated(\"use x.asInstanceOf[Product].productElement(idx).asInstanceOf[T] instead\", \"3.0.0-M2\")  def productElement[T](x: Any, idx: Int): T","description":"scala.deriving.Helpers$package$.Callable(name=productElement, receiver=null, params=[])","location":"api/scala/deriving/product-element.html","searchKeys":["productElement"]},{"name":" given TypeDefMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-def-methods.html","searchKeys":["TypeDefMethods"]},{"name":"given TypeTest_Tree_Return as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Return, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-return.html","searchKeys":["TypeTest_Tree_Return"]},{"name":" given DefDefMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-def-def-methods.html","searchKeys":["DefDefMethods"]},{"name":" def fromName: String","description":"scala.quoted.Quotes.Callable(name=fromName, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-rename-selector-methods/from-name.html","searchKeys":["fromName"]},{"name":" def copy(original: Tree)(name: String, tpt: Tree): TypeBind","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bind-module/copy.html","searchKeys":["copy"]},{"name":" given TypeBoundsMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-methods.html","searchKeys":["TypeBoundsMethods"]},{"name":" def typeMember(name: String): Symbol","description":"scala.quoted.Quotes.Callable(name=typeMember, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/type-member.html","searchKeys":["typeMember"]},{"name":" def copy(original: Tree)(qual: Term, mix: Option[String]): Super","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-super-module/copy.html","searchKeys":["copy"]},{"name":" def tpe: TypeRepr","description":"scala.quoted.Quotes.Callable(name=tpe, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-wildcard-type-tree-methods/tpe.html","searchKeys":["tpe"]},{"name":" def apply(name: String, arg: Term): NamedArg","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-named-arg-module/apply.html","searchKeys":["apply"]},{"name":"final class TupleXXL extends Product","description":"scala.runtime.TupleXXL","location":"api/scala/runtime/-tuple-x-x-l.html","searchKeys":["TupleXXL"]},{"name":"abstract class FromDigitsException(msg: String) extends NumberFormatException","description":"scala.util.FromDigits$","location":"api/scala/util/-from-digits$/-from-digits-exception.html","searchKeys":["FromDigitsException"]},{"name":"inline def constValueTuple[T <: Tuple]: Widen[T]","description":"scala.compiletime.package$.Callable(name=constValueTuple, receiver=null, params=[])","location":"api/scala/compiletime/const-value-tuple.html","searchKeys":["constValueTuple"]},{"name":" object Eql","description":"scala.Eql$","location":"api/scala/-eql$.html","searchKeys":["Eql"]},{"name":" def id: Option[String]","description":"scala.quoted.Quotes.Callable(name=id, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-super-methods/id.html","searchKeys":["id"]},{"name":" def ObjectClass: Symbol","description":"scala.quoted.Quotes.Callable(name=ObjectClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-object-class.html","searchKeys":["ObjectClass"]},{"name":" def apply(owner: Symbol, tpe: MethodType, rhsFn: (Symbol, List[Tree]) => Tree): Block","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-lambda-module/apply.html","searchKeys":["apply"]},{"name":"given TypeTest_TypeRepr_SuperType as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_SuperType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-super-type.html","searchKeys":["TypeTest_TypeRepr_SuperType"]},{"name":" def unlift[T](x$1: Unliftable[T]): Option[T]","description":"scala.quoted.Quotes.Callable(name=unlift, receiver=null, params=[])","location":"api/scala/quoted/-quotes/unlift.html","searchKeys":["unlift"]},{"name":" def isAtEnd: Boolean","description":"dotty.tools.tasty.TastyReader.Callable(name=isAtEnd, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/is-at-end.html","searchKeys":["isAtEnd"]},{"name":" def tpe: TypeBounds","description":"scala.quoted.Quotes.Callable(name=tpe, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-tree-methods/tpe.html","searchKeys":["tpe"]},{"name":" def productElement(n: Int): Any","description":"scala.deriving.ArrayProduct.Callable(name=productElement, receiver=null, params=[])","location":"api/scala/deriving/-array-product/product-element.html","searchKeys":["productElement"]},{"name":"given TypeTest_Tree_Refined as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Refined, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-refined.html","searchKeys":["TypeTest_Tree_Refined"]},{"name":" trait OrTypeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-or-type-module.html","searchKeys":["OrTypeModule"]},{"name":" def identity[T]: TypeTest[T, T]","description":"scala.reflect.TypeTest$.Callable(name=identity, receiver=null, params=[])","location":"api/scala/reflect/-type-test$/identity.html","searchKeys":["identity"]},{"name":" def Erased: Flags","description":"scala.quoted.Quotes.Callable(name=Erased, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-erased.html","searchKeys":["Erased"]},{"name":" def of[T <: AnyKind](x$1: Type[T]): TypeRepr","description":"scala.quoted.Quotes.Callable(name=of, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-module/of.html","searchKeys":["of"]},{"name":"given default","description":"scala.util.LowPriorityNot.Callable(name=default, receiver=null, params=[])","location":"api/scala/util/-low-priority-not/default.html","searchKeys":["default"]},{"name":" def Synthetic: Flags","description":"scala.quoted.Quotes.Callable(name=Synthetic, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-synthetic.html","searchKeys":["Synthetic"]},{"name":"given Tuple17Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple17Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple17-liftable.html","searchKeys":["Tuple17Liftable"]},{"name":"case object Parser extends ErrorKind","description":"scala.compiletime.testing.ErrorKind$","location":"api/scala/compiletime/testing/-error-kind$/-parser.html","searchKeys":["Parser"]},{"name":" def method(name: String): List[Symbol]","description":"scala.quoted.Quotes.Callable(name=method, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/method.html","searchKeys":["method"]},{"name":" trait ThisModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-this-module.html","searchKeys":["ThisModule"]},{"name":"protected def traverseTreeChildren(tree: Tree)(owner: Symbol): Unit","description":"scala.quoted.Quotes.Callable(name=traverseTreeChildren, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-traverser/traverse-tree-children.html","searchKeys":["traverseTreeChildren"]},{"name":"given TypeTest_TypeRepr_PolyType as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_PolyType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-poly-type.html","searchKeys":["TypeTest_TypeRepr_PolyType"]},{"name":" def annotation: Term","description":"scala.quoted.Quotes.Callable(name=annotation, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-annotated-methods/annotation.html","searchKeys":["annotation"]},{"name":"Announcing Dotty 0.19.0-RC1 – further refinements of the syntax and the migration to 2.13.1 standard library","description":"","location":"blog/_posts/2019-09-23-19th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.19.0-RC1 – further refinements of the syntax and the migration to 2.13.1 standard library"]},{"name":" def showAnsiColored: String","description":"scala.quoted.Quotes.Callable(name=showAnsiColored, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-methods/show-ansi-colored.html","searchKeys":["showAnsiColored"]},{"name":" def selector: TypeTree","description":"scala.quoted.Quotes.Callable(name=selector, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-type-tree-methods/selector.html","searchKeys":["selector"]},{"name":"given TypeTest_Tree_New as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_New, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-new.html","searchKeys":["TypeTest_Tree_New"]},{"name":" def Artifact: Flags","description":"scala.quoted.Quotes.Callable(name=Artifact, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-artifact.html","searchKeys":["Artifact"]},{"name":" class TastyReader(val bytes: Array[Byte], start: Int, end: Int, val base: Int)","description":"dotty.tools.tasty.TastyReader","location":"api/dotty/tools.tasty/-tasty-reader.html","searchKeys":["TastyReader"]},{"name":"Implicit Conversions","description":"","location":"docs/reference/changed-features/implicit-conversions.html","searchKeys":["Implicit Conversions"]},{"name":" def qualifier: TypeTree","description":"scala.quoted.Quotes.Callable(name=qualifier, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-projection-methods/qualifier.html","searchKeys":["qualifier"]},{"name":" def unapply(constant: Constant): Option[String]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-string-module/unapply.html","searchKeys":["unapply"]},{"name":" given SourceFileMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-source-file-methods.html","searchKeys":["SourceFileMethods"]},{"name":"given Tuple13Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple13Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple13-unliftable.html","searchKeys":["Tuple13Unliftable"]},{"name":" trait NoPrefixModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-no-prefix-module.html","searchKeys":["NoPrefixModule"]},{"name":" def zip[T, U](that: IArray[U])(evidence$28: ClassTag[U]): IArray[(T, U)]","description":"scala.opaques$.Callable(name=zip, receiver=null, params=[])","location":"api/scala/opaques/array-ops/zip.html","searchKeys":["zip"]},{"name":" def Array_apply: Symbol","description":"scala.quoted.Quotes.Callable(name=Array_apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-array_apply.html","searchKeys":["Array_apply"]},{"name":" def unapply(x: OrType): Option[(TypeRepr, TypeRepr)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-or-type-module/unapply.html","searchKeys":["unapply"]},{"name":"implicit def reflectiveSelectable(x: Any): Selectable","description":"scala.reflect.Selectable$.Callable(name=reflectiveSelectable, receiver=null, params=[])","location":"api/scala/reflect/-selectable$/reflective-selectable.html","searchKeys":["reflectiveSelectable"]},{"name":" trait Product extends Mirror","description":"scala.deriving.Mirror$","location":"api/scala/deriving/-mirror$/-product.html","searchKeys":["Product"]},{"name":" def start: Int","description":"scala.quoted.Quotes.Callable(name=start, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-position-methods/start.html","searchKeys":["start"]},{"name":" def ofSeq[T](xs: Seq[Expr[T]])(tp: Type[T], qctx: Quotes): Expr[Seq[T]]","description":"scala.quoted.Expr$.Callable(name=ofSeq, receiver=null, params=[])","location":"api/scala/quoted/-expr$/of-seq.html","searchKeys":["ofSeq"]},{"name":" def unapply(constant: Constant): Option[Long]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-long-module/unapply.html","searchKeys":["unapply"]},{"name":"given NoneLiftable","description":"scala.quoted.Liftable$.Callable(name=NoneLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-none-liftable.html","searchKeys":["NoneLiftable"]},{"name":" def content: String","description":"scala.quoted.Quotes.Callable(name=content, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-source-file-methods/content.html","searchKeys":["content"]},{"name":" given SingletonMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-singleton-methods.html","searchKeys":["SingletonMethods"]},{"name":" def unapply(x: TypeSelect): Option[(Term, String)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-select-module/unapply.html","searchKeys":["unapply"]},{"name":" def toExpr(x: T): Quotes => Expr[T]","description":"scala.quoted.Liftable$.Callable(name=toExpr, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-int-liftable/to-expr.html","searchKeys":["toExpr"]},{"name":" def signature: Option[Signature]","description":"scala.quoted.Quotes.Callable(name=signature, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-select-methods/signature.html","searchKeys":["signature"]},{"name":" trait AndTypeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-and-type-module.html","searchKeys":["AndTypeModule"]},{"name":"@deprecated(\"use @targetName instead\", deprecated.$lessinit$greater$default$2) final class alpha(externalName: String) extends StaticAnnotation","description":"scala.annotation.alpha","location":"api/scala/annotation/alpha.html","searchKeys":["alpha"]},{"name":" def Scala2x: Flags","description":"scala.quoted.Quotes.Callable(name=Scala2x, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-scala2x.html","searchKeys":["Scala2x"]},{"name":" trait LowPriorityNot","description":"scala.util.LowPriorityNot","location":"api/scala/util/-low-priority-not.html","searchKeys":["LowPriorityNot"]},{"name":"given Tuple16Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple16Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple16-unliftable.html","searchKeys":["Tuple16Unliftable"]},{"name":" def showAnsiColored[T](x$1: Type[T])(x$2: Quotes): String","description":"scala.quoted.Type$.Callable(name=showAnsiColored, receiver=null, params=[])","location":"api/scala/quoted/-type$/show-ansi-colored.html","searchKeys":["showAnsiColored"]},{"name":" def resType: TypeRepr","description":"scala.quoted.Quotes.Callable(name=resType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-lambda-methods/res-type.html","searchKeys":["resType"]},{"name":" def is(that: Flags): Boolean","description":"scala.quoted.Quotes.Callable(name=is, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-methods/is.html","searchKeys":["is"]},{"name":" given MatchMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-match-methods.html","searchKeys":["MatchMethods"]},{"name":" def apply(underlying: TypeRepr): TypeRepr","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-by-name-type-module/apply.html","searchKeys":["apply"]},{"name":" def cond: Term","description":"scala.quoted.Quotes.Callable(name=cond, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-while-methods/cond.html","searchKeys":["cond"]},{"name":" given SelectMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-select-methods.html","searchKeys":["SelectMethods"]},{"name":" def fromExpr(x: Expr[T]): Quotes => Option[T]","description":"scala.quoted.Unliftable.Callable(name=fromExpr, receiver=null, params=[])","location":"api/scala/quoted/-unliftable/from-expr.html","searchKeys":["fromExpr"]},{"name":" def map[F <: ([_$2] =>> Any)](self: Tuple, f: [t] => (x$1: t) => F[t]): Tuple","description":"scala.runtime.Tuple$.Callable(name=map, receiver=null, params=[])","location":"api/scala/runtime/-tuple/map.html","searchKeys":["map"]},{"name":" class main extends Annotation","description":"scala.main","location":"api/scala/main.html","searchKeys":["main"]},{"name":" def isAnonymousClass: Boolean","description":"scala.quoted.Quotes.Callable(name=isAnonymousClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-anonymous-class.html","searchKeys":["isAnonymousClass"]},{"name":"given TypeTest_Tree_Alternatives as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Alternatives, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-alternatives.html","searchKeys":["TypeTest_Tree_Alternatives"]},{"name":"Working with Scalafix","description":"","location":"docs/contributing/tools/scalafix.html","searchKeys":["Working with Scalafix"]},{"name":" def isType: Boolean","description":"scala.quoted.Quotes.Callable(name=isType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-type.html","searchKeys":["isType"]},{"name":" def qualifier: Term","description":"scala.quoted.Quotes.Callable(name=qualifier, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-select-methods/qualifier.html","searchKeys":["qualifier"]},{"name":" def jpath: Path","description":"scala.quoted.Quotes.Callable(name=jpath, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-source-file-methods/jpath.html","searchKeys":["jpath"]},{"name":"@field @getter @beanGetter @beanSetter @param @setter final class static extends StaticAnnotation","description":"scala.annotation.static","location":"api/scala/annotation/static.html","searchKeys":["static"]},{"name":" class sharable extends Annotation","description":"scala.annotation.internal.sharable","location":"api/scala/annotation/internal/sharable.html","searchKeys":["sharable"]},{"name":" def apply(x: Int): Constant","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-int-module/apply.html","searchKeys":["apply"]},{"name":" def throwReturn[T](result: T)(returner: ReturnThrowable[T]): Nothing","description":"scala.util.control.NonLocalReturns$.Callable(name=throwReturn, receiver=null, params=[])","location":"api/scala/util/control/-non-local-returns/throw-return.html","searchKeys":["throwReturn"]},{"name":" def unapply(x: TypeIdent): Option[String]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-ident-module/unapply.html","searchKeys":["unapply"]},{"name":" def transformTree(tree: Tree)(owner: Symbol): Tree","description":"scala.quoted.Quotes.Callable(name=transformTree, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-map/transform-tree.html","searchKeys":["transformTree"]},{"name":"inline def requireConst(x: Boolean | Byte | Short | Int | Long | Float | Double | Char | String): Unit","description":"scala.compiletime.package$.Callable(name=requireConst, receiver=null, params=[])","location":"api/scala/compiletime/require-const.html","searchKeys":["requireConst"]},{"name":" def apply(parent: TypeRepr, name: String, info: TypeRepr): Refinement","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-refinement-module/apply.html","searchKeys":["apply"]},{"name":"given ClassTagLiftable","description":"scala.quoted.Liftable$.Callable(name=ClassTagLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-class-tag-liftable.html","searchKeys":["ClassTagLiftable"]},{"name":" def ordinal: Int","description":"scala.reflect.Enum.Callable(name=ordinal, receiver=null, params=[])","location":"api/scala/reflect/-enum/ordinal.html","searchKeys":["ordinal"]},{"name":" def unapply(x: Unapply): Option[(Term, List[Term], List[Tree])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-unapply-module/unapply.html","searchKeys":["unapply"]},{"name":" def apply(patterns: List[Tree]): Alternatives","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-alternatives-module/apply.html","searchKeys":["apply"]},{"name":"override def hashCode: Int","description":"scala.runtime.TupleXXL.Callable(name=hashCode, receiver=null, params=[])","location":"api/scala/runtime/-tuple-x-x-l/hash-code.html","searchKeys":["hashCode"]},{"name":"Algebraic Data Types","description":"","location":"docs/reference/enums/adts.html","searchKeys":["Algebraic Data Types"]},{"name":" def unapply(x: TypeRef): Option[(TypeRepr, String)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-ref-module/unapply.html","searchKeys":["unapply"]},{"name":" object NameTags extends NameTags","description":"dotty.tools.tasty.TastyFormat$","location":"api/dotty/tools.tasty/-tasty-format/-name-tags$.html","searchKeys":["NameTags"]},{"name":" class unshared extends Annotation","description":"scala.annotation.internal.unshared","location":"api/scala/annotation/internal/unshared.html","searchKeys":["unshared"]},{"name":" def fold[T, U >: T](z: U)(op: (U, U) => U)(evidence$17: ClassTag[U]): U","description":"scala.opaques$.Callable(name=fold, receiver=null, params=[])","location":"api/scala/opaques/array-ops/fold.html","searchKeys":["fold"]},{"name":" def unapply(x: Return): Option[(Term, Symbol)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-return-module/unapply.html","searchKeys":["unapply"]},{"name":" given TypeSelectMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-select-methods.html","searchKeys":["TypeSelectMethods"]},{"name":" def select(sym: Symbol): Select","description":"scala.quoted.Quotes.Callable(name=select, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-methods/select.html","searchKeys":["select"]},{"name":" def unapply(vdef: ValDef): Option[(String, TypeTree, Option[Term])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-val-def-module/unapply.html","searchKeys":["unapply"]},{"name":" def paramTypes: List[TypeRepr]","description":"scala.quoted.Quotes.Callable(name=paramTypes, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-method-type-methods/param-types.html","searchKeys":["paramTypes"]},{"name":"Dropped: Delayedinit","description":"","location":"docs/reference/dropped-features/delayed-init.html","searchKeys":["Dropped: Delayedinit"]},{"name":" def unapply(x: Refinement): Option[(TypeRepr, String, TypeRepr)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-refinement-module/unapply.html","searchKeys":["unapply"]},{"name":"erased def erasedValue[T]: T","description":"scala.compiletime.package$.Callable(name=erasedValue, receiver=null, params=[])","location":"api/scala/compiletime/erased-value.html","searchKeys":["erasedValue"]},{"name":"Dotty","description":"","location":"index.html","searchKeys":["Dotty"]},{"name":" given TypeRefMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-ref-methods.html","searchKeys":["TypeRefMethods"]},{"name":" object derived extends Eql[Any, Any]","description":"scala.Eql$","location":"api/scala/-eql$/derived.html","searchKeys":["derived"]},{"name":" object 3.1","description":"scalaShadowing.language$","location":"api/scalaShadowing/language/3.1.html","searchKeys":["3.1"]},{"name":"@compileTimeOnly(\"Illegal reference to `scala.quoted.runtime.Expr`\")  object Expr","description":"scala.quoted.runtime.Expr$","location":"api/scala/quoted/runtime/-expr.html","searchKeys":["Expr"]},{"name":"given Tuple5Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple5Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple5-unliftable.html","searchKeys":["Tuple5Unliftable"]},{"name":" given ByteLiftable[T <: Byte] as Liftable[T]","description":"scala.quoted.Liftable$","location":"api/scala/quoted/-liftable$/-byte-liftable.html","searchKeys":["ByteLiftable"]},{"name":" given ByNameMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-by-name-methods.html","searchKeys":["ByNameMethods"]},{"name":" def companionClass: Symbol","description":"scala.quoted.Quotes.Callable(name=companionClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/companion-class.html","searchKeys":["companionClass"]},{"name":" def BooleanClass: Symbol","description":"scala.quoted.Quotes.Callable(name=BooleanClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-boolean-class.html","searchKeys":["BooleanClass"]},{"name":" def newVal(parent: Symbol, name: String, tpe: TypeRepr, flags: Flags, privateWithin: Symbol): Symbol","description":"scala.quoted.Quotes.Callable(name=newVal, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-module/new-val.html","searchKeys":["newVal"]},{"name":" object opaques","description":"scala.opaques$","location":"api/scala/opaques.html","searchKeys":["opaques"]},{"name":" given ShortLiftable[T <: Short] as Liftable[T]","description":"scala.quoted.Liftable$","location":"api/scala/quoted/-liftable$/-short-liftable.html","searchKeys":["ShortLiftable"]},{"name":" def copy(original: Tree)(pattern: TypeTree, rhs: TypeTree): TypeCaseDef","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-case-def-module/copy.html","searchKeys":["copy"]},{"name":" given SuperMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-super-methods.html","searchKeys":["SuperMethods"]},{"name":" def select(sym: Symbol): TypeRepr","description":"scala.quoted.Quotes.Callable(name=select, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/select.html","searchKeys":["select"]},{"name":" def StableRealizable: Flags","description":"scala.quoted.Quotes.Callable(name=StableRealizable, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-stable-realizable.html","searchKeys":["StableRealizable"]},{"name":" def isValDef: Boolean","description":"scala.quoted.Quotes.Callable(name=isValDef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-val-def.html","searchKeys":["isValDef"]},{"name":" def concatIterator(tup1: Tuple, tup2: Tuple): Iterator[Any]","description":"scala.runtime.Tuple$.Callable(name=concatIterator, receiver=null, params=[])","location":"api/scala/runtime/-tuple/concat-iterator.html","searchKeys":["concatIterator"]},{"name":" def memberType(member: Symbol): TypeRepr","description":"scala.quoted.Quotes.Callable(name=memberType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/member-type.html","searchKeys":["memberType"]},{"name":" def underlying: TypeRepr","description":"scala.quoted.Quotes.Callable(name=underlying, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-annotated-type-methods/underlying.html","searchKeys":["underlying"]},{"name":" def unapply(tree: Ident): Option[String]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-ident-module/unapply.html","searchKeys":["unapply"]},{"name":" given TermMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-term-methods.html","searchKeys":["TermMethods"]},{"name":" def unapply(x: ByNameType): Option[TypeRepr]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-by-name-type-module/unapply.html","searchKeys":["unapply"]},{"name":"inline def summonAll[T <: Tuple]: Widen[T]","description":"scala.compiletime.package$.Callable(name=summonAll, receiver=null, params=[])","location":"api/scala/compiletime/summon-all.html","searchKeys":["summonAll"]},{"name":" def unapply(constant: Constant): Option[Byte]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-byte-module/unapply.html","searchKeys":["unapply"]},{"name":"Announcing Dotty 0.15.0-RC1 – the fully bootstrapped compiler","description":"","location":"blog/_posts/2019-05-23-15th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.15.0-RC1 – the fully bootstrapped compiler"]},{"name":" def bound: TypeRepr","description":"scala.quoted.Quotes.Callable(name=bound, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-type-methods/bound.html","searchKeys":["bound"]},{"name":" def reserveAddr(): Addr","description":"dotty.tools.tasty.TastyBuffer.Callable(name=reserveAddr, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/reserve-addr.html","searchKeys":["reserveAddr"]},{"name":" given RecursiveThisMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-recursive-this-methods.html","searchKeys":["RecursiveThisMethods"]},{"name":" def showExtractors: String","description":"scala.quoted.Quotes.Callable(name=showExtractors, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-methods/show-extractors.html","searchKeys":["showExtractors"]},{"name":"given TypeTest_Tree_Term as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Term, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-term.html","searchKeys":["TypeTest_Tree_Term"]},{"name":" def spliceOwner: Symbol","description":"scala.quoted.Quotes.Callable(name=spliceOwner, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-module/splice-owner.html","searchKeys":["spliceOwner"]},{"name":" def paramNames: List[String]","description":"scala.quoted.Quotes.Callable(name=paramNames, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-lambda-methods/param-names.html","searchKeys":["paramNames"]},{"name":"Pattern Bindings","description":"","location":"docs/reference/changed-features/pattern-bindings.html","searchKeys":["Pattern Bindings"]},{"name":" def apply(expr: Term, tpt: TypeTree): Typed","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-typed-module/apply.html","searchKeys":["apply"]},{"name":"inline def constValueOpt[T]: Option[T]","description":"scala.compiletime.package$.Callable(name=constValueOpt, receiver=null, params=[])","location":"api/scala/compiletime/const-value-opt.html","searchKeys":["constValueOpt"]},{"name":"final class InlineParam() extends Annotation","description":"scala.annotation.internal.InlineParam","location":"api/scala/annotation/internal/-inline-param.html","searchKeys":["InlineParam"]},{"name":" def unapply(tree: PackageClause): Some[(Ref, List[Tree])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-package-clause-module/unapply.html","searchKeys":["unapply"]},{"name":" def traverseTree(tree: Tree)(owner: Symbol): Unit","description":"scala.quoted.Quotes.Callable(name=traverseTree, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-traverser/traverse-tree.html","searchKeys":["traverseTree"]},{"name":" def apply[T](xs: Seq[Expr[T]])(x$2: Type[T])(x$3: Quotes): Expr[Seq[T]]","description":"scala.quoted.Varargs$.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-varargs/apply.html","searchKeys":["apply"]},{"name":" def apply(): Constant","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-unit-module/apply.html","searchKeys":["apply"]},{"name":" def index(addr: Addr): Int","description":"dotty.tools.tasty.TastyReader.Callable(name=index, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/--index--.html","searchKeys":["index"]},{"name":"given Tuple8Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple8Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple8-unliftable.html","searchKeys":["Tuple8Unliftable"]},{"name":" trait PolyTypeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-poly-type-module.html","searchKeys":["PolyTypeModule"]},{"name":" given TypedMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-typed-methods.html","searchKeys":["TypedMethods"]},{"name":" trait ConstantIntModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-int-module.html","searchKeys":["ConstantIntModule"]},{"name":"given Tuple18Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple18Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple18-unliftable.html","searchKeys":["Tuple18Unliftable"]},{"name":" trait CaseDefModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-case-def-module.html","searchKeys":["CaseDefModule"]},{"name":"@mixin  trait Enum extends Product with Serializable","description":"scala.reflect.Enum","location":"api/scala/reflect/-enum.html","searchKeys":["Enum"]},{"name":" def ofMacroExpansion: Position","description":"scala.quoted.Quotes.Callable(name=ofMacroExpansion, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-position-module/of-macro-expansion.html","searchKeys":["ofMacroExpansion"]},{"name":" def currentAddr: Addr","description":"dotty.tools.tasty.TastyBuffer.Callable(name=currentAddr, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/current-addr.html","searchKeys":["currentAddr"]},{"name":"@implicitNotFound(msg = \"No TypeTest available for [${S}, ${T}]\")  trait TypeTest[-S, T] extends Serializable","description":"scala.reflect.TypeTest","location":"api/scala/reflect/-type-test.html","searchKeys":["TypeTest"]},{"name":" object Scala2Compat","description":"scalaShadowing.language$","location":"api/scalaShadowing/language/-scala2-compat.html","searchKeys":["Scala2Compat"]},{"name":" object namedTypeArguments","description":"scalaShadowing.language$","location":"api/scalaShadowing/language/experimental/named-type-arguments.html","searchKeys":["namedTypeArguments"]},{"name":" def Trait: Flags","description":"scala.quoted.Quotes.Callable(name=Trait, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-trait.html","searchKeys":["Trait"]},{"name":" def JavaLangPackage: Symbol","description":"scala.quoted.Quotes.Callable(name=JavaLangPackage, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-java-lang-package.html","searchKeys":["JavaLangPackage"]},{"name":"given TypeTest_TypeRepr_ThisType as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_ThisType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-this-type.html","searchKeys":["TypeTest_TypeRepr_ThisType"]},{"name":" def copy(original: Tree)(fun: Term, args: List[TypeTree]): TypeApply","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-apply-module/copy.html","searchKeys":["copy"]},{"name":"given TypeTest_TypeRepr_TypeBounds as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_TypeBounds, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-type-bounds.html","searchKeys":["TypeTest_TypeRepr_TypeBounds"]},{"name":" def moduleClass: Symbol","description":"scala.quoted.Quotes.Callable(name=moduleClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/module-class.html","searchKeys":["moduleClass"]},{"name":" def exists: Boolean","description":"scala.quoted.Quotes.Callable(name=exists, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-position-methods/exists.html","searchKeys":["exists"]},{"name":"given Tuple15Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple15Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple15-unliftable.html","searchKeys":["Tuple15Unliftable"]},{"name":" def readLongInt(): Long","description":"dotty.tools.tasty.TastyReader.Callable(name=readLongInt, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/read-long-int.html","searchKeys":["readLongInt"]},{"name":" def transformCaseDefs(trees: List[CaseDef])(owner: Symbol): List[CaseDef]","description":"scala.quoted.Quotes.Callable(name=transformCaseDefs, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-map/transform-case-defs.html","searchKeys":["transformCaseDefs"]},{"name":" def unapply(x: ThisType): Option[TypeRepr]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-this-type-module/unapply.html","searchKeys":["unapply"]},{"name":" def !=(that: Addr): Boolean","description":"dotty.tools.tasty.TastyBuffer$.Callable(name=!=, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer$/-addr/!=.html","searchKeys":["!="]},{"name":"Announcing Dotty 0.13.0-RC1 with Spark support, top level definitions and redesigned implicits","description":"","location":"blog/_posts/2019-03-05-13th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.13.0-RC1 with Spark support, top level definitions and redesigned implicits"]},{"name":" trait UnapplyModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-unapply-module.html","searchKeys":["UnapplyModule"]},{"name":"given TypeTest_Tree_WildcardTypeTree as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_WildcardTypeTree, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-wildcard-type-tree.html","searchKeys":["TypeTest_Tree_WildcardTypeTree"]},{"name":" def isInstanceOfEmptyTuple(x: Any): Boolean","description":"scala.runtime.Tuple$.Callable(name=isInstanceOfEmptyTuple, receiver=null, params=[])","location":"api/scala/runtime/-tuple/is-instance-of-empty-tuple.html","searchKeys":["isInstanceOfEmptyTuple"]},{"name":" object Selectable","description":"scala.Selectable$","location":"api/scala/-selectable$.html","searchKeys":["Selectable"]},{"name":" def appliedToTypes(targs: List[TypeRepr]): Term","description":"scala.quoted.Quotes.Callable(name=appliedToTypes, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-methods/applied-to-types.html","searchKeys":["appliedToTypes"]},{"name":"Dependent Function Types","description":"","location":"docs/reference/new-types/dependent-function-types.html","searchKeys":["Dependent Function Types"]},{"name":" def startAddr: Addr","description":"dotty.tools.tasty.TastyReader.Callable(name=startAddr, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/start-addr.html","searchKeys":["startAddr"]},{"name":" def readInt(): Int","description":"dotty.tools.tasty.TastyReader.Callable(name=readInt, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/read-int.html","searchKeys":["readInt"]},{"name":" def headOption[T]: Option[T]","description":"scala.opaques$.Callable(name=headOption, receiver=null, params=[])","location":"api/scala/opaques/array-ops/head-option.html","searchKeys":["headOption"]},{"name":" trait TypeBoundsTreeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-tree-module.html","searchKeys":["TypeBoundsTreeModule"]},{"name":" def Private: Flags","description":"scala.quoted.Quotes.Callable(name=Private, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-private.html","searchKeys":["Private"]},{"name":" def qualifier: Term","description":"scala.quoted.Quotes.Callable(name=qualifier, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-super-methods/qualifier.html","searchKeys":["qualifier"]},{"name":"Import Given","description":"","location":"docs/reference/contextual/import-delegate.html","searchKeys":["Import Given"]},{"name":" def unapply(cdef: ClassDef): Option[(String, DefDef, List[Tree], List[TypeTree], Option[ValDef], List[Statement])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-class-def-module/unapply.html","searchKeys":["unapply"]},{"name":"Type Class Derivation","description":"","location":"docs/reference/contextual/derivation.html","searchKeys":["Type Class Derivation"]},{"name":"inline def toArray: Array[Object]","description":"scala.Tuple.Callable(name=toArray, receiver=null, params=[])","location":"api/scala/-tuple/to-array.html","searchKeys":["toArray"]},{"name":" def getAddr(at: Addr): Addr","description":"dotty.tools.tasty.TastyBuffer.Callable(name=getAddr, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/get-addr.html","searchKeys":["getAddr"]},{"name":" class ContextResultCount(n: Int) extends StaticAnnotation","description":"scala.annotation.internal.ContextResultCount","location":"api/scala/annotation/internal/-context-result-count.html","searchKeys":["ContextResultCount"]},{"name":" given given_FromString_Boolean as FromString[Boolean]","description":"scala.util.CommandLineParser$","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-boolean.html","searchKeys":["given_FromString_Boolean"]},{"name":" given SuperTypeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-super-type-methods.html","searchKeys":["SuperTypeMethods"]},{"name":"Debug Macros","description":"","location":"docs/internals/debug-macros.html","searchKeys":["Debug Macros"]},{"name":" def expanded: Option[String]","description":"scala.quoted.Quotes.Callable(name=expanded, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-documentation-methods/expanded.html","searchKeys":["expanded"]},{"name":" def tpt: TypeTree","description":"scala.quoted.Quotes.Callable(name=tpt, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-val-def-methods/tpt.html","searchKeys":["tpt"]},{"name":"Blog","description":"","location":"blog/index.html","searchKeys":["Blog"]},{"name":" trait ByNameTypeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-by-name-type-module.html","searchKeys":["ByNameTypeModule"]},{"name":" def startLine: Int","description":"scala.quoted.Quotes.Callable(name=startLine, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-position-methods/start-line.html","searchKeys":["startLine"]},{"name":" def rhs: Term","description":"scala.quoted.Quotes.Callable(name=rhs, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-case-def-methods/rhs.html","searchKeys":["rhs"]},{"name":"Import Implied","description":"","location":"docs/reference/contextual/import-implied.html","searchKeys":["Import Implied"]},{"name":" trait ClassDefModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-class-def-module.html","searchKeys":["ClassDefModule"]},{"name":" def unapply(x: WildcardTypeTree): Boolean","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-wildcard-type-tree-module/unapply.html","searchKeys":["unapply"]},{"name":"given Tuple20Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple20Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple20-unliftable.html","searchKeys":["Tuple20Unliftable"]},{"name":"given Tuple11Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple11Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple11-liftable.html","searchKeys":["Tuple11Liftable"]},{"name":" trait ExprMap","description":"scala.quoted.ExprMap","location":"api/scala/quoted/-expr-map.html","searchKeys":["ExprMap"]},{"name":"Announcing Dotty 0.22.0-RC1 - syntactic enhancements, type-level arithmetic and more","description":"","location":"blog/_posts/2020-02-05-22nd-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.22.0-RC1 - syntactic enhancements, type-level arithmetic and more"]},{"name":"given SomeUnliftable","description":"scala.quoted.Unliftable$.Callable(name=SomeUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-some-unliftable.html","searchKeys":["SomeUnliftable"]},{"name":" given ClosureMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-closure-methods.html","searchKeys":["ClosureMethods"]},{"name":" def indexOf[T](elem: T, from: Int): Int","description":"scala.opaques$.Callable(name=indexOf, receiver=null, params=[])","location":"api/scala/opaques/array-ops/index-of.html","searchKeys":["indexOf"]},{"name":"given ArrayOfFloatLiftable","description":"scala.quoted.Liftable$.Callable(name=ArrayOfFloatLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-array-of-float-liftable.html","searchKeys":["ArrayOfFloatLiftable"]},{"name":"given ArrayOfBooleanLiftable","description":"scala.quoted.Liftable$.Callable(name=ArrayOfBooleanLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-array-of-boolean-liftable.html","searchKeys":["ArrayOfBooleanLiftable"]},{"name":" trait ConstantByteModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-byte-module.html","searchKeys":["ConstantByteModule"]},{"name":"given EitherUnliftable","description":"scala.quoted.Unliftable$.Callable(name=EitherUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-either-unliftable.html","searchKeys":["EitherUnliftable"]},{"name":" def find[T](p: T => Boolean): Option[T]","description":"scala.opaques$.Callable(name=find, receiver=null, params=[])","location":"api/scala/opaques/array-ops/find.html","searchKeys":["find"]},{"name":" def widen: TypeRepr","description":"scala.quoted.Quotes.Callable(name=widen, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/widen.html","searchKeys":["widen"]},{"name":"final class threadUnsafe extends StaticAnnotation","description":"scala.annotation.threadUnsafe","location":"api/scala/annotation/thread-unsafe.html","searchKeys":["threadUnsafe"]},{"name":" def args: List[Term]","description":"scala.quoted.Quotes.Callable(name=args, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-apply-methods/args.html","searchKeys":["args"]},{"name":" def apply(underlying: TypeRepr, annot: Term): AnnotatedType","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-annotated-type-module/apply.html","searchKeys":["apply"]},{"name":" def isInstanceOfNonEmptyTuple(x: Any): Boolean","description":"scala.runtime.Tuple$.Callable(name=isInstanceOfNonEmptyTuple, receiver=null, params=[])","location":"api/scala/runtime/-tuple/is-instance-of-non-empty-tuple.html","searchKeys":["isInstanceOfNonEmptyTuple"]},{"name":"Usage","description":"","location":"docs/Usage/index.html","searchKeys":["Usage"]},{"name":" object DottyPredef","description":"dotty.DottyPredef$","location":"api/dotty/-dotty-predef.html","searchKeys":["DottyPredef"]},{"name":" trait TypedModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-typed-module.html","searchKeys":["TypedModule"]},{"name":" def copy(original: Tree)(fun: Term, args: List[Term]): Apply","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-apply-module/copy.html","searchKeys":["copy"]},{"name":" object 3.0","description":"scalaShadowing.language$","location":"api/scalaShadowing/language/3.0.html","searchKeys":["3.0"]},{"name":"How to write a type class `derived` method using macros","description":"","location":"docs/reference/contextual/derivation-macro.html","searchKeys":["How to write a type class `derived` method using macros"]},{"name":"given Tuple1Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple1Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple1-liftable.html","searchKeys":["Tuple1Liftable"]},{"name":" def isSingleton: Boolean","description":"scala.quoted.Quotes.Callable(name=isSingleton, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/is-singleton.html","searchKeys":["isSingleton"]},{"name":" def annots: List[Term]","description":"scala.quoted.Quotes.Callable(name=annots, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/annots.html","searchKeys":["annots"]},{"name":" def readBytes(n: Int): Array[Byte]","description":"dotty.tools.tasty.TastyReader.Callable(name=readBytes, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/read-bytes.html","searchKeys":["readBytes"]},{"name":" trait MatchTypeTreeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-match-type-tree-module.html","searchKeys":["MatchTypeTreeModule"]},{"name":" def isModifierTag(tag: Int): Boolean","description":"dotty.tools.tasty.TastyFormat$.Callable(name=isModifierTag, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-format/is-modifier-tag.html","searchKeys":["isModifierTag"]},{"name":" given NewMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-new-methods.html","searchKeys":["NewMethods"]},{"name":" trait LiteralModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-literal-module.html","searchKeys":["LiteralModule"]},{"name":" trait RecursiveTypeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-recursive-type-module.html","searchKeys":["RecursiveTypeModule"]},{"name":"given TypeTest_Tree_MatchTypeTree as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_MatchTypeTree, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-match-type-tree.html","searchKeys":["TypeTest_Tree_MatchTypeTree"]},{"name":" def unapply(x: MatchType): Option[(TypeRepr, TypeRepr, List[TypeRepr])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-type-module/unapply.html","searchKeys":["unapply"]},{"name":"TASTy Inspection","description":"","location":"docs/reference/metaprogramming/tasty-inspect.html","searchKeys":["TASTy Inspection"]},{"name":" def scrutinee: Term","description":"scala.quoted.Quotes.Callable(name=scrutinee, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-methods/scrutinee.html","searchKeys":["scrutinee"]},{"name":" def fun: Term","description":"scala.quoted.Quotes.Callable(name=fun, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-unapply-methods/fun.html","searchKeys":["fun"]},{"name":" def unapply(x: Typed): Option[(Term, TypeTree)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-typed-module/unapply.html","searchKeys":["unapply"]},{"name":" def apply(expr: Term, cases: List[CaseDef], finalizer: Option[Term]): Try","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-try-module/apply.html","searchKeys":["apply"]},{"name":" object Unlifted","description":"scala.quoted.Unlifted$","location":"api/scala/quoted/-unlifted.html","searchKeys":["Unlifted"]},{"name":" def annot: Term","description":"scala.quoted.Quotes.Callable(name=annot, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-annotated-type-methods/annot.html","searchKeys":["annot"]},{"name":" trait MatchTypeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-match-type-module.html","searchKeys":["MatchTypeModule"]},{"name":" def isExprOf[X](x$1: Type[X]): Boolean","description":"scala.quoted.Quotes.Callable(name=isExprOf, receiver=null, params=[])","location":"api/scala/quoted/-quotes/is-expr-of.html","searchKeys":["isExprOf"]},{"name":" def elems: IArray[Object]","description":"scala.runtime.TupleXXL.Callable(name=elems, receiver=null, params=[])","location":"api/scala/runtime/-tuple-x-x-l/elems.html","searchKeys":["elems"]},{"name":" trait AnnotatedModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-annotated-module.html","searchKeys":["AnnotatedModule"]},{"name":"inline def size[This >: Tuple <: Tuple]: Size[This]","description":"scala.Tuple.Callable(name=size, receiver=null, params=[])","location":"api/scala/-tuple/size.html","searchKeys":["size"]},{"name":" def HasDefault: Flags","description":"scala.quoted.Quotes.Callable(name=HasDefault, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-has-default.html","searchKeys":["HasDefault"]},{"name":" def ProductClass: Symbol","description":"scala.quoted.Quotes.Callable(name=ProductClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-product-class.html","searchKeys":["ProductClass"]},{"name":" def apply(x: Char): Constant","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-char-module/apply.html","searchKeys":["apply"]},{"name":" def left: TypeRepr","description":"scala.quoted.Quotes.Callable(name=left, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-and-type-methods/left.html","searchKeys":["left"]},{"name":" def ordinal(x: MirroredMonoType): Int","description":"scala.deriving.Mirror$.Callable(name=ordinal, receiver=null, params=[])","location":"api/scala/deriving/-mirror$/-sum/ordinal.html","searchKeys":["ordinal"]},{"name":" object Tuple","description":"scala.Tuple$","location":"api/scala/-tuple$.html","searchKeys":["Tuple"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-ident-methods/name.html","searchKeys":["name"]},{"name":" trait FromDigits[T]","description":"scala.util.FromDigits","location":"api/scala/util/-from-digits.html","searchKeys":["FromDigits"]},{"name":" def drop(self: Tuple, n: Int): Tuple","description":"scala.runtime.Tuple$.Callable(name=drop, receiver=null, params=[])","location":"api/scala/runtime/-tuple/drop.html","searchKeys":["drop"]},{"name":"Dotty Overall Structure","description":"","location":"docs/internals/overall-structure.html","searchKeys":["Dotty Overall Structure"]},{"name":"Announcing Dotty 0.24.0-RC1 - 2.13.2 standard library, better error messages and more","description":"","location":"blog/_posts/2020-04-29-24th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.24.0-RC1 - 2.13.2 standard library, better error messages and more"]},{"name":" trait ConstantStringModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-string-module.html","searchKeys":["ConstantStringModule"]},{"name":" def value: Not[Nothing]","description":"scala.util.Not$.Callable(name=value, receiver=null, params=[])","location":"api/scala/util/-not$/value.html","searchKeys":["value"]},{"name":" def copy(original: Tree)(name: String, arg: Term): NamedArg","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-named-arg-module/copy.html","searchKeys":["copy"]},{"name":" def matches[T](that: Expr[Any]): Boolean","description":"scala.quoted.Quotes.Callable(name=matches, receiver=null, params=[])","location":"api/scala/quoted/-quotes/matches.html","searchKeys":["matches"]},{"name":" def endColumn: Int","description":"scala.quoted.Quotes.Callable(name=endColumn, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-position-methods/end-column.html","searchKeys":["endColumn"]},{"name":" trait FunctionXXL","description":"scala.runtime.FunctionXXL","location":"api/scala/runtime/-function-x-x-l.html","searchKeys":["FunctionXXL"]},{"name":" object boolean","description":"scala.compiletime.ops.package$","location":"api/scala/compiletime/ops/boolean.html","searchKeys":["boolean"]},{"name":"Vararg Patterns","description":"","location":"docs/reference/changed-features/vararg-patterns.html","searchKeys":["Vararg Patterns"]},{"name":" object TypeTest","description":"scala.reflect.TypeTest$","location":"api/scala/reflect/-type-test$.html","searchKeys":["TypeTest"]},{"name":" def copy(original: Tree)(tpt: TypeTree): New","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-new-module/copy.html","searchKeys":["copy"]},{"name":"sealed trait ErrorKind","description":"scala.compiletime.testing.ErrorKind","location":"api/scala/compiletime/testing/-error-kind.html","searchKeys":["ErrorKind"]},{"name":" def isAbstractType: Boolean","description":"scala.quoted.Quotes.Callable(name=isAbstractType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-abstract-type.html","searchKeys":["isAbstractType"]},{"name":" def betaReduce(term: Term): Option[Term]","description":"scala.quoted.Quotes.Callable(name=betaReduce, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-module/beta-reduce.html","searchKeys":["betaReduce"]},{"name":"Worksheet Mode - Implementation details","description":"","location":"docs/usage/worksheet-mode-implementation-details.html","searchKeys":["Worksheet Mode - Implementation details"]},{"name":" class NumberTooSmall(msg: String) extends FromDigitsException","description":"scala.util.FromDigits$","location":"api/scala/util/-from-digits$/-number-too-small.html","searchKeys":["NumberTooSmall"]},{"name":"given Tuple16Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple16Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple16-liftable.html","searchKeys":["Tuple16Liftable"]},{"name":"Overview","description":"","location":"docs/reference/overview.html","searchKeys":["Overview"]},{"name":" def binder: RecursiveType","description":"scala.quoted.Quotes.Callable(name=binder, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-recursive-this-methods/binder.html","searchKeys":["binder"]},{"name":"given Tuple4Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple4Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple4-unliftable.html","searchKeys":["Tuple4Unliftable"]},{"name":" def iterate[T](start: T, len: Int)(f: T => T)(evidence$13: ClassTag[T]): IArray[T]","description":"scala.IArray$package$.Callable(name=iterate, receiver=null, params=[])","location":"api/scala/-i-array/iterate.html","searchKeys":["iterate"]},{"name":" def apply(x: Double): Constant","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-double-module/apply.html","searchKeys":["apply"]},{"name":" trait RefinementModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-refinement-module.html","searchKeys":["RefinementModule"]},{"name":" def transformCaseDef(tree: CaseDef)(owner: Symbol): CaseDef","description":"scala.quoted.Quotes.Callable(name=transformCaseDef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-map/transform-case-def.html","searchKeys":["transformCaseDef"]},{"name":" def showError(err: ParseError): Unit","description":"scala.util.CommandLineParser$.Callable(name=showError, receiver=null, params=[])","location":"api/scala/util/-command-line-parser/show-error.html","searchKeys":["showError"]},{"name":" def simplified: TypeRepr","description":"scala.quoted.Quotes.Callable(name=simplified, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/simplified.html","searchKeys":["simplified"]},{"name":"inline def ++[This >: Tuple <: Tuple](that: Tuple): Concat[This, that.type]","description":"scala.Tuple.Callable(name=++, receiver=null, params=[])","location":"api/scala/-tuple/++.html","searchKeys":["++"]},{"name":"given Tuple22Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple22Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple22-unliftable.html","searchKeys":["Tuple22Unliftable"]},{"name":" trait ReportingModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-reporting-module.html","searchKeys":["ReportingModule"]},{"name":" def unapply(pattern: Bind): Option[(String, Tree)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-bind-module/unapply.html","searchKeys":["unapply"]},{"name":" def patterns: List[Tree]","description":"scala.quoted.Quotes.Callable(name=patterns, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-alternatives-methods/patterns.html","searchKeys":["patterns"]},{"name":" def betaReduce[T](expr: Expr[T])(x$2: Quotes): Expr[T]","description":"scala.quoted.Expr$.Callable(name=betaReduce, receiver=null, params=[])","location":"api/scala/quoted/-expr$/beta-reduce.html","searchKeys":["betaReduce"]},{"name":" trait DefDefModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-def-def-module.html","searchKeys":["DefDefModule"]},{"name":" def startsWith[T, U >: T](that: IArray[U], offset: Int)(evidence$25: ClassTag[U]): Boolean","description":"scala.opaques$.Callable(name=startsWith, receiver=null, params=[])","location":"api/scala/opaques/array-ops/starts-with.html","searchKeys":["startsWith"]},{"name":"given TypeTest_TypeRepr_TermRef as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_TermRef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-term-ref.html","searchKeys":["TypeTest_TypeRepr_TermRef"]},{"name":" def copy(original: Tree)(fun: Term, implicits: List[Term], patterns: List[Tree]): Unapply","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-unapply-module/copy.html","searchKeys":["copy"]},{"name":" object strictEquality","description":"scalaShadowing.language$","location":"api/scalaShadowing/language/strict-equality.html","searchKeys":["strictEquality"]},{"name":" def classSymbol: Option[Symbol]","description":"scala.quoted.Quotes.Callable(name=classSymbol, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/class-symbol.html","searchKeys":["classSymbol"]},{"name":" def RepeatedParamClass: Symbol","description":"scala.quoted.Quotes.Callable(name=RepeatedParamClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-repeated-param-class.html","searchKeys":["RepeatedParamClass"]},{"name":" trait AppliedModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-applied-module.html","searchKeys":["AppliedModule"]},{"name":" def param(idx: Int): TypeRepr","description":"scala.quoted.Quotes.Callable(name=param, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-lambda-methods/param.html","searchKeys":["param"]},{"name":" def unapply(tree: LambdaTypeTree): Option[(List[TypeDef], Tree)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-lambda-type-tree-module/unapply.html","searchKeys":["unapply"]},{"name":" def apply(tpe: TypeRepr): WildcardTypeTree","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-wildcard-type-tree-module/apply.html","searchKeys":["apply"]},{"name":" def fromString(s: String): Short","description":"scala.util.CommandLineParser$.Callable(name=fromString, receiver=null, params=[])","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-short/from-string.html","searchKeys":["fromString"]},{"name":"Dropped: Procedure Syntax","description":"","location":"docs/reference/dropped-features/procedure-syntax.html","searchKeys":["Dropped: Procedure Syntax"]},{"name":" given SimpleSelectorMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-simple-selector-methods.html","searchKeys":["SimpleSelectorMethods"]},{"name":" given RefinementMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-refinement-methods.html","searchKeys":["RefinementMethods"]},{"name":" def widenTermRefExpr: TypeRepr","description":"scala.quoted.Quotes.Callable(name=widenTermRefExpr, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/widen-term-ref-expr.html","searchKeys":["widenTermRefExpr"]},{"name":" def stats: List[Tree]","description":"scala.quoted.Quotes.Callable(name=stats, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-package-clause-methods/stats.html","searchKeys":["stats"]},{"name":" def unapply(tree: TypeCaseDef): Option[(TypeTree, TypeTree)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-case-def-module/unapply.html","searchKeys":["unapply"]},{"name":"@FunctionalInterface abstract class Conversion[-T, +U] extends T => U","description":"scala.Conversion","location":"api/scala/-conversion.html","searchKeys":["Conversion"]},{"name":" given TypeTreeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-tree-methods.html","searchKeys":["TypeTreeMethods"]},{"name":" def paramNames: List[String]","description":"scala.quoted.Quotes.Callable(name=paramNames, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-method-type-methods/param-names.html","searchKeys":["paramNames"]},{"name":" def apply(expr: Term, selectors: List[ImportSelector]): Import","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-import-module/apply.html","searchKeys":["apply"]},{"name":" def unapply(x: Annotated): Option[(TypeTree, Term)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-annotated-module/unapply.html","searchKeys":["unapply"]},{"name":" def ofTuple[T <: Tuple](tup: T)(evidence$1: IsMappedBy[[T] =>> Expr[T]][T], evidence$2: Type[T], x$2: Quotes): Expr[InverseMap[T, [T] =>> Expr[T]]]","description":"scala.quoted.Expr$.Callable(name=ofTuple, receiver=null, params=[])","location":"api/scala/quoted/-expr$/of-tuple.html","searchKeys":["ofTuple"]},{"name":" def unapply(x: Select): Option[(Term, String)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-select-module/unapply.html","searchKeys":["unapply"]},{"name":" def ref: Term","description":"scala.quoted.Quotes.Callable(name=ref, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-singleton-methods/ref.html","searchKeys":["ref"]},{"name":" trait Liftable[T]","description":"scala.quoted.Liftable","location":"api/scala/quoted/-liftable.html","searchKeys":["Liftable"]},{"name":" def apply(ref: Term): Singleton","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-singleton-module/apply.html","searchKeys":["apply"]},{"name":" def underlyingArgument: Term","description":"scala.quoted.Quotes.Callable(name=underlyingArgument, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-methods/underlying-argument.html","searchKeys":["underlyingArgument"]},{"name":" def init[T]: IArray[T]","description":"scala.opaques$.Callable(name=init, receiver=null, params=[])","location":"api/scala/opaques/array-ops/init.html","searchKeys":["init"]},{"name":" def fromArray[T](xs: Array[T]): Tuple","description":"scala.Tuple$.Callable(name=fromArray, receiver=null, params=[])","location":"api/scala/-tuple$/from-array.html","searchKeys":["fromArray"]},{"name":"given TypeTest_Tree_NamedArg as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_NamedArg, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-named-arg.html","searchKeys":["TypeTest_Tree_NamedArg"]},{"name":" def binder: LambdaType","description":"scala.quoted.Quotes.Callable(name=binder, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-param-ref-methods/binder.html","searchKeys":["binder"]},{"name":" def splitAt(self: Tuple, n: Int): (Tuple, Tuple)","description":"scala.runtime.Tuple$.Callable(name=splitAt, receiver=null, params=[])","location":"api/scala/runtime/-tuple/split-at.html","searchKeys":["splitAt"]},{"name":"Reference","description":"","location":"docs/Reference/index.html","searchKeys":["Reference"]},{"name":" def apply(x: T): U","description":"scala.Conversion.Callable(name=apply, receiver=null, params=[])","location":"api/scala/-conversion/apply.html","searchKeys":["apply"]},{"name":"given LeftUnliftable","description":"scala.quoted.Unliftable$.Callable(name=LeftUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-left-unliftable.html","searchKeys":["LeftUnliftable"]},{"name":" def foldTree(x: Unit, tree: Tree)(owner: Symbol): Unit","description":"scala.quoted.Quotes.Callable(name=foldTree, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-traverser/fold-tree.html","searchKeys":["foldTree"]},{"name":" def relativeTo(base: Addr): Addr","description":"dotty.tools.tasty.TastyBuffer$.Callable(name=relativeTo, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer$/-addr/relative-to.html","searchKeys":["relativeTo"]},{"name":" def bound: Option[TypeTree]","description":"scala.quoted.Quotes.Callable(name=bound, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-type-tree-methods/bound.html","searchKeys":["bound"]},{"name":" def apply(stats: List[Statement], expr: Term): Block","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-block-module/apply.html","searchKeys":["apply"]},{"name":"final class Repeated() extends Annotation","description":"scala.annotation.internal.Repeated","location":"api/scala/annotation/internal/-repeated.html","searchKeys":["Repeated"]},{"name":" def isErased: Boolean","description":"scala.quoted.Quotes.Callable(name=isErased, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-method-type-methods/is-erased.html","searchKeys":["isErased"]},{"name":" def NullClass: Symbol","description":"scala.quoted.Quotes.Callable(name=NullClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-null-class.html","searchKeys":["NullClass"]},{"name":"given Tuple9Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple9Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple9-liftable.html","searchKeys":["Tuple9Liftable"]},{"name":" given ImplicitSearchSuccessMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-implicit-search-success-methods.html","searchKeys":["ImplicitSearchSuccessMethods"]},{"name":"Announcing Dotty 0.25.0-RC2 - speed-up of givens and change in the tuple API","description":"","location":"blog/_posts/2020-06-22-25th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.25.0-RC2 - speed-up of givens and change in the tuple API"]},{"name":" def flatten[T, U](evidence$16: ClassTag[U], x$1: T => Iterable[U]): IArray[U]","description":"scala.opaques$.Callable(name=flatten, receiver=null, params=[])","location":"api/scala/opaques/array-ops/flatten.html","searchKeys":["flatten"]},{"name":"given Tuple19Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple19Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple19-liftable.html","searchKeys":["Tuple19Liftable"]},{"name":" def CharClass: Symbol","description":"scala.quoted.Quotes.Callable(name=CharClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-char-class.html","searchKeys":["CharClass"]},{"name":" def byName[T](x: => T): T","description":"scala.compiletime.package$.Callable(name=byName, receiver=null, params=[])","location":"api/scala/compiletime/by-name.html","searchKeys":["byName"]},{"name":"override def productIterator: Iterator[Any]","description":"scala.deriving.ArrayProduct.Callable(name=productIterator, receiver=null, params=[])","location":"api/scala/deriving/-array-product/product-iterator.html","searchKeys":["productIterator"]},{"name":" given given_FromString_Float as FromString[Float]","description":"scala.util.CommandLineParser$","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-float.html","searchKeys":["given_FromString_Float"]},{"name":"@deprecated(\"use EmptyTuple instead\", \"3.0.0-M2\")  object EmptyProduct extends ArrayProduct","description":"scala.deriving.EmptyProduct$","location":"api/scala/deriving/-empty-product.html","searchKeys":["EmptyProduct"]},{"name":" def supertpe: TypeRepr","description":"scala.quoted.Quotes.Callable(name=supertpe, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-super-type-methods/supertpe.html","searchKeys":["supertpe"]},{"name":" def ScalaPackage: Symbol","description":"scala.quoted.Quotes.Callable(name=ScalaPackage, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-scala-package.html","searchKeys":["ScalaPackage"]},{"name":" def unapply(x: SummonFrom): Option[List[CaseDef]]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-summon-from-module/unapply.html","searchKeys":["unapply"]},{"name":" trait ApplyModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-apply-module.html","searchKeys":["ApplyModule"]},{"name":" def drop[T](n: Int): IArray[T]","description":"scala.opaques$.Callable(name=drop, receiver=null, params=[])","location":"api/scala/opaques/array-ops/drop.html","searchKeys":["drop"]},{"name":" def Inline: Flags","description":"scala.quoted.Quotes.Callable(name=Inline, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-inline.html","searchKeys":["Inline"]},{"name":"Query Types Spec","description":"","location":"docs/reference/contextual/query-types-spec.html","searchKeys":["Query Types Spec"]},{"name":" def Final: Flags","description":"scala.quoted.Quotes.Callable(name=Final, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-final.html","searchKeys":["Final"]},{"name":" trait SelectOuterModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-select-outer-module.html","searchKeys":["SelectOuterModule"]},{"name":" def namePos: Position","description":"scala.quoted.Quotes.Callable(name=namePos, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-simple-selector-methods/name-pos.html","searchKeys":["namePos"]},{"name":" given BooleanLiftable[T <: Boolean] as Liftable[T]","description":"scala.quoted.Liftable$","location":"api/scala/quoted/-liftable$/-boolean-liftable.html","searchKeys":["BooleanLiftable"]},{"name":"Implementing Type classes","description":"","location":"docs/reference/contextual/type-classes.html","searchKeys":["Implementing Type classes"]},{"name":" given CaseDefMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-case-def-methods.html","searchKeys":["CaseDefMethods"]},{"name":"Automatic Eta Expansion","description":"","location":"docs/reference/changed-features/eta-expansion.html","searchKeys":["Automatic Eta Expansion"]},{"name":" def emptyIntIArray: IArray[Int]","description":"scala.IArray$package$.Callable(name=emptyIntIArray, receiver=null, params=[])","location":"api/scala/-i-array/empty-int-i-array.html","searchKeys":["emptyIntIArray"]},{"name":" def collectWhile[T](cond: => Boolean)(op: => T): List[T]","description":"dotty.tools.tasty.TastyReader.Callable(name=collectWhile, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/collect-while.html","searchKeys":["collectWhile"]},{"name":" def fromProduct(product: Product): Tuple","description":"scala.Tuple$.Callable(name=fromProduct, receiver=null, params=[])","location":"api/scala/-tuple$/from-product.html","searchKeys":["fromProduct"]},{"name":" def DoubleClass: Symbol","description":"scala.quoted.Quotes.Callable(name=DoubleClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-double-class.html","searchKeys":["DoubleClass"]},{"name":"inline def error(msg: String): Nothing","description":"scala.compiletime.package$.Callable(name=error, receiver=null, params=[])","location":"api/scala/compiletime/error.html","searchKeys":["error"]},{"name":"@compileTimeOnly(\"Illegal reference to `scala.quoted.runtime.Patterns.patternHigherOrderHole`\")  def patternHigherOrderHole[U](pat: Any, args: Any*): U","description":"scala.quoted.runtime.Patterns$.Callable(name=patternHigherOrderHole, receiver=null, params=[])","location":"api/scala/quoted/runtime/-patterns/pattern-higher-order-hole.html","searchKeys":["patternHigherOrderHole"]},{"name":" def scanLeft[T, U](z: U)(op: (U, T) => U)(evidence$22: ClassTag[U]): IArray[U]","description":"scala.opaques$.Callable(name=scanLeft, receiver=null, params=[])","location":"api/scala/opaques/array-ops/scan-left.html","searchKeys":["scanLeft"]},{"name":" def body: Tree","description":"scala.quoted.Quotes.Callable(name=body, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-lambda-type-tree-methods/body.html","searchKeys":["body"]},{"name":" def value: Term","description":"scala.quoted.Quotes.Callable(name=value, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-named-arg-methods/value.html","searchKeys":["value"]},{"name":" trait TypeBoundsModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-module.html","searchKeys":["TypeBoundsModule"]},{"name":" def Opaque: Flags","description":"scala.quoted.Quotes.Callable(name=Opaque, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-opaque.html","searchKeys":["Opaque"]},{"name":" def emptyCharIArray: IArray[Char]","description":"scala.IArray$package$.Callable(name=emptyCharIArray, receiver=null, params=[])","location":"api/scala/-i-array/empty-char-i-array.html","searchKeys":["emptyCharIArray"]},{"name":"given eqlString","description":"scala.Eql$.Callable(name=eqlString, receiver=null, params=[])","location":"api/scala/-eql$/eql-string.html","searchKeys":["eqlString"]},{"name":" def apply(x: String): Constant","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-string-module/apply.html","searchKeys":["apply"]},{"name":" def foldLeft[T, U](z: U)(op: (U, T) => U)(evidence$18: ClassTag[U]): U","description":"scala.opaques$.Callable(name=foldLeft, receiver=null, params=[])","location":"api/scala/opaques/array-ops/fold-left.html","searchKeys":["foldLeft"]},{"name":"inline def take[This >: Tuple <: Tuple](n: Int): Take[This, n.type]","description":"scala.Tuple.Callable(name=take, receiver=null, params=[])","location":"api/scala/-tuple/take.html","searchKeys":["take"]},{"name":" def toPos: Position","description":"scala.quoted.Quotes.Callable(name=toPos, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-rename-selector-methods/to-pos.html","searchKeys":["toPos"]},{"name":" trait ConstantLongModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-long-module.html","searchKeys":["ConstantLongModule"]},{"name":"final case class Addr(index: Int) extends AnyVal","description":"dotty.tools.tasty.TastyBuffer$","location":"api/dotty/tools.tasty/-tasty-buffer$/-addr.html","searchKeys":["Addr"]},{"name":" trait TypeMatchModule","description":"scala.quoted.runtime.QuoteMatching","location":"api/scala/quoted/runtime/-quote-matching/-type-match-module.html","searchKeys":["TypeMatchModule"]},{"name":" def emptyBooleanIArray: IArray[Boolean]","description":"scala.IArray$package$.Callable(name=emptyBooleanIArray, receiver=null, params=[])","location":"api/scala/-i-array/empty-boolean-i-array.html","searchKeys":["emptyBooleanIArray"]},{"name":" trait ByNameModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-by-name-module.html","searchKeys":["ByNameModule"]},{"name":"Importing Givens","description":"","location":"docs/reference/contextual/given-imports.html","searchKeys":["Importing Givens"]},{"name":" def asExprOf[T](x$1: Type[T]): Expr[T]","description":"scala.quoted.Quotes.Callable(name=asExprOf, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-methods/as-expr-of.html","searchKeys":["asExprOf"]},{"name":" def flatMap[T, U](f: T => IterableOnce[U])(evidence$15: ClassTag[U]): IArray[U]","description":"scala.opaques$.Callable(name=flatMap, receiver=null, params=[])","location":"api/scala/opaques/array-ops/flat-map.html","searchKeys":["flatMap"]},{"name":" given TypeLambdaMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-lambda-methods.html","searchKeys":["TypeLambdaMethods"]},{"name":" trait TypeTreeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-tree-module.html","searchKeys":["TypeTreeModule"]},{"name":" def apply(expr: Term, from: Symbol): Return","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-return-module/apply.html","searchKeys":["apply"]},{"name":" def Object: Flags","description":"scala.quoted.Quotes.Callable(name=Object, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-object.html","searchKeys":["Object"]},{"name":" def temporaryShow(self: Tree): String","description":"scala.quoted.Quotes.Callable(name=temporaryShow, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-methods/temporary-show.html","searchKeys":["temporaryShow"]},{"name":"Differences between Scalac and Dotty","description":"","location":"docs/internals/dotc-scalac.html","searchKeys":["Differences between Scalac and Dotty"]},{"name":" def appliedToType(targ: TypeRepr): Term","description":"scala.quoted.Quotes.Callable(name=appliedToType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-methods/applied-to-type.html","searchKeys":["appliedToType"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-select-methods/name.html","searchKeys":["name"]},{"name":" object Mirror","description":"scala.deriving.Mirror$","location":"api/scala/deriving/-mirror$.html","searchKeys":["Mirror"]},{"name":" given PackageClauseMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-package-clause-methods.html","searchKeys":["PackageClauseMethods"]},{"name":" def copy(original: Tree)(name: String, tpt: TypeTree, rhs: Option[Term]): ValDef","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-val-def-module/copy.html","searchKeys":["copy"]},{"name":" def emptyDoubleIArray: IArray[Double]","description":"scala.IArray$package$.Callable(name=emptyDoubleIArray, receiver=null, params=[])","location":"api/scala/-i-array/empty-double-i-array.html","searchKeys":["emptyDoubleIArray"]},{"name":" object FromString","description":"scala.util.CommandLineParser$","location":"api/scala/util/-command-line-parser/-from-string$.html","searchKeys":["FromString"]},{"name":" def tpt: TypeTree","description":"scala.quoted.Quotes.Callable(name=tpt, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-refined-methods/tpt.html","searchKeys":["tpt"]},{"name":" class UnpickleException(msg: String) extends RuntimeException","description":"dotty.tools.tasty.UnpickleException","location":"api/dotty/tools.tasty/-unpickle-exception.html","searchKeys":["UnpickleException"]},{"name":" def unapply(x: Inferred): Boolean","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-inferred-module/unapply.html","searchKeys":["unapply"]},{"name":"Safe Initialization","description":"","location":"docs/reference/other-new-features/safe-initialization.html","searchKeys":["Safe Initialization"]},{"name":" def summon[T](x$1: Type[T])(x$2: Quotes): Option[Expr[T]]","description":"scala.quoted.Expr$.Callable(name=summon, receiver=null, params=[])","location":"api/scala/quoted/-expr$/summon.html","searchKeys":["summon"]},{"name":" def scanRight[T, U](z: U)(op: (T, U) => U)(evidence$23: ClassTag[U]): IArray[U]","description":"scala.opaques$.Callable(name=scanRight, receiver=null, params=[])","location":"api/scala/opaques/array-ops/scan-right.html","searchKeys":["scanRight"]},{"name":" def apply(fun: Term, args: List[Term]): Apply","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-apply-module/apply.html","searchKeys":["apply"]},{"name":" def FieldAccessor: Flags","description":"scala.quoted.Quotes.Callable(name=FieldAccessor, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-field-accessor.html","searchKeys":["FieldAccessor"]},{"name":"given ClassLiftable","description":"scala.quoted.Liftable$.Callable(name=ClassLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-class-liftable.html","searchKeys":["ClassLiftable"]},{"name":" def addr(idx: Int): Addr","description":"dotty.tools.tasty.TastyReader.Callable(name=addr, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/addr.html","searchKeys":["addr"]},{"name":" given DocumentationMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-documentation-methods.html","searchKeys":["DocumentationMethods"]},{"name":" def raw: String","description":"scala.quoted.Quotes.Callable(name=raw, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-documentation-methods/raw.html","searchKeys":["raw"]},{"name":"given eqlSet","description":"scala.Eql$.Callable(name=eqlSet, receiver=null, params=[])","location":"api/scala/-eql$/eql-set.html","searchKeys":["eqlSet"]},{"name":"Using Clauses","description":"","location":"docs/reference/contextual/using-clauses.html","searchKeys":["Using Clauses"]},{"name":" def take(self: Tuple, n: Int): Tuple","description":"scala.runtime.Tuple$.Callable(name=take, receiver=null, params=[])","location":"api/scala/runtime/-tuple/take.html","searchKeys":["take"]},{"name":" def apply(lhs: TypeRepr, rhs: TypeRepr): AndType","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-and-type-module/apply.html","searchKeys":["apply"]},{"name":" def unapply(x: PolyType): Option[(List[String], List[TypeBounds], TypeRepr)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-poly-type-module/unapply.html","searchKeys":["unapply"]},{"name":" given FloatLiftable[T <: Float] as Liftable[T]","description":"scala.quoted.Liftable$","location":"api/scala/quoted/-liftable$/-float-liftable.html","searchKeys":["FloatLiftable"]},{"name":" def isTerm: Boolean","description":"scala.quoted.Quotes.Callable(name=isTerm, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-term.html","searchKeys":["isTerm"]},{"name":" def toExpr(x: T): Quotes => Expr[T]","description":"scala.quoted.Liftable$.Callable(name=toExpr, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-char-liftable/to-expr.html","searchKeys":["toExpr"]},{"name":" trait BlockModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-block-module.html","searchKeys":["BlockModule"]},{"name":"Changes in Overload Resolution","description":"","location":"docs/reference/changed-features/overload-resolution.html","searchKeys":["Changes in Overload Resolution"]},{"name":" def isImplicit: Boolean","description":"scala.quoted.Quotes.Callable(name=isImplicit, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-method-type-methods/is-implicit.html","searchKeys":["isImplicit"]},{"name":"inline def nn[T]: x.type & T","description":"dotty.DottyPredef$.Callable(name=nn, receiver=null, params=[])","location":"api/dotty/-dotty-predef/nn.html","searchKeys":["nn"]},{"name":" object EmptyTuple extends Tuple","description":"scala.Tuple$package$","location":"api/scala/-empty-tuple.html","searchKeys":["EmptyTuple"]},{"name":"Announcing Dotty 0.6.0 and 0.7.0-RC1","description":"","location":"blog/_posts/2018-03-05-seventh-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.6.0 and 0.7.0-RC1"]},{"name":"given TypeTest_Tree_TypeBlock as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_TypeBlock, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-type-block.html","searchKeys":["TypeTest_Tree_TypeBlock"]},{"name":" def derivesFrom(cls: Symbol): Boolean","description":"scala.quoted.Quotes.Callable(name=derivesFrom, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/derives-from.html","searchKeys":["derivesFrom"]},{"name":" trait RenameSelectorModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-rename-selector-module.html","searchKeys":["RenameSelectorModule"]},{"name":" class AnnotationDefault extends Annotation","description":"scala.annotation.internal.AnnotationDefault","location":"api/scala/annotation/internal/-annotation-default.html","searchKeys":["AnnotationDefault"]},{"name":"Procedures","description":"","location":"docs/Procedures/index.html","searchKeys":["Procedures"]},{"name":" def endLine: Int","description":"scala.quoted.Quotes.Callable(name=endLine, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-position-methods/end-line.html","searchKeys":["endLine"]},{"name":" def temporaryShowAnsiColored(self: Tree): String","description":"scala.quoted.Quotes.Callable(name=temporaryShowAnsiColored, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-methods/temporary-show-ansi-colored.html","searchKeys":["temporaryShowAnsiColored"]},{"name":"Dropped: Weak Conformance","description":"","location":"docs/reference/dropped-features/weak-conformance.html","searchKeys":["Dropped: Weak Conformance"]},{"name":" trait FlagsModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-flags-module.html","searchKeys":["FlagsModule"]},{"name":"Language Versions","description":"","location":"docs/usage/language-versions.html","searchKeys":["Language Versions"]},{"name":" def parseArgument[T](args: Array[String], n: Int)(fs: FromString[T]): T","description":"scala.util.CommandLineParser$.Callable(name=parseArgument, receiver=null, params=[])","location":"api/scala/util/-command-line-parser/parse-argument.html","searchKeys":["parseArgument"]},{"name":" object noAutoTupling","description":"scalaShadowing.language$","location":"api/scalaShadowing/language/no-auto-tupling.html","searchKeys":["noAutoTupling"]},{"name":"Explicit Nulls","description":"","location":"docs/internals/explicit-nulls.html","searchKeys":["Explicit Nulls"]},{"name":"Other Changed Features","description":"","location":"docs/Other Changed Features/index.html","searchKeys":["Other Changed Features"]},{"name":"given TypeTest_Tree_If as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_If, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-if.html","searchKeys":["TypeTest_Tree_If"]},{"name":" def requiredPackage(path: String): Symbol","description":"scala.quoted.Quotes.Callable(name=requiredPackage, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-module/required-package.html","searchKeys":["requiredPackage"]},{"name":" object report","description":"scala.quoted.report$","location":"api/scala/quoted/report.html","searchKeys":["report"]},{"name":"@compileTimeOnly(\"Illegal reference to `scala.quoted.runtime.Expr.nestedSplice`\")  def nestedSplice[T](q: Quotes)(x: Nested => Expr[T]): T","description":"scala.quoted.runtime.Expr$.Callable(name=nestedSplice, receiver=null, params=[])","location":"api/scala/quoted/runtime/-expr/nested-splice.html","searchKeys":["nestedSplice"]},{"name":" def readByte(): Int","description":"dotty.tools.tasty.TastyReader.Callable(name=readByte, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/read-byte.html","searchKeys":["readByte"]},{"name":"Dotty becomes Scala 3","description":"","location":"blog/_posts/2020-09-21-naming-schema-change.html","searchKeys":["Dotty becomes Scala 3"]},{"name":" def filter[T](p: T => Boolean): IArray[T]","description":"scala.opaques$.Callable(name=filter, receiver=null, params=[])","location":"api/scala/opaques/array-ops/filter.html","searchKeys":["filter"]},{"name":"Testing in Dotty","description":"","location":"docs/contributing/testing.html","searchKeys":["Testing in Dotty"]},{"name":"given TypeTest_TypeRepr_ConstantType as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_ConstantType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-constant-type.html","searchKeys":["TypeTest_TypeRepr_ConstantType"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-simple-selector-methods/name.html","searchKeys":["name"]},{"name":"given ArrayOfDoubleLiftable","description":"scala.quoted.Liftable$.Callable(name=ArrayOfDoubleLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-array-of-double-liftable.html","searchKeys":["ArrayOfDoubleLiftable"]},{"name":" def contains[T](elem: T): Boolean","description":"scala.opaques$.Callable(name=contains, receiver=null, params=[])","location":"api/scala/opaques/array-ops/contains.html","searchKeys":["contains"]},{"name":"inline def toList: List[Union[Tuple]]","description":"scala.Tuple.Callable(name=toList, receiver=null, params=[])","location":"api/scala/-tuple/to-list.html","searchKeys":["toList"]},{"name":"Announcing Dotty 0.17.0-RC1 – new implicit scoping rules and more","description":"","location":"blog/_posts/2019-07-25-17th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.17.0-RC1 – new implicit scoping rules and more"]},{"name":" def resType: TypeRepr","description":"scala.quoted.Quotes.Callable(name=resType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-poly-type-methods/res-type.html","searchKeys":["resType"]},{"name":" def CaseAccessor: Flags","description":"scala.quoted.Quotes.Callable(name=CaseAccessor, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-case-accessor.html","searchKeys":["CaseAccessor"]},{"name":" def ParamAccessor: Flags","description":"scala.quoted.Quotes.Callable(name=ParamAccessor, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-param-accessor.html","searchKeys":["ParamAccessor"]},{"name":" def toArray: Array[Object]","description":"scala.runtime.TupleXXL.Callable(name=toArray, receiver=null, params=[])","location":"api/scala/runtime/-tuple-x-x-l/to-array.html","searchKeys":["toArray"]},{"name":" def copy(original: Tree)(cond: Term, body: Term): While","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-while-module/copy.html","searchKeys":["copy"]},{"name":"given MapUnliftable","description":"scala.quoted.Unliftable$.Callable(name=MapUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-map-unliftable.html","searchKeys":["MapUnliftable"]},{"name":"inline def toIArray: IArray[Object]","description":"scala.Tuple.Callable(name=toIArray, receiver=null, params=[])","location":"api/scala/-tuple/to-i-array.html","searchKeys":["toIArray"]},{"name":" def JavaDefined: Flags","description":"scala.quoted.Quotes.Callable(name=JavaDefined, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-java-defined.html","searchKeys":["JavaDefined"]},{"name":" trait Selectable","description":"scala.Selectable","location":"api/scala/-selectable.html","searchKeys":["Selectable"]},{"name":"TASTy Reflect","description":"","location":"docs/reference/metaprogramming/tasty-reflect.html","searchKeys":["TASTy Reflect"]},{"name":" def copy(original: Tree)(name: String, rhs: Tree): TypeDef","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-def-module/copy.html","searchKeys":["copy"]},{"name":" def apply(lhs: TypeRepr, rhs: TypeRepr): OrType","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-or-type-module/apply.html","searchKeys":["apply"]},{"name":" def StringClass: Symbol","description":"scala.quoted.Quotes.Callable(name=StringClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-string-class.html","searchKeys":["StringClass"]},{"name":" def apply(qual: Term, mix: Option[String]): Super","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-super-module/apply.html","searchKeys":["apply"]},{"name":" def nextByte: Int","description":"dotty.tools.tasty.TastyReader.Callable(name=nextByte, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/next-byte.html","searchKeys":["nextByte"]},{"name":"given RightLiftable","description":"scala.quoted.Liftable$.Callable(name=RightLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-right-liftable.html","searchKeys":["RightLiftable"]},{"name":"Export Clauses","description":"","location":"docs/reference/other-new-features/export.html","searchKeys":["Export Clauses"]},{"name":" def indexWhere[T](p: T => Boolean, from: Int): Int","description":"scala.opaques$.Callable(name=indexWhere, receiver=null, params=[])","location":"api/scala/opaques/array-ops/index-where.html","searchKeys":["indexWhere"]},{"name":" def fromIterator(elems: Iterator[Any]): TupleXXL","description":"scala.runtime.TupleXXL$.Callable(name=fromIterator, receiver=null, params=[])","location":"api/scala/runtime/-tuple-x-x-l$/from-iterator.html","searchKeys":["fromIterator"]},{"name":"given LongUnliftable","description":"scala.quoted.Unliftable$.Callable(name=LongUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-long-unliftable.html","searchKeys":["LongUnliftable"]},{"name":" def showAnsiColored: String","description":"scala.quoted.Quotes.Callable(name=showAnsiColored, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-methods/show-ansi-colored.html","searchKeys":["showAnsiColored"]},{"name":" object FromDigits","description":"scala.util.FromDigits$","location":"api/scala/util/-from-digits$.html","searchKeys":["FromDigits"]},{"name":" def appliedToArgss(argss: List[List[Term]]): Term","description":"scala.quoted.Quotes.Callable(name=appliedToArgss, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-methods/applied-to-argss.html","searchKeys":["appliedToArgss"]},{"name":"given TypeTest_Tree_Block as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Block, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-block.html","searchKeys":["TypeTest_Tree_Block"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-ref-methods/name.html","searchKeys":["name"]},{"name":" def apply(symbol: Symbol): TypeDef","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-def-module/apply.html","searchKeys":["apply"]},{"name":"given TypeTest_TypeRepr_ParamRef as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_ParamRef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-param-ref.html","searchKeys":["TypeTest_TypeRepr_ParamRef"]},{"name":" def unapply(x: AndType): Option[(TypeRepr, TypeRepr)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-and-type-module/unapply.html","searchKeys":["unapply"]},{"name":" def maybeOwner: Symbol","description":"scala.quoted.Quotes.Callable(name=maybeOwner, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/maybe-owner.html","searchKeys":["maybeOwner"]},{"name":"Translation of Enums and ADTs","description":"","location":"docs/reference/enums/desugarEnums.html","searchKeys":["Translation of Enums and ADTs"]},{"name":"given TypeTest_ImportSelector_RenameSelector as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_ImportSelector_RenameSelector, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-import-selector_-rename-selector.html","searchKeys":["TypeTest_ImportSelector_RenameSelector"]},{"name":"Creator Applications","description":"","location":"docs/reference/other-new-features/creator-applications.html","searchKeys":["Creator Applications"]},{"name":"final def skipNat(at: Addr): Addr","description":"dotty.tools.tasty.TastyBuffer.Callable(name=skipNat, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/skip-nat.html","searchKeys":["skipNat"]},{"name":"Givens","description":"","location":"docs/reference/contextual/instance-defs.html","searchKeys":["Givens"]},{"name":" trait FromString[T]","description":"scala.util.CommandLineParser$","location":"api/scala/util/-command-line-parser/-from-string.html","searchKeys":["FromString"]},{"name":" def ifBefore[T](end: Addr)(op: => T, default: T): T","description":"dotty.tools.tasty.TastyReader.Callable(name=ifBefore, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/if-before.html","searchKeys":["ifBefore"]},{"name":"given MapLiftable","description":"scala.quoted.Liftable$.Callable(name=MapLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-map-liftable.html","searchKeys":["MapLiftable"]},{"name":"inline def map[F <: ([_$1] =>> Any)](f: [t] => (x$1: t) => F[t]): Map[Tuple, F]","description":"scala.Tuple.Callable(name=map, receiver=null, params=[])","location":"api/scala/-tuple/map.html","searchKeys":["map"]},{"name":" def apply(self: NonEmptyTuple, n: Int): Any","description":"scala.runtime.Tuple$.Callable(name=apply, receiver=null, params=[])","location":"api/scala/runtime/-tuple/apply.html","searchKeys":["apply"]},{"name":"Changes in Type Inference","description":"","location":"docs/reference/changed-features/type-inference.html","searchKeys":["Changes in Type Inference"]},{"name":" def etaExpand(owner: Symbol): Term","description":"scala.quoted.Quotes.Callable(name=etaExpand, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-methods/eta-expand.html","searchKeys":["etaExpand"]},{"name":"Getting Started: Users","description":"","location":"docs/usage/getting-started.html","searchKeys":["Getting Started: Users"]},{"name":" def setFlag(t: Object, offset: Long, v: Int, ord: Int): Unit","description":"dotty.runtime.LazyVals$.Callable(name=setFlag, receiver=null, params=[])","location":"api/dotty/runtime/-lazy-vals/set-flag.html","searchKeys":["setFlag"]},{"name":"given StringContextUnliftable","description":"scala.quoted.Unliftable$.Callable(name=StringContextUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-string-context-unliftable.html","searchKeys":["StringContextUnliftable"]},{"name":" def canEqual(that: Any): Boolean","description":"scala.Tuple$package$.Callable(name=canEqual, receiver=null, params=[])","location":"api/scala/-empty-tuple/can-equal.html","searchKeys":["canEqual"]},{"name":" trait OmitSelectorModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-omit-selector-module.html","searchKeys":["OmitSelectorModule"]},{"name":"given LeftLiftable","description":"scala.quoted.Liftable$.Callable(name=LeftLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-left-liftable.html","searchKeys":["LeftLiftable"]},{"name":"given TypeTest_Tree_Import as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Import, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-import.html","searchKeys":["TypeTest_Tree_Import"]},{"name":"given Tuple3Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple3Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple3-unliftable.html","searchKeys":["Tuple3Unliftable"]},{"name":"Dropped: Do-While","description":"","location":"docs/reference/dropped-features/do-while.html","searchKeys":["Dropped: Do-While"]},{"name":" def CAS(t: Object, offset: Long, e: Long, v: Int, ord: Int): Boolean","description":"dotty.runtime.LazyVals$.Callable(name=CAS, receiver=null, params=[])","location":"api/dotty/runtime/-lazy-vals/-c-a-s.html","searchKeys":["CAS"]},{"name":" def show: String","description":"scala.quoted.Quotes.Callable(name=show, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/show.html","searchKeys":["show"]},{"name":" def isContextFunctionType: Boolean","description":"scala.quoted.Quotes.Callable(name=isContextFunctionType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/is-context-function-type.html","searchKeys":["isContextFunctionType"]},{"name":"@showAsInfix(showAsInfix.$lessinit$greater$default$1) sealed abstract class *:[+H, +T <: Tuple] extends NonEmptyTuple","description":"scala.*:","location":"api/scala/[42][58].html","searchKeys":["*:"]},{"name":" def Local: Flags","description":"scala.quoted.Quotes.Callable(name=Local, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-local.html","searchKeys":["Local"]},{"name":" def transformSubTrees[Tr <: Tree](trees: List[Tr])(owner: Symbol): List[Tr]","description":"scala.quoted.Quotes.Callable(name=transformSubTrees, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-map/transform-sub-trees.html","searchKeys":["transformSubTrees"]},{"name":" def sorted[T](x$1: Ordering[T]): IArray[T]","description":"scala.opaques$.Callable(name=sorted, receiver=null, params=[])","location":"api/scala/opaques/array-ops/sorted.html","searchKeys":["sorted"]},{"name":" class NumberTooLarge(msg: String) extends FromDigitsException","description":"scala.util.FromDigits$","location":"api/scala/util/-from-digits$/-number-too-large.html","searchKeys":["NumberTooLarge"]},{"name":" def RootClass: Symbol","description":"scala.quoted.Quotes.Callable(name=RootClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-root-class.html","searchKeys":["RootClass"]},{"name":" def unapply(x: TypeLambda): Option[(List[String], List[TypeBounds], TypeRepr)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-lambda-module/unapply.html","searchKeys":["unapply"]},{"name":"inline def codeOf(arg: Any): String","description":"scala.compiletime.package$.Callable(name=codeOf, receiver=null, params=[])","location":"api/scala/compiletime/code-of.html","searchKeys":["codeOf"]},{"name":" def copy(original: Tree)(elems: List[Term], tpt: TypeTree): Repeated","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-repeated-module/copy.html","searchKeys":["copy"]},{"name":" trait TypeIdentModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-ident-module.html","searchKeys":["TypeIdentModule"]},{"name":" object TupleXXL","description":"scala.runtime.TupleXXL$","location":"api/scala/runtime/-tuple-x-x-l$.html","searchKeys":["TupleXXL"]},{"name":"Changes in Compiler Plugins","description":"","location":"docs/reference/changed-features/compiler-plugins.html","searchKeys":["Changes in Compiler Plugins"]},{"name":"given NilLiftable","description":"scala.quoted.Liftable$.Callable(name=NilLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-nil-liftable.html","searchKeys":["NilLiftable"]},{"name":" given RepeatedMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-repeated-methods.html","searchKeys":["RepeatedMethods"]},{"name":" def Sealed: Flags","description":"scala.quoted.Quotes.Callable(name=Sealed, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-sealed.html","searchKeys":["Sealed"]},{"name":" class TastyHeaderUnpickler(reader: TastyReader)","description":"dotty.tools.tasty.TastyHeaderUnpickler","location":"api/dotty/tools.tasty/-tasty-header-unpickler.html","searchKeys":["TastyHeaderUnpickler"]},{"name":" def ScalaPackageClass: Symbol","description":"scala.quoted.Quotes.Callable(name=ScalaPackageClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-scala-package-class.html","searchKeys":["ScalaPackageClass"]},{"name":" given ImportMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-import-methods.html","searchKeys":["ImportMethods"]},{"name":"inline def splitAt[This >: Tuple <: Tuple](n: Int): (This, n.type)","description":"scala.Tuple.Callable(name=splitAt, receiver=null, params=[])","location":"api/scala/-tuple/split-at.html","searchKeys":["splitAt"]},{"name":"@compileTimeOnly(\"Illegal reference to `scala.quoted.runtime.Patterns.higherOrderHole`\")  def higherOrderHole[U](args: Any*): U","description":"scala.quoted.runtime.Patterns$.Callable(name=higherOrderHole, receiver=null, params=[])","location":"api/scala/quoted/runtime/-patterns/higher-order-hole.html","searchKeys":["higherOrderHole"]},{"name":" given LiteralMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-literal-methods.html","searchKeys":["LiteralMethods"]},{"name":" def Array_clone: Symbol","description":"scala.quoted.Quotes.Callable(name=Array_clone, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-array_clone.html","searchKeys":["Array_clone"]},{"name":"New Control Syntax","description":"","location":"docs/reference/other-new-features/control-syntax.html","searchKeys":["New Control Syntax"]},{"name":" def pos: Position","description":"scala.quoted.Quotes.Callable(name=pos, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/pos.html","searchKeys":["pos"]},{"name":" def apply(symbol: Symbol, rhsFn: List[TypeRepr] => List[List[Term]] => Option[Term]): DefDef","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-def-def-module/apply.html","searchKeys":["apply"]},{"name":"Syntax Changes in Dotty 0.22","description":"","location":"docs/release-notes/syntax-changes-0.22.html","searchKeys":["Syntax Changes in Dotty 0.22"]},{"name":"Context Bounds","description":"","location":"docs/reference/contextual/context-bounds.html","searchKeys":["Context Bounds"]},{"name":" def productElement(n: Int): Any","description":"scala.runtime.TupleXXL.Callable(name=productElement, receiver=null, params=[])","location":"api/scala/runtime/-tuple-x-x-l/product-element.html","searchKeys":["productElement"]},{"name":" def isNoSymbol: Boolean","description":"scala.quoted.Quotes.Callable(name=isNoSymbol, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-no-symbol.html","searchKeys":["isNoSymbol"]},{"name":" def lower(lo: TypeRepr): TypeBounds","description":"scala.quoted.Quotes.Callable(name=lower, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-module/lower.html","searchKeys":["lower"]},{"name":" def unapply(x: Block): Option[(List[Statement], Term)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-block-module/unapply.html","searchKeys":["unapply"]},{"name":" def floatFromDigits(digits: String): Float","description":"scala.util.FromDigits$.Callable(name=floatFromDigits, receiver=null, params=[])","location":"api/scala/util/-from-digits$/float-from-digits.html","searchKeys":["floatFromDigits"]},{"name":" def size[T]: Int","description":"scala.opaques$.Callable(name=size, receiver=null, params=[])","location":"api/scala/opaques/array-ops/size.html","searchKeys":["size"]},{"name":" def unapply(x: Super): Option[(Term, Option[String])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-super-module/unapply.html","searchKeys":["unapply"]},{"name":" trait TypeRefModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-ref-module.html","searchKeys":["TypeRefModule"]},{"name":" def dropRight[T](n: Int): IArray[T]","description":"scala.opaques$.Callable(name=dropRight, receiver=null, params=[])","location":"api/scala/opaques/array-ops/drop-right.html","searchKeys":["dropRight"]},{"name":" trait TermRefModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-term-ref-module.html","searchKeys":["TermRefModule"]},{"name":" def isTypeDef: Boolean","description":"scala.quoted.Quotes.Callable(name=isTypeDef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-type-def.html","searchKeys":["isTypeDef"]},{"name":" def qctx(q: Quotes): q.type","description":"scala.quoted.qctx$package$.Callable(name=qctx, receiver=null, params=[])","location":"api/scala/quoted/qctx.html","searchKeys":["qctx"]},{"name":" def rhs: Option[Term]","description":"scala.quoted.Quotes.Callable(name=rhs, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-def-def-methods/rhs.html","searchKeys":["rhs"]},{"name":" def showAnsiColored: String","description":"scala.quoted.Quotes.Callable(name=showAnsiColored, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/show-ansi-colored.html","searchKeys":["showAnsiColored"]},{"name":"Announcing Dotty 0.3.0-RC2","description":"","location":"blog/_posts/2017-09-07-third-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.3.0-RC2"]},{"name":" def unapply(x: Apply): Option[(Term, List[Term])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-apply-module/unapply.html","searchKeys":["unapply"]},{"name":" def tpe: TypeRepr","description":"scala.quoted.Quotes.Callable(name=tpe, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-tree-methods/tpe.html","searchKeys":["tpe"]},{"name":"inline def summonInline[T]: T","description":"scala.compiletime.package$.Callable(name=summonInline, receiver=null, params=[])","location":"api/scala/compiletime/summon-inline.html","searchKeys":["summonInline"]},{"name":"given TypeTest_Tree_Singleton as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Singleton, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-singleton.html","searchKeys":["TypeTest_Tree_Singleton"]},{"name":"Overview","description":"","location":"docs/reference/metaprogramming/toc.html","searchKeys":["Overview"]},{"name":" def apply(x: Float): Constant","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-float-module/apply.html","searchKeys":["apply"]},{"name":" def ScalaNumericValueClasses: List[Symbol]","description":"scala.quoted.Quotes.Callable(name=ScalaNumericValueClasses, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-scala-numeric-value-classes.html","searchKeys":["ScalaNumericValueClasses"]},{"name":"Dropped: Early Initializers","description":"","location":"docs/reference/dropped-features/early-initializers.html","searchKeys":["Dropped: Early Initializers"]},{"name":" given BlockMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-block-methods.html","searchKeys":["BlockMethods"]},{"name":" def unapply(x: TypeProjection): Option[(TypeTree, String)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-projection-module/unapply.html","searchKeys":["unapply"]},{"name":" def qualifier: Term","description":"scala.quoted.Quotes.Callable(name=qualifier, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-select-methods/qualifier.html","searchKeys":["qualifier"]},{"name":" trait SelectModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-select-module.html","searchKeys":["SelectModule"]},{"name":" object Selectable","description":"scala.reflect.Selectable$","location":"api/scala/reflect/-selectable$.html","searchKeys":["Selectable"]},{"name":" def readHeader(): UUID","description":"dotty.tools.tasty.TastyHeaderUnpickler.Callable(name=readHeader, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-header-unpickler/read-header.html","searchKeys":["readHeader"]},{"name":"@deprecated(\"explicitly create a `new Product {...}` wrapper for the array or use `Tuple.fromArray`\", \"3.0.0-M2\")  class ArrayProduct(val elems: Array[AnyRef]) extends Product","description":"scala.deriving.ArrayProduct","location":"api/scala/deriving/-array-product.html","searchKeys":["ArrayProduct"]},{"name":" def map[T, U](f: T => U)(evidence$20: ClassTag[U]): IArray[U]","description":"scala.opaques$.Callable(name=map, receiver=null, params=[])","location":"api/scala/opaques/array-ops/map.html","searchKeys":["map"]},{"name":" def emptyFloatIArray: IArray[Float]","description":"scala.IArray$package$.Callable(name=emptyFloatIArray, receiver=null, params=[])","location":"api/scala/-i-array/empty-float-i-array.html","searchKeys":["emptyFloatIArray"]},{"name":" given SignatureMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-signature-methods.html","searchKeys":["SignatureMethods"]},{"name":"given ShortUnliftable","description":"scala.quoted.Unliftable$.Callable(name=ShortUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-short-unliftable.html","searchKeys":["ShortUnliftable"]},{"name":" def showAnsiColored[T]: String","description":"scala.quoted.Quotes.Callable(name=showAnsiColored, receiver=null, params=[])","location":"api/scala/quoted/-quotes/show-ansi-colored.html","searchKeys":["showAnsiColored"]},{"name":" def cases: List[TypeCaseDef]","description":"scala.quoted.Quotes.Callable(name=cases, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-type-tree-methods/cases.html","searchKeys":["cases"]},{"name":" def unapply(x: S): Option[x.type & T]","description":"scala.reflect.TypeTest.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/reflect/-type-test/unapply.html","searchKeys":["unapply"]},{"name":" def dble[T](arr: Array[T])(evidence$1: ClassTag[T]): Array[T]","description":"dotty.tools.tasty.util.Util$.Callable(name=dble, receiver=null, params=[])","location":"api/dotty/tools.tasty/util/-util/dble.html","searchKeys":["dble"]},{"name":" def apply(result: TypeTree): ByName","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-by-name-module/apply.html","searchKeys":["apply"]},{"name":" given ConstantMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-methods.html","searchKeys":["ConstantMethods"]},{"name":" object TastyBuffer","description":"dotty.tools.tasty.TastyBuffer$","location":"api/dotty/tools.tasty/-tasty-buffer$.html","searchKeys":["TastyBuffer"]},{"name":" def transformChildren[T](e: Expr[T])(x$2: Quotes, x$3: Type[T]): Expr[T]","description":"scala.quoted.ExprMap.Callable(name=transformChildren, receiver=null, params=[])","location":"api/scala/quoted/-expr-map/transform-children.html","searchKeys":["transformChildren"]},{"name":" def fillAddr(at: Addr, target: Addr): Unit","description":"dotty.tools.tasty.TastyBuffer.Callable(name=fillAddr, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/fill-addr.html","searchKeys":["fillAddr"]},{"name":"final def applyDynamic(name: String, paramTypes: Class[]*)(args: Any*): Any","description":"scala.reflect.Selectable.Callable(name=applyDynamic, receiver=null, params=[])","location":"api/scala/reflect/-selectable/apply-dynamic.html","searchKeys":["applyDynamic"]},{"name":"final abstract class MatchCase[Pat, +Body]","description":"scala.runtime.MatchCase","location":"api/scala/runtime/-match-case.html","searchKeys":["MatchCase"]},{"name":" def natSize(nat: Int): Int","description":"dotty.tools.tasty.TastyBuffer$.Callable(name=natSize, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer$/nat-size.html","searchKeys":["natSize"]},{"name":" class SingletonProxy(val value: AnyRef) extends Product","description":"scala.deriving.Mirror$","location":"api/scala/deriving/-mirror$/-singleton-proxy.html","searchKeys":["SingletonProxy"]},{"name":"A Classification of Proposed Language Features","description":"","location":"docs/reference/features-classification.html","searchKeys":["A Classification of Proposed Language Features"]},{"name":"given TypeTest_Tree_CaseDef as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_CaseDef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-case-def.html","searchKeys":["TypeTest_Tree_CaseDef"]},{"name":"given SomeLiftable","description":"scala.quoted.Liftable$.Callable(name=SomeLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-some-liftable.html","searchKeys":["SomeLiftable"]},{"name":"Static docucmentation","description":"","location":"docs/usage/scala3doc/staticSite.html","searchKeys":["Static docucmentation"]},{"name":"We got liftoff!","description":"","location":"blog/_posts/2015-10-23-dotty-compiler-bootstraps.html","searchKeys":["We got liftoff!"]},{"name":" def copy(original: Tree)(stats: List[Statement], expr: Term): Block","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-block-module/copy.html","searchKeys":["copy"]},{"name":" def writeNat(x: Int): Unit","description":"dotty.tools.tasty.TastyBuffer.Callable(name=writeNat, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/write-nat.html","searchKeys":["writeNat"]},{"name":" given BindMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-bind-methods.html","searchKeys":["BindMethods"]},{"name":" trait SourceModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-source-module.html","searchKeys":["SourceModule"]},{"name":" def unapply(x: Literal): Option[Constant]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-literal-module/unapply.html","searchKeys":["unapply"]},{"name":" given TypeBindMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-bind-methods.html","searchKeys":["TypeBindMethods"]},{"name":"given TypeTest_TypeRepr_Refinement as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_Refinement, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-refinement.html","searchKeys":["TypeTest_TypeRepr_Refinement"]},{"name":" def apply(qualifier: Term, name: String, levels: Int): SelectOuter","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-select-outer-module/apply.html","searchKeys":["apply"]},{"name":"given Tuple15Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple15Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple15-liftable.html","searchKeys":["Tuple15Liftable"]},{"name":"final case class NameRef(index: Int) extends AnyVal","description":"dotty.tools.tasty.TastyBuffer$","location":"api/dotty/tools.tasty/-tasty-buffer$/-name-ref.html","searchKeys":["NameRef"]},{"name":"Relationship with Scala 2 Implicits","description":"","location":"docs/reference/contextual/relationship-implicits.html","searchKeys":["Relationship with Scala 2 Implicits"]},{"name":" trait ConstantShortModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-short-module.html","searchKeys":["ConstantShortModule"]},{"name":" given given_FromString_Int as FromString[Int]","description":"scala.util.CommandLineParser$","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-int.html","searchKeys":["given_FromString_Int"]},{"name":" def fromString(s: String): Int","description":"scala.util.CommandLineParser$.Callable(name=fromString, receiver=null, params=[])","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-int/from-string.html","searchKeys":["fromString"]},{"name":" def isBind: Boolean","description":"scala.quoted.Quotes.Callable(name=isBind, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-bind.html","searchKeys":["isBind"]},{"name":" def unapply(constant: Constant): Option[Boolean]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-boolean-module/unapply.html","searchKeys":["unapply"]},{"name":" trait ClosureModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-closure-module.html","searchKeys":["ClosureModule"]},{"name":" trait Floating[T] extends Decimal[T]","description":"scala.util.FromDigits$","location":"api/scala/util/-from-digits$/-floating.html","searchKeys":["Floating"]},{"name":" def isParamTag(tag: Int): Boolean","description":"dotty.tools.tasty.TastyFormat$.Callable(name=isParamTag, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-format/is-param-tag.html","searchKeys":["isParamTag"]},{"name":" trait SourceFileModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-source-file-module.html","searchKeys":["SourceFileModule"]},{"name":" trait AlternativesModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-alternatives-module.html","searchKeys":["AlternativesModule"]},{"name":"given TypeTest_Tree_Ref as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Ref, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-ref.html","searchKeys":["TypeTest_Tree_Ref"]},{"name":" def numRefs(tag: Int): Int","description":"dotty.tools.tasty.TastyFormat$.Callable(name=numRefs, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-format/num-refs.html","searchKeys":["numRefs"]},{"name":" given TypeIdentMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-ident-methods.html","searchKeys":["TypeIdentMethods"]},{"name":"Named Type Arguments - More Details","description":"","location":"docs/reference/other-new-features/named-typeargs-spec.html","searchKeys":["Named Type Arguments - More Details"]},{"name":"given ArrayOfIntLiftable","description":"scala.quoted.Liftable$.Callable(name=ArrayOfIntLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-array-of-int-liftable.html","searchKeys":["ArrayOfIntLiftable"]},{"name":" def currentAddr: Addr","description":"dotty.tools.tasty.TastyReader.Callable(name=currentAddr, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/current-addr.html","searchKeys":["currentAddr"]},{"name":"@compileTimeOnly(\"Illegal reference to `scala.quoted.runtime.Patterns.fromAbove`\")  class fromAbove extends Annotation","description":"scala.quoted.runtime.Patterns$","location":"api/scala/quoted/runtime/-patterns/from-above.html","searchKeys":["fromAbove"]},{"name":" def fromDigits(digits: String): BigDecimal","description":"scala.util.FromDigits$.Callable(name=fromDigits, receiver=null, params=[])","location":"api/scala/util/-from-digits$/-big-decimal-from-digits/from-digits.html","searchKeys":["fromDigits"]},{"name":" object Const","description":"scala.quoted.Const$","location":"api/scala/quoted/-const.html","searchKeys":["Const"]},{"name":" def paramss: List[List[ValDef]]","description":"scala.quoted.Quotes.Callable(name=paramss, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-def-def-methods/paramss.html","searchKeys":["paramss"]},{"name":" def FloatClass: Symbol","description":"scala.quoted.Quotes.Callable(name=FloatClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-float-class.html","searchKeys":["FloatClass"]},{"name":" trait DefnModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-defn-module.html","searchKeys":["DefnModule"]},{"name":"Dropped: Auto-Application","description":"","location":"docs/reference/dropped-features/auto-apply.html","searchKeys":["Dropped: Auto-Application"]},{"name":" def unpickleExpr[T](pickled: String | List[String], typeHole: (Int, Seq[Any]) => Type[ <: AnyKind], termHole: (Int, Seq[Any], Quotes) => Expr[]): Expr[T]","description":"scala.quoted.runtime.QuoteUnpickler.Callable(name=unpickleExpr, receiver=null, params=[])","location":"api/scala/quoted/runtime/-quote-unpickler/unpickle-expr.html","searchKeys":["unpickleExpr"]},{"name":" def args: List[Tree]","description":"scala.quoted.Quotes.Callable(name=args, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-applied-methods/args.html","searchKeys":["args"]},{"name":" trait SignatureModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-signature-module.html","searchKeys":["SignatureModule"]},{"name":" object NonLocalReturns","description":"scala.util.control.NonLocalReturns$","location":"api/scala/util/control/-non-local-returns.html","searchKeys":["NonLocalReturns"]},{"name":"given DoubleUnliftable","description":"scala.quoted.Unliftable$.Callable(name=DoubleUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-double-unliftable.html","searchKeys":["DoubleUnliftable"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-bind-methods/name.html","searchKeys":["name"]},{"name":"Backend Internals","description":"","location":"docs/internals/backend.html","searchKeys":["Backend Internals"]},{"name":" def apply(call: Option[Tree], bindings: List[Definition], expansion: Term): Inlined","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-inlined-module/apply.html","searchKeys":["apply"]},{"name":" def copy(original: Tree)(selector: Term, cases: List[CaseDef]): Match","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-module/copy.html","searchKeys":["copy"]},{"name":" def dealias: TypeRepr","description":"scala.quoted.Quotes.Callable(name=dealias, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/dealias.html","searchKeys":["dealias"]},{"name":" def derived: List[TypeTree]","description":"scala.quoted.Quotes.Callable(name=derived, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-class-def-methods/derived.html","searchKeys":["derived"]},{"name":" def wait4Notification(t: Object, offset: Long, cur: Long, ord: Int): Unit","description":"dotty.runtime.LazyVals$.Callable(name=wait4Notification, receiver=null, params=[])","location":"api/dotty/runtime/-lazy-vals/wait4-notification.html","searchKeys":["wait4Notification"]},{"name":"abstract class Type[T <: AnyKind]","description":"scala.quoted.Type","location":"api/scala/quoted/-type.html","searchKeys":["Type"]},{"name":" def NothingClass: Symbol","description":"scala.quoted.Quotes.Callable(name=NothingClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-nothing-class.html","searchKeys":["NothingClass"]},{"name":" def underlying: TypeRepr","description":"scala.quoted.Quotes.Callable(name=underlying, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-by-name-type-methods/underlying.html","searchKeys":["underlying"]},{"name":"Trait Parameters","description":"","location":"docs/reference/other-new-features/trait-parameters.html","searchKeys":["Trait Parameters"]},{"name":"Worksheet mode with Dotty IDE","description":"","location":"docs/usage/worksheet-mode.html","searchKeys":["Worksheet mode with Dotty IDE"]},{"name":" def unapply(x: Repeated): Option[(List[Term], TypeTree)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-repeated-module/unapply.html","searchKeys":["unapply"]},{"name":"given TypeTest_TypeRepr_OrType as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_OrType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-or-type.html","searchKeys":["TypeTest_TypeRepr_OrType"]},{"name":" def classSymbol(fullName: String): Symbol","description":"scala.quoted.Quotes.Callable(name=classSymbol, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-module/class-symbol.html","searchKeys":["classSymbol"]},{"name":" def parents: List[Tree]","description":"scala.quoted.Quotes.Callable(name=parents, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-class-def-methods/parents.html","searchKeys":["parents"]},{"name":" trait NewModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-new-module.html","searchKeys":["NewModule"]},{"name":" def apply(xs: IArray[Object]): Object","description":"scala.runtime.FunctionXXL.Callable(name=apply, receiver=null, params=[])","location":"api/scala/runtime/-function-x-x-l/apply.html","searchKeys":["apply"]},{"name":"Announcing Dotty 0.21.0-RC1 - explicit nulls, new syntax for `match` and conditional givens, and more","description":"","location":"blog/_posts/2019-12-20-21th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.21.0-RC1 - explicit nulls, new syntax for `match` and conditional givens, and more"]},{"name":" def emptyObjectIArray: IArray[Object]","description":"scala.IArray$package$.Callable(name=emptyObjectIArray, receiver=null, params=[])","location":"api/scala/-i-array/empty-object-i-array.html","searchKeys":["emptyObjectIArray"]},{"name":" def copy(original: Tree)(arg: TypeTree, annotation: Term): Annotated","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-annotated-module/copy.html","searchKeys":["copy"]},{"name":" given TryMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-try-methods.html","searchKeys":["TryMethods"]},{"name":" def unapply(constant: Constant): Boolean","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-unit-module/unapply.html","searchKeys":["unapply"]},{"name":" trait ConstantBooleanModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-boolean-module.html","searchKeys":["ConstantBooleanModule"]},{"name":" given TypeBoundsTreeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-tree-methods.html","searchKeys":["TypeBoundsTreeMethods"]},{"name":" def unapply(x: TypeBlock): Option[(List[TypeDef], TypeTree)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-block-module/unapply.html","searchKeys":["unapply"]},{"name":" def +(delta: Int): Addr","description":"dotty.tools.tasty.TastyBuffer$.Callable(name=+, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer$/-addr/+.html","searchKeys":["+"]},{"name":" trait ThisTypeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-this-type-module.html","searchKeys":["ThisTypeModule"]},{"name":" def tailXXL: TupleXXL","description":"scala.runtime.TupleXXL.Callable(name=tailXXL, receiver=null, params=[])","location":"api/scala/runtime/-tuple-x-x-l/tail-x-x-l.html","searchKeys":["tailXXL"]},{"name":"final class targetName(name: String) extends StaticAnnotation","description":"scala.annotation.targetName","location":"api/scala/annotation/target-name.html","searchKeys":["targetName"]},{"name":" def result: TypeTree","description":"scala.quoted.Quotes.Callable(name=result, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-by-name-methods/result.html","searchKeys":["result"]},{"name":"given Tuple18Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple18Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple18-liftable.html","searchKeys":["Tuple18Liftable"]},{"name":"Dropped: Class Shadowing - More Details","description":"","location":"docs/reference/dropped-features/class-shadowing-spec.html","searchKeys":["Dropped: Class Shadowing - More Details"]},{"name":" object Tuple","description":"scala.runtime.Tuple$","location":"api/scala/runtime/-tuple.html","searchKeys":["Tuple"]},{"name":" trait SymbolModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-symbol-module.html","searchKeys":["SymbolModule"]},{"name":" def fromIArray[T](xs: IArray[T]): Tuple","description":"scala.Tuple$.Callable(name=fromIArray, receiver=null, params=[])","location":"api/scala/-tuple$/from-i-array.html","searchKeys":["fromIArray"]},{"name":" def tree: Tree","description":"scala.quoted.Quotes.Callable(name=tree, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/tree.html","searchKeys":["tree"]},{"name":" trait TreeTraverser extends TreeAccumulator[Unit]","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-tree-traverser.html","searchKeys":["TreeTraverser"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-refinement-methods/name.html","searchKeys":["name"]},{"name":" def IntClass: Symbol","description":"scala.quoted.Quotes.Callable(name=IntClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-int-class.html","searchKeys":["IntClass"]},{"name":" def unapply(x: Singleton): Option[Term]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-singleton-module/unapply.html","searchKeys":["unapply"]},{"name":" def methods: List[Symbol]","description":"scala.quoted.Quotes.Callable(name=methods, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/methods.html","searchKeys":["methods"]},{"name":"given NoneUnliftable","description":"scala.quoted.Unliftable$.Callable(name=NoneUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-none-unliftable.html","searchKeys":["NoneUnliftable"]},{"name":" def apply(cls: Symbol): This","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-this-module/apply.html","searchKeys":["apply"]},{"name":" def tparams: List[TypeDef]","description":"scala.quoted.Quotes.Callable(name=tparams, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-lambda-type-tree-methods/tparams.html","searchKeys":["tparams"]},{"name":" def end: Int","description":"scala.quoted.Quotes.Callable(name=end, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-position-methods/end.html","searchKeys":["end"]},{"name":" def result: T","description":"scala.util.control.NonLocalReturns$.Callable(name=result, receiver=null, params=[])","location":"api/scala/util/control/-non-local-returns/-return-throwable/result.html","searchKeys":["result"]},{"name":" trait DocumentationModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-documentation-module.html","searchKeys":["DocumentationModule"]},{"name":" def newGenericArray[T](length: Int)(tag: ClassTag[T]): Array[T]","description":"dotty.runtime.Arrays$.Callable(name=newGenericArray, receiver=null, params=[])","location":"api/dotty/runtime/-arrays/new-generic-array.html","searchKeys":["newGenericArray"]},{"name":" def takeRight[T](n: Int): IArray[T]","description":"scala.opaques$.Callable(name=takeRight, receiver=null, params=[])","location":"api/scala/opaques/array-ops/take-right.html","searchKeys":["takeRight"]},{"name":"Basic Operations with Mill","description":"","location":"docs/contributing/tools/mill.html","searchKeys":["Basic Operations with Mill"]},{"name":" trait Decimal[T] extends FromDigits[T]","description":"scala.util.FromDigits$","location":"api/scala/util/-from-digits$/-decimal.html","searchKeys":["Decimal"]},{"name":"Optional Braces","description":"","location":"docs/reference/other-new-features/indentation.html","searchKeys":["Optional Braces"]},{"name":" def foldOverTree(x: X, tree: Tree)(owner: Symbol): X","description":"scala.quoted.Quotes.Callable(name=foldOverTree, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-accumulator/fold-over-tree.html","searchKeys":["foldOverTree"]},{"name":" def copy(original: Tree)(name: String, pattern: Tree): Bind","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-bind-module/copy.html","searchKeys":["copy"]},{"name":" def apply(paramNames: List[String])(paramInfosExp: MethodType => List[TypeRepr], resultTypeExp: MethodType => TypeRepr): MethodType","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-method-type-module/apply.html","searchKeys":["apply"]},{"name":"given TypeTest_ImplicitSearchResult_AmbiguousImplicits as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_ImplicitSearchResult_AmbiguousImplicits, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-implicit-search-result_-ambiguous-implicits.html","searchKeys":["TypeTest_ImplicitSearchResult_AmbiguousImplicits"]},{"name":" def unapply(x: AnnotatedType): Option[(TypeRepr, Term)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-annotated-type-module/unapply.html","searchKeys":["unapply"]},{"name":"override def productPrefix: String","description":"scala.runtime.TupleXXL.Callable(name=productPrefix, receiver=null, params=[])","location":"api/scala/runtime/-tuple-x-x-l/product-prefix.html","searchKeys":["productPrefix"]},{"name":"Using Dotty with cbt","description":"","location":"docs/usage/cbt-projects.html","searchKeys":["Using Dotty with cbt"]},{"name":"given TypeTest_TypeRepr_AndType as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_AndType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-and-type.html","searchKeys":["TypeTest_TypeRepr_AndType"]},{"name":" object string","description":"scala.compiletime.ops.package$","location":"api/scala/compiletime/ops/string.html","searchKeys":["string"]},{"name":"case object Typer extends ErrorKind","description":"scala.compiletime.testing.ErrorKind$","location":"api/scala/compiletime/testing/-error-kind$/-typer.html","searchKeys":["Typer"]},{"name":" def Predef_classOf: Symbol","description":"scala.quoted.Quotes.Callable(name=Predef_classOf, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-predef_class-of.html","searchKeys":["Predef_classOf"]},{"name":" def apply(constant: Constant): Literal","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-literal-module/apply.html","searchKeys":["apply"]},{"name":"given Tuple2Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple2Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple2-unliftable.html","searchKeys":["Tuple2Unliftable"]},{"name":" def unapply(x: TypeBounds): Option[(TypeRepr, TypeRepr)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-module/unapply.html","searchKeys":["unapply"]},{"name":" object Names","description":"dotty.runtime.LazyVals$","location":"api/dotty/runtime/-lazy-vals/-names.html","searchKeys":["Names"]},{"name":" def ModuleClass: Flags","description":"scala.quoted.Quotes.Callable(name=ModuleClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-module-class.html","searchKeys":["ModuleClass"]},{"name":"Announcing Dotty 0.5.0-RC1","description":"","location":"blog/_posts/2017-12-01-fifth-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.5.0-RC1"]},{"name":"given TypeTest_Tree_PackageClause as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_PackageClause, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-package-clause.html","searchKeys":["TypeTest_Tree_PackageClause"]},{"name":"inline def zip[This >: Tuple <: Tuple, T2 <: Tuple](t2: T2): Zip[This, T2]","description":"scala.Tuple.Callable(name=zip, receiver=null, params=[])","location":"api/scala/-tuple/zip.html","searchKeys":["zip"]},{"name":"By-Name Context Parameters","description":"","location":"docs/reference/contextual/by-name-context-parameters.html","searchKeys":["By-Name Context Parameters"]},{"name":" def concat[This <: Tuple, That <: Tuple](self: This, that: That): Tuple","description":"scala.runtime.Tuple$.Callable(name=concat, receiver=null, params=[])","location":"api/scala/runtime/-tuple/concat.html","searchKeys":["concat"]},{"name":" given SummonFromMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-summon-from-methods.html","searchKeys":["SummonFromMethods"]},{"name":" def unique(qualifier: Term, name: String): Select","description":"scala.quoted.Quotes.Callable(name=unique, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-select-module/unique.html","searchKeys":["unique"]},{"name":"Getting Started","description":"","location":"docs/contributing/getting-started.html","searchKeys":["Getting Started"]},{"name":"Opaque Type Aliases: More Details","description":"","location":"docs/reference/other-new-features/opaques-details.html","searchKeys":["Opaque Type Aliases: More Details"]},{"name":" def isClassConstructor: Boolean","description":"scala.quoted.Quotes.Callable(name=isClassConstructor, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-class-constructor.html","searchKeys":["isClassConstructor"]},{"name":" def copy(original: Tree)(lhs: Term, rhs: Term): Assign","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-assign-module/copy.html","searchKeys":["copy"]},{"name":" def newArray[Arr](componentType: Class[], returnType: Class[Arr], dimensions: Array[Int]): Arr","description":"dotty.runtime.Arrays$.Callable(name=newArray, receiver=null, params=[])","location":"api/dotty/runtime/-arrays/new-array.html","searchKeys":["newArray"]},{"name":"inline def head[This >: NonEmptyTuple <: NonEmptyTuple]: Head[This]","description":"scala.NonEmptyTuple.Callable(name=head, receiver=null, params=[])","location":"api/scala/-non-empty-tuple/head.html","searchKeys":["head"]},{"name":"final class infix extends StaticAnnotation","description":"scala.annotation.infix","location":"api/scala/annotation/infix.html","searchKeys":["infix"]},{"name":" def empty: TypeBounds","description":"scala.quoted.Quotes.Callable(name=empty, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-module/empty.html","searchKeys":["empty"]},{"name":" trait TypeSelectModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-select-module.html","searchKeys":["TypeSelectModule"]},{"name":" def AnyClass: Symbol","description":"scala.quoted.Quotes.Callable(name=AnyClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-any-class.html","searchKeys":["AnyClass"]},{"name":"given TypeTest_TypeRepr_NoPrefix as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_NoPrefix, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-no-prefix.html","searchKeys":["TypeTest_TypeRepr_NoPrefix"]},{"name":" def ByteClass: Symbol","description":"scala.quoted.Quotes.Callable(name=ByteClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-byte-class.html","searchKeys":["ByteClass"]},{"name":" def unapply(x: RecursiveThis): Option[RecursiveType]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-recursive-this-module/unapply.html","searchKeys":["unapply"]},{"name":" def paramBounds: List[TypeBounds]","description":"scala.quoted.Quotes.Callable(name=paramBounds, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-poly-type-methods/param-bounds.html","searchKeys":["paramBounds"]},{"name":" def apply(low: TypeRepr, hi: TypeRepr): TypeBounds","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-module/apply.html","searchKeys":["apply"]},{"name":" def productArity: Int","description":"scala.runtime.TupleXXL.Callable(name=productArity, receiver=null, params=[])","location":"api/scala/runtime/-tuple-x-x-l/product-arity.html","searchKeys":["productArity"]},{"name":" def apply(pattern: TypeTree, rhs: TypeTree): TypeCaseDef","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-case-def-module/apply.html","searchKeys":["apply"]},{"name":" def paramSigs: List[String | Int]","description":"scala.quoted.Quotes.Callable(name=paramSigs, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-signature-methods/param-sigs.html","searchKeys":["paramSigs"]},{"name":"@compileTimeOnly(\"Illegal reference to `scala.quoted.runtime.Patterns.patternType`\")  class patternType extends Annotation","description":"scala.quoted.runtime.Patterns$","location":"api/scala/quoted/runtime/-patterns/pattern-type.html","searchKeys":["patternType"]},{"name":" def isFunctionType: Boolean","description":"scala.quoted.Quotes.Callable(name=isFunctionType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/is-function-type.html","searchKeys":["isFunctionType"]},{"name":"Built-in blog","description":"","location":"docs/usage/scala3doc/blog.html","searchKeys":["Built-in blog"]},{"name":"Implicit By-Name Parameters","description":"","location":"docs/reference/contextual/implicit-by-name-parameters.html","searchKeys":["Implicit By-Name Parameters"]},{"name":" given RecursiveTypeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-recursive-type-methods.html","searchKeys":["RecursiveTypeMethods"]},{"name":" trait AnnotatedTypeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-annotated-type-module.html","searchKeys":["AnnotatedTypeModule"]},{"name":"given Tuple8Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple8Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple8-liftable.html","searchKeys":["Tuple8Liftable"]},{"name":" def OptionClass: Symbol","description":"scala.quoted.Quotes.Callable(name=OptionClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-option-class.html","searchKeys":["OptionClass"]},{"name":" trait Reflection","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection.html","searchKeys":["Reflection"]},{"name":" given RefinedMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-refined-methods.html","searchKeys":["RefinedMethods"]},{"name":"given TypeTest_ImportSelector_SimpleSelector as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_ImportSelector_SimpleSelector, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-import-selector_-simple-selector.html","searchKeys":["TypeTest_ImportSelector_SimpleSelector"]},{"name":"Intersection Types","description":"","location":"docs/reference/new-types/intersection-types.html","searchKeys":["Intersection Types"]},{"name":"Scala 3.0.0-M1 is here","description":"","location":"blog/_posts/2020-11-09-scala3-m1.html","searchKeys":["Scala 3.0.0-M1 is here"]},{"name":"Announcing Dotty 0.16.0-RC3 – the Scala Days 2019 Release","description":"","location":"blog/_posts/2019-06-11-16th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.16.0-RC3 – the Scala Days 2019 Release"]},{"name":"Intersection Types - More Details","description":"","location":"docs/reference/new-types/intersection-types-spec.html","searchKeys":["Intersection Types - More Details"]},{"name":"New Types","description":"","location":"docs/New Types/index.html","searchKeys":["New Types"]},{"name":"Announcing Dotty 0.18.1-RC1 – switch to the 2.13 standard library, indentation-based syntax and other experiments","description":"","location":"blog/_posts/2019-08-30-18th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.18.1-RC1 – switch to the 2.13 standard library, indentation-based syntax and other experiments"]},{"name":" def until[T](end: Addr)(op: => T): List[T]","description":"dotty.tools.tasty.TastyReader.Callable(name=until, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/until.html","searchKeys":["until"]},{"name":"given TupleConsLiftable","description":"scala.quoted.Liftable$.Callable(name=TupleConsLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple-cons-liftable.html","searchKeys":["TupleConsLiftable"]},{"name":"given Tuple10Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple10Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple10-unliftable.html","searchKeys":["Tuple10Unliftable"]},{"name":" def toExpr(x: T): Quotes => Expr[T]","description":"scala.quoted.Liftable$.Callable(name=toExpr, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-string-liftable/to-expr.html","searchKeys":["toExpr"]},{"name":" def copy(original: Tree)(bound: Option[TypeTree], selector: TypeTree, cases: List[TypeCaseDef]): MatchTypeTree","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-type-tree-module/copy.html","searchKeys":["copy"]},{"name":" def toExpr(x: T): Quotes => Expr[T]","description":"scala.quoted.Liftable$.Callable(name=toExpr, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-double-liftable/to-expr.html","searchKeys":["toExpr"]},{"name":" given TreeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-tree-methods.html","searchKeys":["TreeMethods"]},{"name":" def toExpr(x: T): Quotes => Expr[T]","description":"scala.quoted.Liftable$.Callable(name=toExpr, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-byte-liftable/to-expr.html","searchKeys":["toExpr"]},{"name":" def tpe: TypeRepr","description":"scala.quoted.Quotes.Callable(name=tpe, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-methods/tpe.html","searchKeys":["tpe"]},{"name":" def pattern: TypeTree","description":"scala.quoted.Quotes.Callable(name=pattern, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-case-def-methods/pattern.html","searchKeys":["pattern"]},{"name":" given TypeBlockMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-block-methods.html","searchKeys":["TypeBlockMethods"]},{"name":"Option-less pattern matching","description":"","location":"docs/reference/changed-features/pattern-matching.html","searchKeys":["Option-less pattern matching"]},{"name":" def copy(original: Tree)(cond: Term, thenp: Term, elsep: Term): If","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-if-module/copy.html","searchKeys":["copy"]},{"name":" def toExpr(x: T): Quotes => Expr[T]","description":"scala.quoted.Liftable$.Callable(name=toExpr, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-long-liftable/to-expr.html","searchKeys":["toExpr"]},{"name":" def assemble(): Unit","description":"dotty.tools.tasty.TastyBuffer.Callable(name=assemble, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/assemble.html","searchKeys":["assemble"]},{"name":" class TastyBuffer(initialSize: Int)","description":"dotty.tools.tasty.TastyBuffer","location":"api/dotty/tools.tasty/-tasty-buffer.html","searchKeys":["TastyBuffer"]},{"name":" def requiredModule(path: String): Symbol","description":"scala.quoted.Quotes.Callable(name=requiredModule, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-module/required-module.html","searchKeys":["requiredModule"]},{"name":" def asExprOf[X](x$1: Type[X]): Expr[X]","description":"scala.quoted.Quotes.Callable(name=asExprOf, receiver=null, params=[])","location":"api/scala/quoted/-quotes/as-expr-of.html","searchKeys":["asExprOf"]},{"name":"given TypeTest_Tree_Applied as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Applied, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-applied.html","searchKeys":["TypeTest_Tree_Applied"]},{"name":"inline def summon[T](x: T): x.type","description":"dotty.DottyPredef$.Callable(name=summon, receiver=null, params=[])","location":"api/dotty/-dotty-predef/summon.html","searchKeys":["summon"]},{"name":" def low: TypeRepr","description":"scala.quoted.Quotes.Callable(name=low, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-methods/low.html","searchKeys":["low"]},{"name":"Scaling DOT to Scala - Soundness","description":"","location":"blog/_posts/2016-02-17-scaling-dot-soundness.html","searchKeys":["Scaling DOT to Scala - Soundness"]},{"name":" def showExtractors: String","description":"scala.quoted.Quotes.Callable(name=showExtractors, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-methods/show-extractors.html","searchKeys":["showExtractors"]},{"name":"given TypeTest_Tree_Literal as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Literal, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-literal.html","searchKeys":["TypeTest_Tree_Literal"]},{"name":"Changes in Implicit Resolution","description":"","location":"docs/reference/changed-features/implicit-resolution.html","searchKeys":["Changes in Implicit Resolution"]},{"name":" def sortBy[T, U](f: T => U)(evidence$24: ClassTag[U], x$2: Ordering[U]): IArray[T]","description":"scala.opaques$.Callable(name=sortBy, receiver=null, params=[])","location":"api/scala/opaques/array-ops/sort-by.html","searchKeys":["sortBy"]},{"name":" trait TryModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-try-module.html","searchKeys":["TryModule"]},{"name":" def apply(thistpe: TypeRepr, supertpe: TypeRepr): SuperType","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-super-type-module/apply.html","searchKeys":["apply"]},{"name":"given TypeTest_TypeRepr_RecursiveThis as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_RecursiveThis, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-recursive-this.html","searchKeys":["TypeTest_TypeRepr_RecursiveThis"]},{"name":"0.1.2 release notes","description":"","location":"docs/release-notes/0.1.2.html","searchKeys":["0.1.2 release notes"]},{"name":" def companionModule: Symbol","description":"scala.quoted.Quotes.Callable(name=companionModule, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/companion-module.html","searchKeys":["companionModule"]},{"name":" def fromProductTyped[P <: Product](p: P)(m: ProductOf[P]): <none>","description":"scala.Tuple$.Callable(name=fromProductTyped, receiver=null, params=[])","location":"api/scala/-tuple$/from-product-typed.html","searchKeys":["fromProductTyped"]},{"name":" trait ReturnModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-return-module.html","searchKeys":["ReturnModule"]},{"name":" def transformTerms(trees: List[Term])(owner: Symbol): List[Term]","description":"scala.quoted.Quotes.Callable(name=transformTerms, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-map/transform-terms.html","searchKeys":["transformTerms"]},{"name":" def NoneModule: Symbol","description":"scala.quoted.Quotes.Callable(name=NoneModule, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-none-module.html","searchKeys":["NoneModule"]},{"name":"given TypeTest_TypeRepr_TypeRef as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_TypeRef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-type-ref.html","searchKeys":["TypeTest_TypeRepr_TypeRef"]},{"name":"given TypeTest_Tree_Super as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Super, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-super.html","searchKeys":["TypeTest_Tree_Super"]},{"name":" class MalformedNumber(msg: String) extends FromDigitsException","description":"scala.util.FromDigits$","location":"api/scala/util/-from-digits$/-malformed-number.html","searchKeys":["MalformedNumber"]},{"name":" def pos: Position","description":"scala.quoted.Quotes.Callable(name=pos, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-methods/pos.html","searchKeys":["pos"]},{"name":" object 3.0-migration","description":"scalaShadowing.language$","location":"api/scalaShadowing/language/3.0-migration.html","searchKeys":["3.0-migration"]},{"name":" def parseRemainingArguments[T](args: Array[String], n: Int)(fs: FromString[T]): List[T]","description":"scala.util.CommandLineParser$.Callable(name=parseRemainingArguments, receiver=null, params=[])","location":"api/scala/util/-command-line-parser/parse-remaining-arguments.html","searchKeys":["parseRemainingArguments"]},{"name":" def readNameRef(): NameRef","description":"dotty.tools.tasty.TastyReader.Callable(name=readNameRef, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/read-name-ref.html","searchKeys":["readNameRef"]},{"name":"Rules for Operators","description":"","location":"docs/reference/changed-features/operators.html","searchKeys":["Rules for Operators"]},{"name":" def isDefDef: Boolean","description":"scala.quoted.Quotes.Callable(name=isDefDef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-def-def.html","searchKeys":["isDefDef"]},{"name":" trait ConstantDoubleModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-double-module.html","searchKeys":["ConstantDoubleModule"]},{"name":" given TypeApplyMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-apply-methods.html","searchKeys":["TypeApplyMethods"]},{"name":" given StringLiftable[T <: String] as Liftable[T]","description":"scala.quoted.Liftable$","location":"api/scala/quoted/-liftable$/-string-liftable.html","searchKeys":["StringLiftable"]},{"name":" def writeInt(x: Int): Unit","description":"dotty.tools.tasty.TastyBuffer.Callable(name=writeInt, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/write-int.html","searchKeys":["writeInt"]},{"name":"Announcing Dotty 0.26.0-RC1 - unified extension methods and more","description":"","location":"blog/_posts/2020-07-27-26th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.26.0-RC1 - unified extension methods and more"]},{"name":"given Tuple6Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple6Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple6-liftable.html","searchKeys":["Tuple6Liftable"]},{"name":"given eqlSeq","description":"scala.Eql$.Callable(name=eqlSeq, receiver=null, params=[])","location":"api/scala/-eql$/eql-seq.html","searchKeys":["eqlSeq"]},{"name":" given NamedArgMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-named-arg-methods.html","searchKeys":["NamedArgMethods"]},{"name":" def size(self: Tuple): Int","description":"scala.runtime.Tuple$.Callable(name=size, receiver=null, params=[])","location":"api/scala/runtime/-tuple/size.html","searchKeys":["size"]},{"name":" def getNat(at: Addr): Int","description":"dotty.tools.tasty.TastyBuffer.Callable(name=getNat, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/get-nat.html","searchKeys":["getNat"]},{"name":" given UnapplyMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-unapply-methods.html","searchKeys":["UnapplyMethods"]},{"name":" def tref: TypeRepr","description":"scala.quoted.Quotes.Callable(name=tref, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-this-type-methods/tref.html","searchKeys":["tref"]},{"name":"override def canEqual(that: Any): Boolean","description":"scala.runtime.TupleXXL.Callable(name=canEqual, receiver=null, params=[])","location":"api/scala/runtime/-tuple-x-x-l/can-equal.html","searchKeys":["canEqual"]},{"name":" object Consts","description":"scala.quoted.Consts$","location":"api/scala/quoted/-consts.html","searchKeys":["Consts"]},{"name":" def copy(original: Tree)(name: String, typeParams: List[TypeDef], paramss: List[List[ValDef]], tpt: TypeTree, rhs: Option[Term]): DefDef","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-def-def-module/copy.html","searchKeys":["copy"]},{"name":"Escapes in interpolations","description":"","location":"docs/reference/changed-features/interpolation-escapes.html","searchKeys":["Escapes in interpolations"]},{"name":" trait TypeLambdaModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-lambda-module.html","searchKeys":["TypeLambdaModule"]},{"name":" def readLongNat(): Long","description":"dotty.tools.tasty.TastyReader.Callable(name=readLongNat, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/read-long-nat.html","searchKeys":["readLongNat"]},{"name":" def refinements: List[Definition]","description":"scala.quoted.Quotes.Callable(name=refinements, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-refined-methods/refinements.html","searchKeys":["refinements"]},{"name":" def upper(hi: TypeRepr): TypeBounds","description":"scala.quoted.Quotes.Callable(name=upper, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-module/upper.html","searchKeys":["upper"]},{"name":"inline def apply[This >: NonEmptyTuple <: NonEmptyTuple](n: Int): Elem[This, n.type]","description":"scala.NonEmptyTuple.Callable(name=apply, receiver=null, params=[])","location":"api/scala/-non-empty-tuple/apply.html","searchKeys":["apply"]},{"name":" def cases: List[CaseDef]","description":"scala.quoted.Quotes.Callable(name=cases, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-summon-from-methods/cases.html","searchKeys":["cases"]},{"name":" trait InferredModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-inferred-module.html","searchKeys":["InferredModule"]},{"name":" def ArrayClass: Symbol","description":"scala.quoted.Quotes.Callable(name=ArrayClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-array-class.html","searchKeys":["ArrayClass"]},{"name":" def call: Option[Tree]","description":"scala.quoted.Quotes.Callable(name=call, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-inlined-methods/call.html","searchKeys":["call"]},{"name":"given TypeTest_TypeRepr_MethodType as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_MethodType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-method-type.html","searchKeys":["TypeTest_TypeRepr_MethodType"]},{"name":"Given Instances","description":"","location":"docs/reference/contextual/givens.html","searchKeys":["Given Instances"]},{"name":" def copy(original: Tree)(qualifier: Term, name: String): Select","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-select-module/copy.html","searchKeys":["copy"]},{"name":"given Tuple22Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple22Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple22-liftable.html","searchKeys":["Tuple22Liftable"]},{"name":" def unapply(tree: Import): Option[(Term, List[ImportSelector])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-import-module/unapply.html","searchKeys":["unapply"]},{"name":" def rhs: TypeTree","description":"scala.quoted.Quotes.Callable(name=rhs, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-case-def-methods/rhs.html","searchKeys":["rhs"]},{"name":" def Package: Flags","description":"scala.quoted.Quotes.Callable(name=Package, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-package.html","searchKeys":["Package"]},{"name":" def show: String","description":"scala.quoted.Quotes.Callable(name=show, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-methods/show.html","searchKeys":["show"]},{"name":" def fromString(s: String): Boolean","description":"scala.util.CommandLineParser$.Callable(name=fromString, receiver=null, params=[])","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-boolean/from-string.html","searchKeys":["fromString"]},{"name":" def emptyLongIArray: IArray[Long]","description":"scala.IArray$package$.Callable(name=emptyLongIArray, receiver=null, params=[])","location":"api/scala/-i-array/empty-long-i-array.html","searchKeys":["emptyLongIArray"]},{"name":" def isAnonymousFunction: Boolean","description":"scala.quoted.Quotes.Callable(name=isAnonymousFunction, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-anonymous-function.html","searchKeys":["isAnonymousFunction"]},{"name":" trait QuoteUnpickler","description":"scala.quoted.runtime.QuoteUnpickler","location":"api/scala/quoted/runtime/-quote-unpickler.html","searchKeys":["QuoteUnpickler"]},{"name":" def toArray(self: Tuple): Array[Object]","description":"scala.runtime.Tuple$.Callable(name=toArray, receiver=null, params=[])","location":"api/scala/runtime/-tuple/to-array.html","searchKeys":["toArray"]},{"name":"Version numbers","description":"","location":"docs/usage/version-numbers.html","searchKeys":["Version numbers"]},{"name":"inline def constValue[T]: T","description":"scala.compiletime.package$.Callable(name=constValue, receiver=null, params=[])","location":"api/scala/compiletime/const-value.html","searchKeys":["constValue"]},{"name":" def readNat(): Int","description":"dotty.tools.tasty.TastyReader.Callable(name=readNat, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/read-nat.html","searchKeys":["readNat"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-definition-methods/name.html","searchKeys":["name"]},{"name":"Workflow","description":"","location":"docs/contributing/workflow.html","searchKeys":["Workflow"]},{"name":" class ParseError(val idx: Int, val msg: String) extends Exception","description":"scala.util.CommandLineParser$","location":"api/scala/util/-command-line-parser/-parse-error.html","searchKeys":["ParseError"]},{"name":"Automatic Eta Expansion - More Details","description":"","location":"docs/reference/changed-features/eta-expansion-spec.html","searchKeys":["Automatic Eta Expansion - More Details"]},{"name":" def Protected: Flags","description":"scala.quoted.Quotes.Callable(name=Protected, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-protected.html","searchKeys":["Protected"]},{"name":" def fromString(s: String): T","description":"scala.util.CommandLineParser$.Callable(name=fromString, receiver=null, params=[])","location":"api/scala/util/-command-line-parser/-from-string/from-string.html","searchKeys":["fromString"]},{"name":"given BigIntLiftable","description":"scala.quoted.Liftable$.Callable(name=BigIntLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-big-int-liftable.html","searchKeys":["BigIntLiftable"]},{"name":"inline def drop[This >: Tuple <: Tuple](n: Int): Drop[This, n.type]","description":"scala.Tuple.Callable(name=drop, receiver=null, params=[])","location":"api/scala/-tuple/drop.html","searchKeys":["drop"]},{"name":"given TypeTest_Tree_Match as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Match, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-match.html","searchKeys":["TypeTest_Tree_Match"]},{"name":" def tail(self: NonEmptyTuple): Tuple","description":"scala.runtime.Tuple$.Callable(name=tail, receiver=null, params=[])","location":"api/scala/runtime/-tuple/tail.html","searchKeys":["tail"]},{"name":" def fromDigits(digits: String, radix: Int): BigInt","description":"scala.util.FromDigits$.Callable(name=fromDigits, receiver=null, params=[])","location":"api/scala/util/-from-digits$/-big-int-from-digits/from-digits.html","searchKeys":["fromDigits"]},{"name":" def intFromDigits(digits: String, radix: Int): Int","description":"scala.util.FromDigits$.Callable(name=intFromDigits, receiver=null, params=[])","location":"api/scala/util/-from-digits$/int-from-digits.html","searchKeys":["intFromDigits"]},{"name":"Using Dotty with sbt","description":"","location":"docs/usage/sbt-projects.html","searchKeys":["Using Dotty with sbt"]},{"name":" def unapply(x: Applied): Option[(TypeTree, List[Tree])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-applied-module/unapply.html","searchKeys":["unapply"]},{"name":" def resType: TypeRepr","description":"scala.quoted.Quotes.Callable(name=resType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-method-type-methods/res-type.html","searchKeys":["resType"]},{"name":" trait PolyFunction","description":"scala.PolyFunction","location":"api/scala/-poly-function.html","searchKeys":["PolyFunction"]},{"name":"final class Body() extends Annotation","description":"scala.annotation.internal.Body","location":"api/scala/annotation/internal/-body.html","searchKeys":["Body"]},{"name":" def fun: Term","description":"scala.quoted.Quotes.Callable(name=fun, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-apply-methods/fun.html","searchKeys":["fun"]},{"name":" def goto(addr: Addr): Unit","description":"dotty.tools.tasty.TastyReader.Callable(name=goto, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/goto.html","searchKeys":["goto"]},{"name":" trait ImportModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-import-module.html","searchKeys":["ImportModule"]},{"name":" def pattern: Tree","description":"scala.quoted.Quotes.Callable(name=pattern, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-bind-methods/pattern.html","searchKeys":["pattern"]},{"name":"given Tuple12Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple12Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple12-unliftable.html","searchKeys":["Tuple12Unliftable"]},{"name":" def apply(x: Boolean): Constant","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-boolean-module/apply.html","searchKeys":["apply"]},{"name":" def unapply(x: SimpleSelector): Option[String]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-simple-selector-module/unapply.html","searchKeys":["unapply"]},{"name":" object Util","description":"dotty.tools.tasty.util.Util$","location":"api/dotty/tools.tasty/util/-util.html","searchKeys":["Util"]},{"name":" given SymbolMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods.html","searchKeys":["SymbolMethods"]},{"name":" def tpeOpt: Option[TypeRepr]","description":"scala.quoted.Quotes.Callable(name=tpeOpt, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-closure-methods/tpe-opt.html","searchKeys":["tpeOpt"]},{"name":" object IArray","description":"scala.IArray$package$","location":"api/scala/-i-array.html","searchKeys":["IArray"]},{"name":"Multiversal Equality for Scala","description":"","location":"blog/_posts/2016-05-05-multiversal-equality.html","searchKeys":["Multiversal Equality for Scala"]},{"name":" def isExpr: Boolean","description":"scala.quoted.Quotes.Callable(name=isExpr, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-methods/is-expr.html","searchKeys":["isExpr"]},{"name":" def unapply[T](exprs: Seq[Expr[T]])(x$2: Quotes): Option[Seq[T]]","description":"scala.quoted.Consts$.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-consts/unapply.html","searchKeys":["unapply"]},{"name":"Programmatic Structural Types - More Details","description":"","location":"docs/reference/changed-features/structural-types-spec.html","searchKeys":["Programmatic Structural Types - More Details"]},{"name":" given TypeReprMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods.html","searchKeys":["TypeReprMethods"]},{"name":"given EitherLiftable","description":"scala.quoted.Liftable$.Callable(name=EitherLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-either-liftable.html","searchKeys":["EitherLiftable"]},{"name":" def fields: List[Symbol]","description":"scala.quoted.Quotes.Callable(name=fields, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/fields.html","searchKeys":["fields"]},{"name":" def unapply(x: Inlined): Option[(Option[Tree], List[Definition], Term)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-inlined-module/unapply.html","searchKeys":["unapply"]},{"name":" def primaryConstructor: Symbol","description":"scala.quoted.Quotes.Callable(name=primaryConstructor, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/primary-constructor.html","searchKeys":["primaryConstructor"]},{"name":"Tests for Debuggability","description":"","location":"docs/contributing/debug-tests.html","searchKeys":["Tests for Debuggability"]},{"name":"Wildcard Arguments in Types","description":"","location":"docs/reference/changed-features/wildcards.html","searchKeys":["Wildcard Arguments in Types"]},{"name":" def unapply(constant: Constant): Boolean","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-null-module/unapply.html","searchKeys":["unapply"]},{"name":" def writeUncompressedLong(x: Long): Unit","description":"dotty.tools.tasty.TastyBuffer.Callable(name=writeUncompressedLong, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/write-uncompressed-long.html","searchKeys":["writeUncompressedLong"]},{"name":" given PositionMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-position-methods.html","searchKeys":["PositionMethods"]},{"name":" trait BindModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-bind-module.html","searchKeys":["BindModule"]},{"name":" def expr: Term","description":"scala.quoted.Quotes.Callable(name=expr, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-block-methods/expr.html","searchKeys":["expr"]},{"name":" given ParamRefMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-param-ref-methods.html","searchKeys":["ParamRefMethods"]},{"name":" trait Quotes","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes.html","searchKeys":["Quotes"]},{"name":" def TupleClass(arity: Int): Symbol","description":"scala.quoted.Quotes.Callable(name=TupleClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-tuple-class.html","searchKeys":["TupleClass"]},{"name":" def RepeatedAnnot: Symbol","description":"scala.quoted.Quotes.Callable(name=RepeatedAnnot, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-repeated-annot.html","searchKeys":["RepeatedAnnot"]},{"name":"Contexts","description":"","location":"docs/internals/contexts.html","searchKeys":["Contexts"]},{"name":" def fromProduct(p: Product): MirroredMonoType","description":"scala.deriving.Mirror$.Callable(name=fromProduct, receiver=null, params=[])","location":"api/scala/deriving/-mirror$/-product/from-product.html","searchKeys":["fromProduct"]},{"name":" def UnitClass: Symbol","description":"scala.quoted.Quotes.Callable(name=UnitClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-unit-class.html","searchKeys":["UnitClass"]},{"name":"Implicit Conversions","description":"","location":"docs/reference/contextual/conversions.html","searchKeys":["Implicit Conversions"]},{"name":"Parameter Untupling - More Details","description":"","location":"docs/reference/other-new-features/parameter-untupling-spec.html","searchKeys":["Parameter Untupling - More Details"]},{"name":" def PrivateLocal: Flags","description":"scala.quoted.Quotes.Callable(name=PrivateLocal, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-private-local.html","searchKeys":["PrivateLocal"]},{"name":" def canEqual(that: Any): Boolean","description":"scala.deriving.ArrayProduct.Callable(name=canEqual, receiver=null, params=[])","location":"api/scala/deriving/-array-product/can-equal.html","searchKeys":["canEqual"]},{"name":" def lastIndexWhere[T](p: T => Boolean, end: Int): Int","description":"scala.opaques$.Callable(name=lastIndexWhere, receiver=null, params=[])","location":"api/scala/opaques/array-ops/last-index-where.html","searchKeys":["lastIndexWhere"]},{"name":" def typeSymbol: Symbol","description":"scala.quoted.Quotes.Callable(name=typeSymbol, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/type-symbol.html","searchKeys":["typeSymbol"]},{"name":" def Given: Flags","description":"scala.quoted.Quotes.Callable(name=Given, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-given.html","searchKeys":["Given"]},{"name":" def copy(original: Tree)(low: TypeTree, hi: TypeTree): TypeBoundsTree","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-tree-module/copy.html","searchKeys":["copy"]},{"name":"Match Expressions","description":"","location":"docs/reference/changed-features/match-syntax.html","searchKeys":["Match Expressions"]},{"name":"sealed trait Tuple extends Product","description":"scala.Tuple","location":"api/scala/-tuple.html","searchKeys":["Tuple"]},{"name":"given StringUnliftable","description":"scala.quoted.Unliftable$.Callable(name=StringUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-string-unliftable.html","searchKeys":["StringUnliftable"]},{"name":" def apply(symbol: Symbol, rhs: Option[Term]): ValDef","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-val-def-module/apply.html","searchKeys":["apply"]},{"name":" def apply[T](x: T)(lift: Liftable[T])(x$3: Quotes): Expr[T]","description":"scala.quoted.Expr$.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-expr$/apply.html","searchKeys":["apply"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-select-methods/name.html","searchKeys":["name"]},{"name":" trait ConstantTypeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-type-module.html","searchKeys":["ConstantTypeModule"]},{"name":" def ++[T, U >: T](that: IArray[U])(evidence$14: ClassTag[U]): IArray[U]","description":"scala.opaques$.Callable(name=++, receiver=null, params=[])","location":"api/scala/opaques/array-ops/++.html","searchKeys":["++"]},{"name":" def apply(tpt: TypeTree, args: List[Tree]): Applied","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-applied-module/apply.html","searchKeys":["apply"]},{"name":" def unapply(x: SuperType): Option[(TypeRepr, TypeRepr)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-super-type-module/unapply.html","searchKeys":["unapply"]},{"name":" def unapply(x: MethodType): Option[(List[String], List[TypeRepr], TypeRepr)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-method-type-module/unapply.html","searchKeys":["unapply"]},{"name":"given ListUnliftable","description":"scala.quoted.Unliftable$.Callable(name=ListUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-list-unliftable.html","searchKeys":["ListUnliftable"]},{"name":"Announcing Dotty 0.7.0 and 0.8.0-RC1","description":"","location":"blog/_posts/2018-04-27-eighth-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.7.0 and 0.8.0-RC1"]},{"name":" trait RefModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-ref-module.html","searchKeys":["RefModule"]},{"name":" def transformTypeTree(tree: TypeTree)(owner: Symbol): TypeTree","description":"scala.quoted.Quotes.Callable(name=transformTypeTree, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-map/transform-type-tree.html","searchKeys":["transformTypeTree"]},{"name":" def copy(original: Tree)(qual: Option[String]): This","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-this-module/copy.html","searchKeys":["copy"]},{"name":" def isErasedFunctionType: Boolean","description":"scala.quoted.Quotes.Callable(name=isErasedFunctionType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/is-erased-function-type.html","searchKeys":["isErasedFunctionType"]},{"name":"override def canEqual(that: Any): Boolean","description":"scala.runtime.EnumValue.Callable(name=canEqual, receiver=null, params=[])","location":"api/scala/runtime/-enum-value/can-equal.html","searchKeys":["canEqual"]},{"name":"Named Type Arguments","description":"","location":"docs/reference/other-new-features/named-typeargs.html","searchKeys":["Named Type Arguments"]},{"name":"given TypeTest_Tree_This as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_This, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-this.html","searchKeys":["TypeTest_Tree_This"]},{"name":" def fromString(s: String): Long","description":"scala.util.CommandLineParser$.Callable(name=fromString, receiver=null, params=[])","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-long/from-string.html","searchKeys":["fromString"]},{"name":" def LongClass: Symbol","description":"scala.quoted.Quotes.Callable(name=LongClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-long-class.html","searchKeys":["LongClass"]},{"name":" def span[T](p: T => Boolean): (IArray[T], IArray[T])","description":"scala.opaques$.Callable(name=span, receiver=null, params=[])","location":"api/scala/opaques/array-ops/span.html","searchKeys":["span"]},{"name":" def <:<(that: TypeRepr): Boolean","description":"scala.quoted.Quotes.Callable(name=<:<, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/[60][58][60].html","searchKeys":["<:<"]},{"name":" trait TreeAccumulator[X]","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-tree-accumulator.html","searchKeys":["TreeAccumulator"]},{"name":" object TastyHash","description":"dotty.tools.tasty.TastyHash$","location":"api/dotty/tools.tasty/-tasty-hash.html","searchKeys":["TastyHash"]},{"name":" def isAtEnd: Boolean","description":"dotty.tools.tasty.TastyHeaderUnpickler.Callable(name=isAtEnd, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-header-unpickler/is-at-end.html","searchKeys":["isAtEnd"]},{"name":" given ThisMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-this-methods.html","searchKeys":["ThisMethods"]},{"name":" def toIArray(self: Tuple): IArray[Object]","description":"scala.runtime.Tuple$.Callable(name=toIArray, receiver=null, params=[])","location":"api/scala/runtime/-tuple/to-i-array.html","searchKeys":["toIArray"]},{"name":" trait MethodTypeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-method-type-module.html","searchKeys":["MethodTypeModule"]},{"name":"given TypeTest_Tree_Apply as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-apply.html","searchKeys":["TypeTest_Tree_Apply"]},{"name":" def toExpr(x: T): Quotes => Expr[T]","description":"scala.quoted.Liftable.Callable(name=toExpr, receiver=null, params=[])","location":"api/scala/quoted/-liftable/to-expr.html","searchKeys":["toExpr"]},{"name":" def fromString(s: String): Float","description":"scala.util.CommandLineParser$.Callable(name=fromString, receiver=null, params=[])","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-float/from-string.html","searchKeys":["fromString"]},{"name":" object genericNumberLiterals","description":"scalaShadowing.language$","location":"api/scalaShadowing/language/experimental/generic-number-literals.html","searchKeys":["genericNumberLiterals"]},{"name":" def throwReturn(result: T): Nothing","description":"scala.util.control.NonLocalReturns$.Callable(name=throwReturn, receiver=null, params=[])","location":"api/scala/util/control/-non-local-returns/-return-throwable/throw-return.html","searchKeys":["throwReturn"]},{"name":" def Override: Flags","description":"scala.quoted.Quotes.Callable(name=Override, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-override.html","searchKeys":["Override"]},{"name":" def of(expr: Expr[Any]): Tree","description":"scala.quoted.Quotes.Callable(name=of, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-module/of.html","searchKeys":["of"]},{"name":"given TypeTest_Tree_While as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_While, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-while.html","searchKeys":["TypeTest_Tree_While"]},{"name":"given CharUnliftable","description":"scala.quoted.Unliftable$.Callable(name=CharUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-char-unliftable.html","searchKeys":["CharUnliftable"]},{"name":" def scrutinee: TypeRepr","description":"scala.quoted.Quotes.Callable(name=scrutinee, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-type-methods/scrutinee.html","searchKeys":["scrutinee"]},{"name":" def Open: Flags","description":"scala.quoted.Quotes.Callable(name=Open, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-open.html","searchKeys":["Open"]},{"name":"given Tuple14Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple14Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple14-liftable.html","searchKeys":["Tuple14Liftable"]},{"name":" def signature: Signature","description":"scala.quoted.Quotes.Callable(name=signature, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/signature.html","searchKeys":["signature"]},{"name":" def transformTypeCaseDefs(trees: List[TypeCaseDef])(owner: Symbol): List[TypeCaseDef]","description":"scala.quoted.Quotes.Callable(name=transformTypeCaseDefs, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-map/transform-type-case-defs.html","searchKeys":["transformTypeCaseDefs"]},{"name":" def lastOption[T]: Option[T]","description":"scala.opaques$.Callable(name=lastOption, receiver=null, params=[])","location":"api/scala/opaques/array-ops/last-option.html","searchKeys":["lastOption"]},{"name":" def isTypeParam: Boolean","description":"scala.quoted.Quotes.Callable(name=isTypeParam, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-type-param.html","searchKeys":["isTypeParam"]},{"name":"Dottydoc [Legacy]","description":"","location":"docs/usage/dottydoc.html","searchKeys":["Dottydoc [Legacy]"]},{"name":"given EmptyTupleLiftable","description":"scala.quoted.Liftable$.Callable(name=EmptyTupleLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-empty-tuple-liftable.html","searchKeys":["EmptyTupleLiftable"]},{"name":" def dropWhile[T](p: T => Boolean): IArray[T]","description":"scala.opaques$.Callable(name=dropWhile, receiver=null, params=[])","location":"api/scala/opaques/array-ops/drop-while.html","searchKeys":["dropWhile"]},{"name":"Announcing Dotty 0.11.0-RC1","description":"","location":"blog/_posts/2018-11-30-11th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.11.0-RC1"]},{"name":" def newBind(parent: Symbol, name: String, flags: Flags, tpe: TypeRepr): Symbol","description":"scala.quoted.Quotes.Callable(name=newBind, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-module/new-bind.html","searchKeys":["newBind"]},{"name":" def expr: Term","description":"scala.quoted.Quotes.Callable(name=expr, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-import-methods/expr.html","searchKeys":["expr"]},{"name":"given Tuple17Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple17Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple17-unliftable.html","searchKeys":["Tuple17Unliftable"]},{"name":" def indices[T]: Range","description":"scala.opaques$.Callable(name=indices, receiver=null, params=[])","location":"api/scala/opaques/array-ops/indices.html","searchKeys":["indices"]},{"name":" def AnyValClass: Symbol","description":"scala.quoted.Quotes.Callable(name=AnyValClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-any-val-class.html","searchKeys":["AnyValClass"]},{"name":" def unapply(constant: Constant): Option[Float]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-float-module/unapply.html","searchKeys":["unapply"]},{"name":" def unapply(x: ByName): Option[TypeTree]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-by-name-module/unapply.html","searchKeys":["unapply"]},{"name":" def apply(sym: Symbol): TypeTree","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-ident-module/apply.html","searchKeys":["apply"]},{"name":"Dropped: Limit 22","description":"","location":"docs/reference/dropped-features/limit22.html","searchKeys":["Dropped: Limit 22"]},{"name":" def ofList[T](xs: Seq[Expr[T]])(x$2: Type[T])(x$3: Quotes): Expr[List[T]]","description":"scala.quoted.Expr$.Callable(name=ofList, receiver=null, params=[])","location":"api/scala/quoted/-expr$/of-list.html","searchKeys":["ofList"]},{"name":"final case class Error(message: String, lineContent: String, column: Int, kind: ErrorKind)","description":"scala.compiletime.testing.Error","location":"api/scala/compiletime/testing/-error.html","searchKeys":["Error"]},{"name":" def slice[T](from: Int, until: Int): IArray[T]","description":"scala.opaques$.Callable(name=slice, receiver=null, params=[])","location":"api/scala/opaques/array-ops/slice.html","searchKeys":["slice"]},{"name":"override def toString(): String","description":"scala.Tuple$package$.Callable(name=toString, receiver=null, params=[])","location":"api/scala/-empty-tuple/to-string.html","searchKeys":["toString"]},{"name":" trait AssignModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-assign-module.html","searchKeys":["AssignModule"]},{"name":" trait Unliftable[T]","description":"scala.quoted.Unliftable","location":"api/scala/quoted/-unliftable.html","searchKeys":["Unliftable"]},{"name":" def writeBytes(data: Array[Byte], n: Int): Unit","description":"dotty.tools.tasty.TastyBuffer.Callable(name=writeBytes, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/write-bytes.html","searchKeys":["writeBytes"]},{"name":" def apply(x: Constant): ConstantType","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-type-module/apply.html","searchKeys":["apply"]},{"name":" def unapply(x: TypeApply): Option[(Term, List[TypeTree])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-apply-module/unapply.html","searchKeys":["unapply"]},{"name":" def body: List[Statement]","description":"scala.quoted.Quotes.Callable(name=body, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-class-def-methods/body.html","searchKeys":["body"]},{"name":" def copy(original: Tree)(qualifier: Term, name: String): TypeSelect","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-select-module/copy.html","searchKeys":["copy"]},{"name":" def right: TypeRepr","description":"scala.quoted.Quotes.Callable(name=right, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-and-type-methods/right.html","searchKeys":["right"]},{"name":" def typeConstructorOf(clazz: Class[]): TypeRepr","description":"scala.quoted.Quotes.Callable(name=typeConstructorOf, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-module/type-constructor-of.html","searchKeys":["typeConstructorOf"]},{"name":" trait ConstantCharModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-char-module.html","searchKeys":["ConstantCharModule"]},{"name":" def path: Path","description":"scala.quoted.Quotes.Callable(name=path, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-source-module/path.html","searchKeys":["path"]},{"name":"Internals","description":"","location":"docs/Internals/index.html","searchKeys":["Internals"]},{"name":"given Tuple1Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple1Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple1-unliftable.html","searchKeys":["Tuple1Unliftable"]},{"name":" def copy(original: Tree)(expr: Term, cases: List[CaseDef], finalizer: Option[Term]): Try","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-try-module/copy.html","searchKeys":["copy"]},{"name":"given Tuple14Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple14Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple14-unliftable.html","searchKeys":["Tuple14Unliftable"]},{"name":" def implicits: List[Term]","description":"scala.quoted.Quotes.Callable(name=implicits, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-unapply-methods/implicits.html","searchKeys":["implicits"]},{"name":"Higher-Kinded Types in Dotty","description":"","location":"docs/internals/higher-kinded-v2.html","searchKeys":["Higher-Kinded Types in Dotty"]},{"name":" given given_FromString_Double as FromString[Double]","description":"scala.util.CommandLineParser$","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-double.html","searchKeys":["given_FromString_Double"]},{"name":"given RightUnliftable","description":"scala.quoted.Unliftable$.Callable(name=RightUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-right-unliftable.html","searchKeys":["RightUnliftable"]},{"name":" trait TypeProjectionModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-projection-module.html","searchKeys":["TypeProjectionModule"]},{"name":" def elsep: Term","description":"scala.quoted.Quotes.Callable(name=elsep, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-if-methods/elsep.html","searchKeys":["elsep"]},{"name":"Dropped: XML Literals","description":"","location":"docs/reference/dropped-features/xml.html","searchKeys":["Dropped: XML Literals"]},{"name":" def patterns: List[Tree]","description":"scala.quoted.Quotes.Callable(name=patterns, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-unapply-methods/patterns.html","searchKeys":["patterns"]},{"name":" def fromProduct(xs: Product): Tuple","description":"scala.runtime.Tuple$.Callable(name=fromProduct, receiver=null, params=[])","location":"api/scala/runtime/-tuple/from-product.html","searchKeys":["fromProduct"]},{"name":"@compileTimeOnly(\"Illegal reference to `scala.quoted.runtime.Patterns.patternHole`\")  def patternHole[T]: T","description":"scala.quoted.runtime.Patterns$.Callable(name=patternHole, receiver=null, params=[])","location":"api/scala/quoted/runtime/-patterns/pattern-hole.html","searchKeys":["patternHole"]},{"name":" def unapply(x: New): Option[TypeTree]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-new-module/unapply.html","searchKeys":["unapply"]},{"name":" given WildcardTypeTreeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-wildcard-type-tree-methods.html","searchKeys":["WildcardTypeTreeMethods"]},{"name":" given ApplyMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-apply-methods.html","searchKeys":["ApplyMethods"]},{"name":" def copy(original: Tree)(expr: Term, selectors: List[ImportSelector]): Import","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-import-module/copy.html","searchKeys":["copy"]},{"name":"given TypeTest_Tree_TypeTree as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_TypeTree, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-type-tree.html","searchKeys":["TypeTest_Tree_TypeTree"]},{"name":"override def productElement(n: Int): Any","description":"scala.runtime.EnumValue.Callable(name=productElement, receiver=null, params=[])","location":"api/scala/runtime/-enum-value/product-element.html","searchKeys":["productElement"]},{"name":"@param  class constructorOnly extends StaticAnnotation","description":"scala.annotation.constructorOnly","location":"api/scala/annotation/constructor-only.html","searchKeys":["constructorOnly"]},{"name":" given DoubleLiftable[T <: Double] as Liftable[T]","description":"scala.quoted.Liftable$","location":"api/scala/quoted/-liftable$/-double-liftable.html","searchKeys":["DoubleLiftable"]},{"name":" def documentation: Option[Documentation]","description":"scala.quoted.Quotes.Callable(name=documentation, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/documentation.html","searchKeys":["documentation"]},{"name":" object LazyVals","description":"dotty.runtime.LazyVals$","location":"api/dotty/runtime/-lazy-vals.html","searchKeys":["LazyVals"]},{"name":"Release Procedure","description":"","location":"docs/contributing/procedures/release.html","searchKeys":["Release Procedure"]},{"name":" def appliedToTypeTrees(targs: List[TypeTree]): Term","description":"scala.quoted.Quotes.Callable(name=appliedToTypeTrees, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-methods/applied-to-type-trees.html","searchKeys":["appliedToTypeTrees"]},{"name":" def apply(pattern: Tree, guard: Option[Term], rhs: Term): CaseDef","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-case-def-module/apply.html","searchKeys":["apply"]},{"name":" def fromDigits(digits: String): T","description":"scala.util.FromDigits.Callable(name=fromDigits, receiver=null, params=[])","location":"api/scala/util/-from-digits/from-digits.html","searchKeys":["fromDigits"]},{"name":"given FloatUnliftable","description":"scala.quoted.Unliftable$.Callable(name=FloatUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-float-unliftable.html","searchKeys":["FloatUnliftable"]},{"name":"given TypeTest_Tree_TypeSelect as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_TypeSelect, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-type-select.html","searchKeys":["TypeTest_Tree_TypeSelect"]},{"name":"Dotty Internals 1: Trees & Symbols (Meeting Notes)","description":"","location":"docs/internals/dotty-internals-1-notes.html","searchKeys":["Dotty Internals 1: Trees & Symbols (Meeting Notes)"]},{"name":" def qualifier: Term","description":"scala.quoted.Quotes.Callable(name=qualifier, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-select-outer-methods/qualifier.html","searchKeys":["qualifier"]},{"name":" given AlternativesMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-alternatives-methods.html","searchKeys":["AlternativesMethods"]},{"name":" def unapply(x: CaseDef): Option[(Tree, Option[Term], Term)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-case-def-module/unapply.html","searchKeys":["unapply"]},{"name":"The Meta-theory of Symmetric Metaprogramming","description":"","location":"docs/reference/metaprogramming/simple-smp.html","searchKeys":["The Meta-theory of Symmetric Metaprogramming"]},{"name":" given given_FromString_Short as FromString[Short]","description":"scala.util.CommandLineParser$","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-short.html","searchKeys":["given_FromString_Short"]},{"name":" trait IdentModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-ident-module.html","searchKeys":["IdentModule"]},{"name":" def body: Term","description":"scala.quoted.Quotes.Callable(name=body, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-inlined-methods/body.html","searchKeys":["body"]},{"name":" def unapply(x: TypeBind): Option[(String, Tree)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bind-module/unapply.html","searchKeys":["unapply"]},{"name":" object Not extends LowPriorityNot","description":"scala.util.Not$","location":"api/scala/util/-not$.html","searchKeys":["Not"]},{"name":" object dependent","description":"scalaShadowing.language$","location":"api/scalaShadowing/language/experimental/dependent.html","searchKeys":["dependent"]},{"name":"Announcing Dotty 0.4.0-RC1","description":"","location":"blog/_posts/2017-10-16-fourth-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.4.0-RC1"]},{"name":" def cases: List[TypeRepr]","description":"scala.quoted.Quotes.Callable(name=cases, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-type-methods/cases.html","searchKeys":["cases"]},{"name":"given StringContextLiftable","description":"scala.quoted.Liftable$.Callable(name=StringContextLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-string-context-liftable.html","searchKeys":["StringContextLiftable"]},{"name":" def isClassDef: Boolean","description":"scala.quoted.Quotes.Callable(name=isClassDef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-class-def.html","searchKeys":["isClassDef"]},{"name":" def low: TypeTree","description":"scala.quoted.Quotes.Callable(name=low, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-tree-methods/low.html","searchKeys":["low"]},{"name":" trait PackageClauseModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-package-clause-module.html","searchKeys":["PackageClauseModule"]},{"name":"override def toString: String","description":"scala.runtime.TupleXXL.Callable(name=toString, receiver=null, params=[])","location":"api/scala/runtime/-tuple-x-x-l/to-string.html","searchKeys":["toString"]},{"name":"Extension Methods","description":"","location":"docs/reference/contextual/extension-methods.html","searchKeys":["Extension Methods"]},{"name":" def update(n: Int, x: Any): Unit","description":"scala.deriving.ArrayProduct.Callable(name=update, receiver=null, params=[])","location":"api/scala/deriving/-array-product/update.html","searchKeys":["update"]},{"name":" def apply(low: TypeTree, hi: TypeTree): TypeBoundsTree","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-tree-module/apply.html","searchKeys":["apply"]},{"name":" trait Selectable extends Selectable","description":"scala.reflect.Selectable","location":"api/scala/reflect/-selectable.html","searchKeys":["Selectable"]},{"name":"Contributing","description":"","location":"docs/Contributing/index.html","searchKeys":["Contributing"]},{"name":" def termSymbol: Symbol","description":"scala.quoted.Quotes.Callable(name=termSymbol, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/term-symbol.html","searchKeys":["termSymbol"]},{"name":"Query Types","description":"","location":"docs/reference/contextual/query-types.html","searchKeys":["Query Types"]},{"name":"Announcing Dotty 0.2.0-RC1, with new optimizations, improved stability and IDE support","description":"","location":"blog/_posts/2017-07-12-second-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.2.0-RC1, with new optimizations, improved stability and IDE support"]},{"name":"Union Types - More Details","description":"","location":"docs/reference/new-types/union-types-spec.html","searchKeys":["Union Types - More Details"]},{"name":"Announcing Dotty 0.12.0-RC1","description":"","location":"blog/_posts/2019-01-21-12th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.12.0-RC1"]},{"name":"Numeric Literals","description":"","location":"docs/reference/changed-features/numeric-literals.html","searchKeys":["Numeric Literals"]},{"name":"Dropped Features","description":"","location":"docs/Dropped Features/index.html","searchKeys":["Dropped Features"]},{"name":" def classMethods: List[Symbol]","description":"scala.quoted.Quotes.Callable(name=classMethods, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/class-methods.html","searchKeys":["classMethods"]},{"name":" def emptyShortIArray: IArray[Short]","description":"scala.IArray$package$.Callable(name=emptyShortIArray, receiver=null, params=[])","location":"api/scala/-i-array/empty-short-i-array.html","searchKeys":["emptyShortIArray"]},{"name":" given given_FromString_Long as FromString[Long]","description":"scala.util.CommandLineParser$","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-long.html","searchKeys":["given_FromString_Long"]},{"name":" def seqToArray[T](xs: Seq[T], clazz: Class[]): Array[T]","description":"dotty.runtime.Arrays$.Callable(name=seqToArray, receiver=null, params=[])","location":"api/dotty/runtime/-arrays/seq-to-array.html","searchKeys":["seqToArray"]},{"name":" def readEnd(): Addr","description":"dotty.tools.tasty.TastyReader.Callable(name=readEnd, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/read-end.html","searchKeys":["readEnd"]},{"name":"final class Not[+T]","description":"scala.util.Not","location":"api/scala/util/-not.html","searchKeys":["Not"]},{"name":"TypeTest","description":"","location":"docs/reference/other-new-features/type-test.html","searchKeys":["TypeTest"]},{"name":"given Tuple19Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple19Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple19-unliftable.html","searchKeys":["Tuple19Unliftable"]},{"name":"Contextual Abstractions","description":"","location":"docs/Contextual Abstractions/index.html","searchKeys":["Contextual Abstractions"]},{"name":" def appliedToNone: Apply","description":"scala.quoted.Quotes.Callable(name=appliedToNone, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-methods/applied-to-none.html","searchKeys":["appliedToNone"]},{"name":" def fromIArray(elems: IArray[Object]): TupleXXL","description":"scala.runtime.TupleXXL$.Callable(name=fromIArray, receiver=null, params=[])","location":"api/scala/runtime/-tuple-x-x-l$/from-i-array.html","searchKeys":["fromIArray"]},{"name":" def self: Option[ValDef]","description":"scala.quoted.Quotes.Callable(name=self, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-class-def-methods/self.html","searchKeys":["self"]},{"name":" def arg: TypeTree","description":"scala.quoted.Quotes.Callable(name=arg, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-annotated-methods/arg.html","searchKeys":["arg"]},{"name":" def consIterator(head: Any, tail: Tuple): Iterator[Any]","description":"scala.runtime.Tuple$.Callable(name=consIterator, receiver=null, params=[])","location":"api/scala/runtime/-tuple/cons-iterator.html","searchKeys":["consIterator"]},{"name":" def translucentSuperType: TypeRepr","description":"scala.quoted.Quotes.Callable(name=translucentSuperType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-ref-methods/translucent-super-type.html","searchKeys":["translucentSuperType"]},{"name":" def apply(tpe: TypeRepr): Inferred","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-inferred-module/apply.html","searchKeys":["apply"]},{"name":" object StringContext","description":"scala.quoted.Expr$","location":"api/scala/quoted/-expr$/-string-context.html","searchKeys":["StringContext"]},{"name":" def nonEmpty[T]: Boolean","description":"scala.opaques$.Callable(name=nonEmpty, receiver=null, params=[])","location":"api/scala/opaques/array-ops/non-empty.html","searchKeys":["nonEmpty"]},{"name":"Dropped: Weak Conformance - More Details","description":"","location":"docs/reference/dropped-features/weak-conformance-spec.html","searchKeys":["Dropped: Weak Conformance - More Details"]},{"name":" def copy(original: Tree)(expr: Term, tpt: TypeTree): Typed","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-typed-module/copy.html","searchKeys":["copy"]},{"name":" def count[T](p: T => Boolean): Int","description":"scala.opaques$.Callable(name=count, receiver=null, params=[])","location":"api/scala/opaques/array-ops/count.html","searchKeys":["count"]},{"name":" def hi: TypeRepr","description":"scala.quoted.Quotes.Callable(name=hi, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-methods/hi.html","searchKeys":["hi"]},{"name":" def ofTupleFromSeq(seq: Seq[Expr[Any]])(x$2: Quotes): Expr[Tuple]","description":"scala.quoted.Expr$.Callable(name=ofTupleFromSeq, receiver=null, params=[])","location":"api/scala/quoted/-expr$/of-tuple-from-seq.html","searchKeys":["ofTupleFromSeq"]},{"name":" def tpt: TypeTree","description":"scala.quoted.Quotes.Callable(name=tpt, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-applied-methods/tpt.html","searchKeys":["tpt"]},{"name":" def from: Symbol","description":"scala.quoted.Quotes.Callable(name=from, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-return-methods/from.html","searchKeys":["from"]},{"name":" def parseString[T](str: String, n: Int)(fs: FromString[T]): T","description":"scala.util.CommandLineParser$.Callable(name=parseString, receiver=null, params=[])","location":"api/scala/util/-command-line-parser/parse-string.html","searchKeys":["parseString"]},{"name":"IDE support for Dotty","description":"","location":"docs/usage/ide-support.html","searchKeys":["IDE support for Dotty"]},{"name":" def Array_length: Symbol","description":"scala.quoted.Quotes.Callable(name=Array_length, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-array_length.html","searchKeys":["Array_length"]},{"name":"given TypeTest_Tree_Select as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Select, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-select.html","searchKeys":["TypeTest_Tree_Select"]},{"name":" def tree: Term","description":"scala.quoted.Quotes.Callable(name=tree, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-implicit-search-success-methods/tree.html","searchKeys":["tree"]},{"name":" def unapply[T](expr: Expr[Seq[T]])(x$2: Quotes): Option[Seq[Expr[T]]]","description":"scala.quoted.Varargs$.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-varargs/unapply.html","searchKeys":["unapply"]},{"name":" def apply(paramNames: List[String])(paramBoundsExp: PolyType => List[TypeBounds], resultTypeExp: PolyType => TypeRepr): PolyType","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-poly-type-module/apply.html","searchKeys":["apply"]},{"name":"Scala3doc-specific Tags and Features","description":"","location":"docs/usage/scala3doc/specificTags.html","searchKeys":["Scala3doc-specific Tags and Features"]},{"name":" def showAnsiColored: String","description":"scala.quoted.Quotes.Callable(name=showAnsiColored, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/show-ansi-colored.html","searchKeys":["showAnsiColored"]},{"name":" def qualifier: TypeRepr","description":"scala.quoted.Quotes.Callable(name=qualifier, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-ref-methods/qualifier.html","searchKeys":["qualifier"]},{"name":"Dropped: Existential Types","description":"","location":"docs/reference/dropped-features/existential-types.html","searchKeys":["Dropped: Existential Types"]},{"name":"Talks","description":"","location":"docs/resources/talks.html","searchKeys":["Talks"]},{"name":" def exists[T](p: T => Boolean): Boolean","description":"scala.opaques$.Callable(name=exists, receiver=null, params=[])","location":"api/scala/opaques/array-ops/exists.html","searchKeys":["exists"]},{"name":" def copy(original: Tree)(name: String): TypeIdent","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-ident-module/copy.html","searchKeys":["copy"]},{"name":" def EmptyFlags: Flags","description":"scala.quoted.Quotes.Callable(name=EmptyFlags, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-empty-flags.html","searchKeys":["EmptyFlags"]},{"name":" def readAddr(): Addr","description":"dotty.tools.tasty.TastyReader.Callable(name=readAddr, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/read-addr.html","searchKeys":["readAddr"]},{"name":"Test Vulpix Framework","description":"","location":"docs/contributing/procedures/vulpix.html","searchKeys":["Test Vulpix Framework"]},{"name":" def isOpaqueAlias: Boolean","description":"scala.quoted.Quotes.Callable(name=isOpaqueAlias, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-ref-methods/is-opaque-alias.html","searchKeys":["isOpaqueAlias"]},{"name":" def body: Tree","description":"scala.quoted.Quotes.Callable(name=body, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bind-methods/body.html","searchKeys":["body"]},{"name":" def namePos: Position","description":"scala.quoted.Quotes.Callable(name=namePos, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-omit-selector-methods/name-pos.html","searchKeys":["namePos"]},{"name":" def reverse[T]: IArray[T]","description":"scala.opaques$.Callable(name=reverse, receiver=null, params=[])","location":"api/scala/opaques/array-ops/reverse.html","searchKeys":["reverse"]},{"name":" def FunctionClass(arity: Int, isImplicit: Boolean, isErased: Boolean): Symbol","description":"scala.quoted.Quotes.Callable(name=FunctionClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-function-class.html","searchKeys":["FunctionClass"]},{"name":" trait TypeDefModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-def-module.html","searchKeys":["TypeDefModule"]},{"name":"sealed trait NonEmptyTuple extends Tuple","description":"scala.NonEmptyTuple","location":"api/scala/-non-empty-tuple.html","searchKeys":["NonEmptyTuple"]},{"name":" trait SuperModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-super-module.html","searchKeys":["SuperModule"]},{"name":" def apply(paramNames: List[String], boundsFn: TypeLambda => List[TypeBounds], bodyFn: TypeLambda => TypeRepr): TypeLambda","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-lambda-module/apply.html","searchKeys":["apply"]},{"name":"@implicitNotFound(\"Values of types ${L} and ${R} cannot be compared with == or !=\") sealed trait Eql[-L, -R]","description":"scala.Eql","location":"api/scala/-eql.html","searchKeys":["Eql"]},{"name":"Classpaths","description":"","location":"docs/internals/classpaths.html","searchKeys":["Classpaths"]},{"name":"given NilUnliftable","description":"scala.quoted.Unliftable$.Callable(name=NilUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-nil-unliftable.html","searchKeys":["NilUnliftable"]},{"name":" given AndTypeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-and-type-methods.html","searchKeys":["AndTypeMethods"]},{"name":" def unapply(x: RecursiveType): Option[TypeRepr]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-recursive-type-module/unapply.html","searchKeys":["unapply"]},{"name":"given TypeTest_ImplicitSearchResult_ImplicitSearchFailure as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_ImplicitSearchResult_ImplicitSearchFailure, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-implicit-search-result_-implicit-search-failure.html","searchKeys":["TypeTest_ImplicitSearchResult_ImplicitSearchFailure"]},{"name":"given Tuple21Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple21Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple21-unliftable.html","searchKeys":["Tuple21Unliftable"]},{"name":"given TypeTest_TypeRepr_AnnotatedType as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_AnnotatedType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-annotated-type.html","searchKeys":["TypeTest_TypeRepr_AnnotatedType"]},{"name":" def statements: List[Statement]","description":"scala.quoted.Quotes.Callable(name=statements, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-block-methods/statements.html","searchKeys":["statements"]},{"name":" def Case: Flags","description":"scala.quoted.Quotes.Callable(name=Case, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-case.html","searchKeys":["Case"]},{"name":" def explanation: String","description":"scala.quoted.Quotes.Callable(name=explanation, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-implicit-search-failure-methods/explanation.html","searchKeys":["explanation"]},{"name":" def changeOwner[ThisTree <: Tree](newOwner: Symbol): ThisTree","description":"scala.quoted.Quotes.Callable(name=changeOwner, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-methods/change-owner.html","searchKeys":["changeOwner"]},{"name":" def copy(original: Tree)(constant: Constant): Literal","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-literal-module/copy.html","searchKeys":["copy"]},{"name":" trait ConstantModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-module.html","searchKeys":["ConstantModule"]},{"name":" given WhileMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-while-methods.html","searchKeys":["WhileMethods"]},{"name":" def startColumn: Int","description":"scala.quoted.Quotes.Callable(name=startColumn, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-position-methods/start-column.html","searchKeys":["startColumn"]},{"name":"Scala Syntax Summary","description":"","location":"docs/internals/syntax.html","searchKeys":["Scala Syntax Summary"]},{"name":"Announcing Dotty 0.23.0-RC1 - safe initialization checks, type-level bitwise operations and more","description":"","location":"blog/_posts/2020-03-18-23rd-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.23.0-RC1 - safe initialization checks, type-level bitwise operations and more"]},{"name":"given TypeTest_Tree_TypeBind as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_TypeBind, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-type-bind.html","searchKeys":["TypeTest_Tree_TypeBind"]},{"name":" def qualifier: TypeRepr","description":"scala.quoted.Quotes.Callable(name=qualifier, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-ref-methods/qualifier.html","searchKeys":["qualifier"]},{"name":" def apply(bound: TypeRepr, scrutinee: TypeRepr, cases: List[TypeRepr]): MatchType","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-type-module/apply.html","searchKeys":["apply"]},{"name":" def -(delta: Int): Addr","description":"dotty.tools.tasty.TastyBuffer$.Callable(name=-, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer$/-addr/-.html","searchKeys":["-"]},{"name":" def unapply(sig: Signature): Option[(List[String | Int], String)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-signature-module/unapply.html","searchKeys":["unapply"]},{"name":"given Tuple7Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple7Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple7-liftable.html","searchKeys":["Tuple7Liftable"]},{"name":" def unsafeFromArray[T](s: Array[T]): IArray[T]","description":"scala.IArray$package$.Callable(name=unsafeFromArray, receiver=null, params=[])","location":"api/scala/-i-array/unsafe-from-array.html","searchKeys":["unsafeFromArray"]},{"name":"given BigDecimalLiftable","description":"scala.quoted.Liftable$.Callable(name=BigDecimalLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-big-decimal-liftable.html","searchKeys":["BigDecimalLiftable"]},{"name":" def sourceCode: String","description":"scala.quoted.Quotes.Callable(name=sourceCode, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-position-methods/source-code.html","searchKeys":["sourceCode"]},{"name":" def owner: Symbol","description":"scala.quoted.Quotes.Callable(name=owner, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/owner.html","searchKeys":["owner"]},{"name":"Programmatic Structural Types","description":"","location":"docs/reference/changed-features/structural-types.html","searchKeys":["Programmatic Structural Types"]},{"name":"Type System","description":"","location":"docs/internals/type-system.html","searchKeys":["Type System"]},{"name":" def showExtractors: String","description":"scala.quoted.Quotes.Callable(name=showExtractors, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/show-extractors.html","searchKeys":["showExtractors"]},{"name":"@throws(scala.Predef.classOf[scala.IndexOutOfBoundsException]) override def productElement(n: Int): Any","description":"scala.Tuple$package$.Callable(name=productElement, receiver=null, params=[])","location":"api/scala/-empty-tuple/product-element.html","searchKeys":["productElement"]},{"name":" def iterator[T]: Iterator[T]","description":"scala.opaques$.Callable(name=iterator, receiver=null, params=[])","location":"api/scala/opaques/array-ops/iterator.html","searchKeys":["iterator"]},{"name":" class ReturnThrowable[T] extends ControlThrowable","description":"scala.util.control.NonLocalReturns$","location":"api/scala/util/control/-non-local-returns/-return-throwable.html","searchKeys":["ReturnThrowable"]},{"name":" given AnnotatedMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-annotated-methods.html","searchKeys":["AnnotatedMethods"]},{"name":"Announcing Dotty 0.10.0-RC1","description":"","location":"blog/_posts/2018-10-10-10th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.10.0-RC1"]},{"name":" def constant: Constant","description":"scala.quoted.Quotes.Callable(name=constant, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-type-methods/constant.html","searchKeys":["constant"]},{"name":" given DefinitionMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-definition-methods.html","searchKeys":["DefinitionMethods"]},{"name":"given Tuple21Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple21Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple21-liftable.html","searchKeys":["Tuple21Liftable"]},{"name":" def last[T]: T","description":"scala.opaques$.Callable(name=last, receiver=null, params=[])","location":"api/scala/opaques/array-ops/last.html","searchKeys":["last"]},{"name":" def unapply(x: MatchTypeTree): Option[(Option[TypeTree], TypeTree, List[TypeCaseDef])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-type-tree-module/unapply.html","searchKeys":["unapply"]},{"name":" def unapply[H, T <: Tuple](x: H *: T): (H, T)","description":"scala.*:$.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/[42][58]$/unapply.html","searchKeys":["unapply"]},{"name":"Announcing Dotty 0.27.0-RC1 - ScalaJS, performance, stability","description":"","location":"blog/_posts/2020-08-31-27th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.27.0-RC1 - ScalaJS, performance, stability"]},{"name":" def fromArray(xs: Array[Object]): Tuple","description":"scala.runtime.Tuple$.Callable(name=fromArray, receiver=null, params=[])","location":"api/scala/runtime/-tuple/from-array.html","searchKeys":["fromArray"]},{"name":"given TypeTest_Tree_Bind as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Bind, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-bind.html","searchKeys":["TypeTest_Tree_Bind"]},{"name":" def Contravariant: Flags","description":"scala.quoted.Quotes.Callable(name=Contravariant, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-contravariant.html","searchKeys":["Contravariant"]},{"name":" def apply(bound: Option[TypeTree], selector: TypeTree, cases: List[TypeCaseDef]): MatchTypeTree","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-type-tree-module/apply.html","searchKeys":["apply"]},{"name":" trait LambdaModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-lambda-module.html","searchKeys":["LambdaModule"]},{"name":"inline def typeCheckErrors(code: String): List[Error]","description":"scala.compiletime.testing.package$.Callable(name=typeCheckErrors, receiver=null, params=[])","location":"api/scala/compiletime/testing/type-check-errors.html","searchKeys":["typeCheckErrors"]},{"name":"The Essence of Scala","description":"","location":"blog/_posts/2016-02-03-essence-of-scala.html","searchKeys":["The Essence of Scala"]},{"name":" def get(t: Object, off: Long): Long","description":"dotty.runtime.LazyVals$.Callable(name=get, receiver=null, params=[])","location":"api/dotty/runtime/-lazy-vals/get.html","searchKeys":["get"]},{"name":" def caseFields: List[Symbol]","description":"scala.quoted.Quotes.Callable(name=caseFields, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/case-fields.html","searchKeys":["caseFields"]},{"name":" object *:","description":"scala.*:$","location":"api/scala/[42][58]$.html","searchKeys":["*:"]},{"name":"given eqlNumber","description":"scala.Eql$.Callable(name=eqlNumber, receiver=null, params=[])","location":"api/scala/-eql$/eql-number.html","searchKeys":["eqlNumber"]},{"name":"given Tuple5Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple5Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple5-liftable.html","searchKeys":["Tuple5Liftable"]},{"name":" def AnyRefClass: Symbol","description":"scala.quoted.Quotes.Callable(name=AnyRefClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-any-ref-class.html","searchKeys":["AnyRefClass"]},{"name":" def copy(original: Tree)(pid: Ref, stats: List[Tree]): PackageClause","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-package-clause-module/copy.html","searchKeys":["copy"]},{"name":" def bindings: List[Definition]","description":"scala.quoted.Quotes.Callable(name=bindings, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-inlined-methods/bindings.html","searchKeys":["bindings"]},{"name":" def guard: Option[Term]","description":"scala.quoted.Quotes.Callable(name=guard, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-case-def-methods/guard.html","searchKeys":["guard"]},{"name":"API Documentation","description":"","location":"docs/usage/scala3doc/docComments.html","searchKeys":["API Documentation"]},{"name":" def toExpr(x: T): Quotes => Expr[T]","description":"scala.quoted.Liftable$.Callable(name=toExpr, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-float-liftable/to-expr.html","searchKeys":["toExpr"]},{"name":" def Macro: Flags","description":"scala.quoted.Quotes.Callable(name=Macro, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-macro.html","searchKeys":["Macro"]},{"name":" object Expr","description":"scala.quoted.Expr$","location":"api/scala/quoted/-expr$.html","searchKeys":["Expr"]},{"name":" def unapply(x: AppliedType): Option[(TypeRepr, List[TypeRepr])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-applied-type-module/unapply.html","searchKeys":["unapply"]},{"name":" def unapply(x: Alternatives): Option[List[Tree]]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-alternatives-module/unapply.html","searchKeys":["unapply"]},{"name":"Enums","description":"","location":"docs/Enums/index.html","searchKeys":["Enums"]},{"name":"given ArrayLiftable","description":"scala.quoted.Liftable$.Callable(name=ArrayLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-array-liftable.html","searchKeys":["ArrayLiftable"]},{"name":" def copy(original: Tree)(tpt: TypeTree, refinements: List[Definition]): Refined","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-refined-module/copy.html","searchKeys":["copy"]},{"name":"Dropped: Symbol Literals","description":"","location":"docs/reference/dropped-features/symlits.html","searchKeys":["Dropped: Symbol Literals"]},{"name":"final abstract class TypeBox[-L <: U, +U]","description":"scala.runtime.TypeBox","location":"api/scala/runtime/-type-box.html","searchKeys":["TypeBox"]},{"name":" trait TreeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-tree-module.html","searchKeys":["TreeModule"]},{"name":"given TypeTest_TypeRepr_TypeLambda as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_TypeLambda, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-type-lambda.html","searchKeys":["TypeTest_TypeRepr_TypeLambda"]},{"name":" def zip(t1: Tuple, t2: Tuple): Tuple","description":"scala.runtime.Tuple$.Callable(name=zip, receiver=null, params=[])","location":"api/scala/runtime/-tuple/zip.html","searchKeys":["zip"]},{"name":" def nn[T](x: T | Null): x.type & T","description":"scala.runtime.Scala3RunTime$.Callable(name=nn, receiver=null, params=[])","location":"api/scala/runtime/-scala3-run-time/nn.html","searchKeys":["nn"]},{"name":"given TypeTest_Tree_ByName as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_ByName, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-by-name.html","searchKeys":["TypeTest_Tree_ByName"]},{"name":" trait AppliedTypeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-applied-type-module.html","searchKeys":["AppliedTypeModule"]},{"name":" given MatchTypeTreeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-match-type-tree-methods.html","searchKeys":["MatchTypeTreeMethods"]},{"name":"Inferable Params","description":"","location":"docs/reference/contextual/inferable-params.html","searchKeys":["Inferable Params"]},{"name":" def Static: Flags","description":"scala.quoted.Quotes.Callable(name=Static, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-static.html","searchKeys":["Static"]},{"name":"given SeqUnliftable","description":"scala.quoted.Unliftable$.Callable(name=SeqUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-seq-unliftable.html","searchKeys":["SeqUnliftable"]},{"name":" def cases: List[CaseDef]","description":"scala.quoted.Quotes.Callable(name=cases, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-methods/cases.html","searchKeys":["cases"]},{"name":" given TypeCaseDefMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-case-def-methods.html","searchKeys":["TypeCaseDefMethods"]},{"name":"given TypeTest_Tree_Annotated as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Annotated, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-annotated.html","searchKeys":["TypeTest_Tree_Annotated"]},{"name":"given ByteUnliftable","description":"scala.quoted.Unliftable$.Callable(name=ByteUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-byte-unliftable.html","searchKeys":["ByteUnliftable"]},{"name":" def getOffset(clz: Class[], name: String): Long","description":"dotty.runtime.LazyVals$.Callable(name=getOffset, receiver=null, params=[])","location":"api/dotty/runtime/-lazy-vals/get-offset.html","searchKeys":["getOffset"]},{"name":" def productToArray(self: Product): Array[Object]","description":"scala.runtime.Tuple$.Callable(name=productToArray, receiver=null, params=[])","location":"api/scala/runtime/-tuple/product-to-array.html","searchKeys":["productToArray"]},{"name":"Type Lambdas","description":"","location":"docs/reference/new-types/type-lambdas.html","searchKeys":["Type Lambdas"]},{"name":" given SelectOuterMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-select-outer-methods.html","searchKeys":["SelectOuterMethods"]},{"name":" def foldTree(x: X, tree: Tree)(owner: Symbol): X","description":"scala.quoted.Quotes.Callable(name=foldTree, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-accumulator/fold-tree.html","searchKeys":["foldTree"]},{"name":" def unapply[T](expr: Expr[T])(x$2: Quotes): Option[T]","description":"scala.quoted.Const$.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-const/unapply.html","searchKeys":["unapply"]},{"name":" def =:=(that: TypeRepr): Boolean","description":"scala.quoted.Quotes.Callable(name==:=, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/=[58]=.html","searchKeys":["=:="]},{"name":" def aliases: List[TypeDef]","description":"scala.quoted.Quotes.Callable(name=aliases, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-block-methods/aliases.html","searchKeys":["aliases"]},{"name":"Divergences between Scala 2 and Dotty","description":"","location":"docs/contributing/scala2-vs-scala3.html","searchKeys":["Divergences between Scala 2 and Dotty"]},{"name":"Enumerations","description":"","location":"docs/reference/enums/enums.html","searchKeys":["Enumerations"]},{"name":"Resources","description":"","location":"docs/Resources/index.html","searchKeys":["Resources"]},{"name":"given Tuple10Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple10Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple10-liftable.html","searchKeys":["Tuple10Liftable"]},{"name":" def apply(sym: Symbol, pattern: Tree): Bind","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-bind-module/apply.html","searchKeys":["apply"]},{"name":"given UnitUnliftable","description":"scala.quoted.Unliftable$.Callable(name=UnitUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-unit-unliftable.html","searchKeys":["UnitUnliftable"]},{"name":" def Mutable: Flags","description":"scala.quoted.Quotes.Callable(name=Mutable, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-mutable.html","searchKeys":["Mutable"]},{"name":" def copy(original: Tree)(call: Option[Tree], bindings: List[Definition], expansion: Term): Inlined","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-inlined-module/copy.html","searchKeys":["copy"]},{"name":"given ArrayOfCharLiftable","description":"scala.quoted.Liftable$.Callable(name=ArrayOfCharLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-array-of-char-liftable.html","searchKeys":["ArrayOfCharLiftable"]},{"name":"Union Types","description":"","location":"docs/reference/new-types/union-types.html","searchKeys":["Union Types"]},{"name":" trait SummonFromModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-summon-from-module.html","searchKeys":["SummonFromModule"]},{"name":" def unapply[TypeBindings <: Tuple, Tup <: Tuple](scrutinee: Expr[Any])(pattern: Expr[Any]): Option[Tup]","description":"scala.quoted.runtime.QuoteMatching.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/runtime/-quote-matching/-expr-match-module/unapply.html","searchKeys":["unapply"]},{"name":" def term(tp: TermRef): Ref","description":"scala.quoted.Quotes.Callable(name=term, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-ref-module/term.html","searchKeys":["term"]},{"name":" class NameTags","description":"dotty.tools.tasty.TastyFormat$","location":"api/dotty/tools.tasty/-tasty-format/-name-tags.html","searchKeys":["NameTags"]},{"name":"given Tuple3Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple3Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple3-liftable.html","searchKeys":["Tuple3Liftable"]},{"name":"Erased Terms","description":"","location":"docs/reference/metaprogramming/erased-terms.html","searchKeys":["Erased Terms"]},{"name":" def show[T](x$1: Type[T])(x$2: Quotes): String","description":"scala.quoted.Type$.Callable(name=show, receiver=null, params=[])","location":"api/scala/quoted/-type$/show.html","searchKeys":["show"]},{"name":" def paramNum: Int","description":"scala.quoted.Quotes.Callable(name=paramNum, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-param-ref-methods/param-num.html","searchKeys":["paramNum"]},{"name":" def transformTypeCaseDef(tree: TypeCaseDef)(owner: Symbol): TypeCaseDef","description":"scala.quoted.Quotes.Callable(name=transformTypeCaseDef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-map/transform-type-case-def.html","searchKeys":["transformTypeCaseDef"]},{"name":" given CharLiftable[T <: Char] as Liftable[T]","description":"scala.quoted.Liftable$","location":"api/scala/quoted/-liftable$/-char-liftable.html","searchKeys":["CharLiftable"]},{"name":"override def equals(that: Any): Boolean","description":"scala.runtime.TupleXXL.Callable(name=equals, receiver=null, params=[])","location":"api/scala/runtime/-tuple-x-x-l/equals.html","searchKeys":["equals"]},{"name":" def unapply(x: While): Option[(Term, Term)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-while-module/unapply.html","searchKeys":["unapply"]},{"name":" def showExtractors: String","description":"scala.quoted.Quotes.Callable(name=showExtractors, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-methods/show-extractors.html","searchKeys":["showExtractors"]},{"name":" def unapply(constant: Constant): Option[TypeRepr]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-class-of-module/unapply.html","searchKeys":["unapply"]},{"name":" given ReturnMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-return-methods.html","searchKeys":["ReturnMethods"]},{"name":" trait TreeMap","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-tree-map.html","searchKeys":["TreeMap"]},{"name":" def unapply(x: TermRef): Option[(TypeRepr, String)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-ref-module/unapply.html","searchKeys":["unapply"]},{"name":" class Alias(aliased: Any) extends Annotation","description":"scala.annotation.internal.Alias","location":"api/scala/annotation/internal/-alias.html","searchKeys":["Alias"]},{"name":"@deprecated(\"import scala.reflect.Selectable.reflectiveSelectable instead of scala.language.reflectiveCalls\", since = \"3.0\") implicit def reflectiveSelectableFromLangReflectiveCalls(x: Any)(x$2: reflectiveCalls): Selectable","description":"scala.Selectable$.Callable(name=reflectiveSelectableFromLangReflectiveCalls, receiver=null, params=[])","location":"api/scala/-selectable$/reflective-selectable-from-lang-reflective-calls.html","searchKeys":["reflectiveSelectableFromLangReflectiveCalls"]},{"name":" trait PositionModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-position-module.html","searchKeys":["PositionModule"]},{"name":" def fromIArray(xs: IArray[Object]): Tuple","description":"scala.runtime.Tuple$.Callable(name=fromIArray, receiver=null, params=[])","location":"api/scala/runtime/-tuple/from-i-array.html","searchKeys":["fromIArray"]},{"name":" given AssignMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-assign-methods.html","searchKeys":["AssignMethods"]},{"name":" object Unliftable","description":"scala.quoted.Unliftable$","location":"api/scala/quoted/-unliftable$.html","searchKeys":["Unliftable"]},{"name":" def noSymbol: Symbol","description":"scala.quoted.Quotes.Callable(name=noSymbol, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-module/no-symbol.html","searchKeys":["noSymbol"]},{"name":"given TypeTest_ImplicitSearchResult_ImplicitSearchSuccess as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_ImplicitSearchResult_ImplicitSearchSuccess, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-implicit-search-result_-implicit-search-success.html","searchKeys":["TypeTest_ImplicitSearchResult_ImplicitSearchSuccess"]},{"name":" def cases: List[CaseDef]","description":"scala.quoted.Quotes.Callable(name=cases, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-try-methods/cases.html","searchKeys":["cases"]},{"name":" def foldTrees(x: X, trees: Iterable[Tree])(owner: Symbol): X","description":"scala.quoted.Quotes.Callable(name=foldTrees, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-accumulator/fold-trees.html","searchKeys":["foldTrees"]},{"name":" def unapply(x: Assign): Option[(Term, Term)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-assign-module/unapply.html","searchKeys":["unapply"]},{"name":" def scan[T, U >: T](z: U)(op: (U, U) => U)(evidence$21: ClassTag[U]): IArray[U]","description":"scala.opaques$.Callable(name=scan, receiver=null, params=[])","location":"api/scala/opaques/array-ops/scan.html","searchKeys":["scan"]},{"name":"New Year Resolutions","description":"","location":"blog/_posts/2016-01-02-new-year-resolutions.html","searchKeys":["New Year Resolutions"]},{"name":"given TypeTest_ImplicitSearchResult_NoMatchingImplicits as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_ImplicitSearchResult_NoMatchingImplicits, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-implicit-search-result_-no-matching-implicits.html","searchKeys":["TypeTest_ImplicitSearchResult_NoMatchingImplicits"]},{"name":" def pattern: Tree","description":"scala.quoted.Quotes.Callable(name=pattern, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-case-def-methods/pattern.html","searchKeys":["pattern"]},{"name":" def baseType(cls: Symbol): TypeRepr","description":"scala.quoted.Quotes.Callable(name=baseType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/base-type.html","searchKeys":["baseType"]},{"name":" def isPackageDef: Boolean","description":"scala.quoted.Quotes.Callable(name=isPackageDef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-package-def.html","searchKeys":["isPackageDef"]},{"name":" def copy(original: Tree)(pattern: Tree, guard: Option[Term], rhs: Term): CaseDef","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-case-def-module/copy.html","searchKeys":["copy"]},{"name":" def symbol: Symbol","description":"scala.quoted.Quotes.Callable(name=symbol, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-methods/symbol.html","searchKeys":["symbol"]},{"name":" given OmitSelectorMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-omit-selector-methods.html","searchKeys":["OmitSelectorMethods"]},{"name":" def Param: Flags","description":"scala.quoted.Quotes.Callable(name=Param, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-param.html","searchKeys":["Param"]},{"name":"given Tuple13Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple13Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple13-liftable.html","searchKeys":["Tuple13Liftable"]},{"name":" given AppliedTypeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-applied-type-methods.html","searchKeys":["AppliedTypeMethods"]},{"name":" trait TermModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-term-module.html","searchKeys":["TermModule"]},{"name":"Inferable-By-Name Parameters","description":"","location":"docs/reference/contextual/inferable-by-name-parameters.html","searchKeys":["Inferable-By-Name Parameters"]},{"name":" def paramSymss: List[List[Symbol]]","description":"scala.quoted.Quotes.Callable(name=paramSymss, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/param-symss.html","searchKeys":["paramSymss"]},{"name":" def isDefinedInCurrentRun: Boolean","description":"scala.quoted.Quotes.Callable(name=isDefinedInCurrentRun, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-defined-in-current-run.html","searchKeys":["isDefinedInCurrentRun"]},{"name":"Announcing Dotty 0.9.0-RC1","description":"","location":"blog/_posts/2018-07-06-ninth-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.9.0-RC1"]},{"name":"given TypeTest_Tree_LambdaTypeTree as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_LambdaTypeTree, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-lambda-type-tree.html","searchKeys":["TypeTest_Tree_LambdaTypeTree"]},{"name":"given TypeTest_Tree_TypeProjection as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_TypeProjection, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-type-projection.html","searchKeys":["TypeTest_Tree_TypeProjection"]},{"name":" def transformTypeTrees(trees: List[TypeTree])(owner: Symbol): List[TypeTree]","description":"scala.quoted.Quotes.Callable(name=transformTypeTrees, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-map/transform-type-trees.html","searchKeys":["transformTypeTrees"]},{"name":" def lastIndexOf[T](elem: T, end: Int): Int","description":"scala.opaques$.Callable(name=lastIndexOf, receiver=null, params=[])","location":"api/scala/opaques/array-ops/last-index-of.html","searchKeys":["lastIndexOf"]},{"name":" given RenameSelectorMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-rename-selector-methods.html","searchKeys":["RenameSelectorMethods"]},{"name":" def idPos: Position","description":"scala.quoted.Quotes.Callable(name=idPos, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-super-methods/id-pos.html","searchKeys":["idPos"]},{"name":"Parameter Untupling","description":"","location":"docs/reference/other-new-features/parameter-untupling.html","searchKeys":["Parameter Untupling"]},{"name":" given AppliedMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-applied-methods.html","searchKeys":["AppliedMethods"]},{"name":" def info: TypeRepr","description":"scala.quoted.Quotes.Callable(name=info, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-refinement-methods/info.html","searchKeys":["info"]},{"name":"final def selectDynamic(name: String): Any","description":"scala.reflect.Selectable.Callable(name=selectDynamic, receiver=null, params=[])","location":"api/scala/reflect/-selectable/select-dynamic.html","searchKeys":["selectDynamic"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-named-arg-methods/name.html","searchKeys":["name"]},{"name":"given SetUnliftable","description":"scala.quoted.Unliftable$.Callable(name=SetUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-set-unliftable.html","searchKeys":["SetUnliftable"]},{"name":" def baseClasses: List[Symbol]","description":"scala.quoted.Quotes.Callable(name=baseClasses, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/base-classes.html","searchKeys":["baseClasses"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-projection-methods/name.html","searchKeys":["name"]},{"name":" def copy(original: Tree)(result: TypeTree): ByName","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-by-name-module/copy.html","searchKeys":["copy"]},{"name":" def isDependentFunctionType: Boolean","description":"scala.quoted.Quotes.Callable(name=isDependentFunctionType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/is-dependent-function-type.html","searchKeys":["isDependentFunctionType"]},{"name":" def copy(original: Tree)(name: String, constr: DefDef, parents: List[Tree], derived: List[TypeTree], selfOpt: Option[ValDef], body: List[Statement]): ClassDef","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-class-def-module/copy.html","searchKeys":["copy"]},{"name":" def apply(elems: Any*): TupleXXL","description":"scala.runtime.TupleXXL$.Callable(name=apply, receiver=null, params=[])","location":"api/scala/runtime/-tuple-x-x-l$/apply.html","searchKeys":["apply"]},{"name":" def rhs: Tree","description":"scala.quoted.Quotes.Callable(name=rhs, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-def-methods/rhs.html","searchKeys":["rhs"]},{"name":"given SetLiftable","description":"scala.quoted.Liftable$.Callable(name=SetLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-set-liftable.html","searchKeys":["SetLiftable"]},{"name":"given TypeTest_Tree_DefDef as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_DefDef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-def-def.html","searchKeys":["TypeTest_Tree_DefDef"]},{"name":"given TypeTest_TypeRepr_ByNameType as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_ByNameType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-by-name-type.html","searchKeys":["TypeTest_TypeRepr_ByNameType"]},{"name":" def unapply(x: ConstantType): Option[Constant]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-type-module/unapply.html","searchKeys":["unapply"]},{"name":" def writeLongNat(x: Long): Unit","description":"dotty.tools.tasty.TastyBuffer.Callable(name=writeLongNat, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/write-long-nat.html","searchKeys":["writeLongNat"]},{"name":"given ArrayOfByteLiftable","description":"scala.quoted.Liftable$.Callable(name=ArrayOfByteLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-array-of-byte-liftable.html","searchKeys":["ArrayOfByteLiftable"]},{"name":" def returning[T](op: ReturnThrowable[T] => T): T","description":"scala.util.control.NonLocalReturns$.Callable(name=returning, receiver=null, params=[])","location":"api/scala/util/control/-non-local-returns/returning.html","searchKeys":["returning"]},{"name":" def apply(tmref: TermRef): Term","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-ident-module/apply.html","searchKeys":["apply"]},{"name":" def apply(x: Byte): Constant","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-byte-module/apply.html","searchKeys":["apply"]},{"name":"override def productElementName(n: Int): String","description":"scala.runtime.EnumValue.Callable(name=productElementName, receiver=null, params=[])","location":"api/scala/runtime/-enum-value/product-element-name.html","searchKeys":["productElementName"]},{"name":"Inline","description":"","location":"docs/reference/metaprogramming/inline.html","searchKeys":["Inline"]},{"name":" def Lazy: Flags","description":"scala.quoted.Quotes.Callable(name=Lazy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-lazy.html","searchKeys":["Lazy"]},{"name":"given TypeTest_Tree_TypeBoundsTree as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_TypeBoundsTree, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-type-bounds-tree.html","searchKeys":["TypeTest_Tree_TypeBoundsTree"]},{"name":" def tail[T]: IArray[T]","description":"scala.opaques$.Callable(name=tail, receiver=null, params=[])","location":"api/scala/opaques/array-ops/tail.html","searchKeys":["tail"]},{"name":" def privateWithin: Option[TypeRepr]","description":"scala.quoted.Quotes.Callable(name=privateWithin, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/private-within.html","searchKeys":["privateWithin"]},{"name":" def showAnsiColored: String","description":"scala.quoted.Quotes.Callable(name=showAnsiColored, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-methods/show-ansi-colored.html","searchKeys":["showAnsiColored"]},{"name":" given ValDefMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-val-def-methods.html","searchKeys":["ValDefMethods"]},{"name":"Dropped: private[this] and protected[this]","description":"","location":"docs/reference/dropped-features/this-qualifier.html","searchKeys":["Dropped: private[this] and protected[this]"]},{"name":" def apply(elems: List[Term], tpt: TypeTree): Repeated","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-repeated-module/apply.html","searchKeys":["apply"]},{"name":"inline def *:[H, This >: Tuple <: Tuple](x: H): H *: This","description":"scala.Tuple.Callable(name=*:, receiver=null, params=[])","location":"api/scala/-tuple/[42][58].html","searchKeys":["*:"]},{"name":"Debugging Techniques","description":"","location":"docs/contributing/debugging.html","searchKeys":["Debugging Techniques"]},{"name":" def fromProduct(p: Product): MirroredMonoType","description":"scala.deriving.Mirror$.Callable(name=fromProduct, receiver=null, params=[])","location":"api/scala/deriving/-mirror$/-singleton/from-product.html","searchKeys":["fromProduct"]},{"name":"Context Functions - More Details","description":"","location":"docs/reference/contextual/context-functions-spec.html","searchKeys":["Context Functions - More Details"]},{"name":" def parent: TypeRepr","description":"scala.quoted.Quotes.Callable(name=parent, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-refinement-methods/parent.html","searchKeys":["parent"]},{"name":" def unapply(x: RenameSelector): Option[(String, String)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-rename-selector-module/unapply.html","searchKeys":["unapply"]},{"name":" given TypeProjectionMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-projection-methods.html","searchKeys":["TypeProjectionMethods"]},{"name":" def of[T <: AnyKind](x$1: Type[T]): TypeTree","description":"scala.quoted.Quotes.Callable(name=of, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-tree-module/of.html","searchKeys":["of"]},{"name":" def longFromDigits(digits: String, radix: Int): Long","description":"scala.util.FromDigits$.Callable(name=longFromDigits, receiver=null, params=[])","location":"api/scala/util/-from-digits$/long-from-digits.html","searchKeys":["longFromDigits"]},{"name":" def thenp: Term","description":"scala.quoted.Quotes.Callable(name=thenp, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-if-methods/thenp.html","searchKeys":["thenp"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-omit-selector-methods/name.html","searchKeys":["name"]},{"name":"threadUnsafe annotation","description":"","location":"docs/reference/other-new-features/threadUnsafe-annotation.html","searchKeys":["threadUnsafe annotation"]},{"name":" def right: TypeRepr","description":"scala.quoted.Quotes.Callable(name=right, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-or-type-methods/right.html","searchKeys":["right"]},{"name":" trait TypeBindModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-bind-module.html","searchKeys":["TypeBindModule"]},{"name":" def underlying: Term","description":"scala.quoted.Quotes.Callable(name=underlying, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-methods/underlying.html","searchKeys":["underlying"]},{"name":" def apply(parentExp: RecursiveType => TypeRepr): RecursiveType","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-recursive-type-module/apply.html","searchKeys":["apply"]},{"name":" def appliedToArgs(args: List[Term]): Apply","description":"scala.quoted.Quotes.Callable(name=appliedToArgs, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-methods/applied-to-args.html","searchKeys":["appliedToArgs"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/name.html","searchKeys":["name"]},{"name":" class SourceFile(path: String) extends Annotation","description":"scala.annotation.internal.SourceFile","location":"api/scala/annotation/internal/-source-file.html","searchKeys":["SourceFile"]},{"name":"Dropped: General Type Projection","description":"","location":"docs/reference/dropped-features/type-projection.html","searchKeys":["Dropped: General Type Projection"]},{"name":" given ByNameTypeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-by-name-type-methods.html","searchKeys":["ByNameTypeMethods"]},{"name":" trait ConstantFloatModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-float-module.html","searchKeys":["ConstantFloatModule"]},{"name":" def show[T]: String","description":"scala.quoted.Quotes.Callable(name=show, receiver=null, params=[])","location":"api/scala/quoted/-quotes/show.html","searchKeys":["show"]},{"name":"given TypeTest_Tree_Assign as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Assign, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-assign.html","searchKeys":["TypeTest_Tree_Assign"]},{"name":" def copy(original: Tree)(name: String): Ident","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-ident-module/copy.html","searchKeys":["copy"]},{"name":" def unzip[U, V](evidence$26: ClassTag[U], evidence$27: ClassTag[V]): (IArray[U], IArray[V])","description":"scala.opaques$.Callable(name=unzip, receiver=null, params=[])","location":"api/scala/opaques/array-ops/unzip.html","searchKeys":["unzip"]},{"name":" def unapply(ddef: DefDef): Option[(String, List[TypeDef], List[List[ValDef]], TypeTree, Option[Term])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-def-def-module/unapply.html","searchKeys":["unapply"]},{"name":"@compileTimeOnly(\"Reference to `scala.quoted.Type.of` was not handled by PickleQuotes\") given of","description":"scala.quoted.Type$.Callable(name=of, receiver=null, params=[])","location":"api/scala/quoted/-type$/of.html","searchKeys":["of"]},{"name":"given TypeTest_Tree_TypeIdent as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_TypeIdent, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-type-ident.html","searchKeys":["TypeTest_Tree_TypeIdent"]},{"name":"Soft Modifiers","description":"","location":"docs/reference/soft-modifier.html","searchKeys":["Soft Modifiers"]},{"name":" def typeParams: List[TypeDef]","description":"scala.quoted.Quotes.Callable(name=typeParams, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-def-def-methods/type-params.html","searchKeys":["typeParams"]},{"name":" def tycon: TypeRepr","description":"scala.quoted.Quotes.Callable(name=tycon, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-applied-type-methods/tycon.html","searchKeys":["tycon"]},{"name":" def unapply(x: NoPrefix): Boolean","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-no-prefix-module/unapply.html","searchKeys":["unapply"]},{"name":" def asType: Type[ <: AnyKind]","description":"scala.quoted.Quotes.Callable(name=asType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/as-type.html","searchKeys":["asType"]},{"name":"Kind Polymorphism","description":"","location":"docs/reference/other-new-features/kind-polymorphism.html","searchKeys":["Kind Polymorphism"]},{"name":" def unapplySeq(x: TupleXXL): Option[Seq[Any]]","description":"scala.runtime.TupleXXL$.Callable(name=unapplySeq, receiver=null, params=[])","location":"api/scala/runtime/-tuple-x-x-l$/unapply-seq.html","searchKeys":["unapplySeq"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-ident-methods/name.html","searchKeys":["name"]},{"name":" def show: String","description":"scala.quoted.Quotes.Callable(name=show, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-repr-methods/show.html","searchKeys":["show"]},{"name":" def body: Term","description":"scala.quoted.Quotes.Callable(name=body, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-try-methods/body.html","searchKeys":["body"]},{"name":" def param(idx: Int): TypeRepr","description":"scala.quoted.Quotes.Callable(name=param, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-poly-type-methods/param.html","searchKeys":["param"]},{"name":" trait ConstantNullModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-null-module.html","searchKeys":["ConstantNullModule"]},{"name":"given TypeTest_Tree_ValDef as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_ValDef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-val-def.html","searchKeys":["TypeTest_Tree_ValDef"]},{"name":" def hi: TypeTree","description":"scala.quoted.Quotes.Callable(name=hi, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-tree-methods/hi.html","searchKeys":["hi"]},{"name":" def apply(qualifier: Term, symbol: Symbol): Select","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-select-module/apply.html","searchKeys":["apply"]},{"name":" trait MatchModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-match-module.html","searchKeys":["MatchModule"]},{"name":" def copy(original: Tree)(aliases: List[TypeDef], tpt: TypeTree): TypeBlock","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-block-module/copy.html","searchKeys":["copy"]},{"name":" object Scala3RunTime","description":"scala.runtime.Scala3RunTime$","location":"api/scala/runtime/-scala3-run-time.html","searchKeys":["Scala3RunTime"]},{"name":"Multiversal Equality","description":"","location":"docs/reference/contextual/multiversal-equality.html","searchKeys":["Multiversal Equality"]},{"name":" class StopMacroExpansion extends Throwable","description":"scala.quoted.runtime.StopMacroExpansion","location":"api/scala/quoted/runtime/-stop-macro-expansion.html","searchKeys":["StopMacroExpansion"]},{"name":"override def productArity: Int","description":"scala.Tuple$package$.Callable(name=productArity, receiver=null, params=[])","location":"api/scala/-empty-tuple/product-arity.html","searchKeys":["productArity"]},{"name":" def toExpr(x: T): Quotes => Expr[T]","description":"scala.quoted.Liftable$.Callable(name=toExpr, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-boolean-liftable/to-expr.html","searchKeys":["toExpr"]},{"name":" given ImplicitSearchFailureMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-implicit-search-failure-methods.html","searchKeys":["ImplicitSearchFailureMethods"]},{"name":"Dotc's concept of time","description":"","location":"docs/internals/periods.html","searchKeys":["Dotc's concept of time"]},{"name":" def unapply(constant: Constant): Option[Char]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-char-module/unapply.html","searchKeys":["unapply"]},{"name":"given TypeTest_Tree_Inferred as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Inferred, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-inferred.html","searchKeys":["TypeTest_Tree_Inferred"]},{"name":" def transformStats(trees: List[Statement])(owner: Symbol): List[Statement]","description":"scala.quoted.Quotes.Callable(name=transformStats, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-map/transform-stats.html","searchKeys":["transformStats"]},{"name":" def apply(cond: Term, thenp: Term, elsep: Term): If","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-if-module/apply.html","searchKeys":["apply"]},{"name":" trait Singleton extends Product","description":"scala.deriving.Mirror$","location":"api/scala/deriving/-mirror$/-singleton.html","searchKeys":["Singleton"]},{"name":" def unapply(x: SelectOuter): Option[(Term, String, Int)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-select-outer-module/unapply.html","searchKeys":["unapply"]},{"name":" def apply(cond: Term, body: Term): While","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-while-module/apply.html","searchKeys":["apply"]},{"name":" def Implicit: Flags","description":"scala.quoted.Quotes.Callable(name=Implicit, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-implicit.html","searchKeys":["Implicit"]},{"name":"given OptionUnliftable","description":"scala.quoted.Unliftable$.Callable(name=OptionUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-option-unliftable.html","searchKeys":["OptionUnliftable"]},{"name":"given Tuple7Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple7Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple7-unliftable.html","searchKeys":["Tuple7Unliftable"]},{"name":" def fromString(s: String): Double","description":"scala.util.CommandLineParser$.Callable(name=fromString, receiver=null, params=[])","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-double/from-string.html","searchKeys":["fromString"]},{"name":" def fromPos: Position","description":"scala.quoted.Quotes.Callable(name=fromPos, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-rename-selector-methods/from-pos.html","searchKeys":["fromPos"]},{"name":" def toExpr(iarray: IArray[T]): Quotes => Expr[IArray[T]]","description":"scala.quoted.Liftable$.Callable(name=toExpr, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-i-array-liftable/to-expr.html","searchKeys":["toExpr"]},{"name":" def endAddr: Addr","description":"dotty.tools.tasty.TastyReader.Callable(name=endAddr, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/end-addr.html","searchKeys":["endAddr"]},{"name":" given ThisTypeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-this-type-methods.html","searchKeys":["ThisTypeMethods"]},{"name":" def classMethod(name: String): List[Symbol]","description":"scala.quoted.Quotes.Callable(name=classMethod, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/class-method.html","searchKeys":["classMethod"]},{"name":"Implicit Function Types - More Details","description":"","location":"docs/reference/new-types/implicit-function-types-spec.html","searchKeys":["Implicit Function Types - More Details"]},{"name":" def args: List[TypeTree]","description":"scala.quoted.Quotes.Callable(name=args, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-apply-methods/args.html","searchKeys":["args"]},{"name":"Dependent Function Types - More Details","description":"","location":"docs/reference/new-types/dependent-function-types-spec.html","searchKeys":["Dependent Function Types - More Details"]},{"name":" def ArrayModule: Symbol","description":"scala.quoted.Quotes.Callable(name=ArrayModule, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-array-module.html","searchKeys":["ArrayModule"]},{"name":" given PolyTypeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-poly-type-methods.html","searchKeys":["PolyTypeMethods"]},{"name":"Scala3doc","description":"","location":"docs/usage/scala3doc/index.html","searchKeys":["Scala3doc"]},{"name":" def pjwHash64(data: Array[Byte]): Long","description":"dotty.tools.tasty.TastyHash$.Callable(name=pjwHash64, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-hash/pjw-hash64.html","searchKeys":["pjwHash64"]},{"name":"Mixin Traits","description":"","location":"docs/reference/other-new-features/mixin-traits.html","searchKeys":["Mixin Traits"]},{"name":" def expr: Term","description":"scala.quoted.Quotes.Callable(name=expr, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-return-methods/expr.html","searchKeys":["expr"]},{"name":"given TypeTest_Tree_TypeApply as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_TypeApply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-type-apply.html","searchKeys":["TypeTest_Tree_TypeApply"]},{"name":" def apply(tpt: TypeTree): New","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-new-module/apply.html","searchKeys":["apply"]},{"name":"Match Types","description":"","location":"docs/reference/new-types/match-types.html","searchKeys":["Match Types"]},{"name":" def splitAt[T](n: Int): (IArray[T], IArray[T])","description":"scala.opaques$.Callable(name=splitAt, receiver=null, params=[])","location":"api/scala/opaques/array-ops/split-at.html","searchKeys":["splitAt"]},{"name":"Explicit Nulls","description":"","location":"docs/reference/other-new-features/explicit-nulls.html","searchKeys":["Explicit Nulls"]},{"name":" given IfMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-if-methods.html","searchKeys":["IfMethods"]},{"name":"given TypeTest_ImportSelector_OmitSelector as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_ImportSelector_OmitSelector, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-import-selector_-omit-selector.html","searchKeys":["TypeTest_ImportSelector_OmitSelector"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bind-methods/name.html","searchKeys":["name"]},{"name":"given TypeTest_Tree_TypeDef as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_TypeDef, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-type-def.html","searchKeys":["TypeTest_Tree_TypeDef"]},{"name":" def ScalaPrimitiveValueClasses: List[Symbol]","description":"scala.quoted.Quotes.Callable(name=ScalaPrimitiveValueClasses, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-scala-primitive-value-classes.html","searchKeys":["ScalaPrimitiveValueClasses"]},{"name":" def SomeModule: Symbol","description":"scala.quoted.Quotes.Callable(name=SomeModule, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-some-module.html","searchKeys":["SomeModule"]},{"name":" trait RefiningAnnotation extends StaticAnnotation","description":"scala.annotation.RefiningAnnotation","location":"api/scala/annotation/-refining-annotation.html","searchKeys":["RefiningAnnotation"]},{"name":" def fromString(s: String): Byte","description":"scala.util.CommandLineParser$.Callable(name=fromString, receiver=null, params=[])","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-byte/from-string.html","searchKeys":["fromString"]},{"name":" object Type","description":"scala.quoted.Type$","location":"api/scala/quoted/-type$.html","searchKeys":["Type"]},{"name":" given IntLiftable[T <: Int] as Liftable[T]","description":"scala.quoted.Liftable$","location":"api/scala/quoted/-liftable$/-int-liftable.html","searchKeys":["IntLiftable"]},{"name":"@mixin  trait EnumValue extends Product with Serializable","description":"scala.runtime.EnumValue","location":"api/scala/runtime/-enum-value.html","searchKeys":["EnumValue"]},{"name":" given MatchTypeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-match-type-methods.html","searchKeys":["MatchTypeMethods"]},{"name":" def fromProduct(p: Product): MirroredMonoType","description":"scala.deriving.Mirror$.Callable(name=fromProduct, receiver=null, params=[])","location":"api/scala/deriving/-mirror$/-singleton-proxy/from-product.html","searchKeys":["fromProduct"]},{"name":" def apply(tpe: TypeRepr): Constant","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-class-of-module/apply.html","searchKeys":["apply"]},{"name":" def STATE(cur: Long, ord: Int): Long","description":"dotty.runtime.LazyVals$.Callable(name=STATE, receiver=null, params=[])","location":"api/dotty/runtime/-lazy-vals/-s-t-a-t-e.html","searchKeys":["STATE"]},{"name":" object language","description":"scalaShadowing.language$","location":"api/scalaShadowing/language.html","searchKeys":["language"]},{"name":" def unapply(x: Try): Option[(Term, List[CaseDef], Option[Term])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-try-module/unapply.html","searchKeys":["unapply"]},{"name":" def apply(fun: Term, args: List[TypeTree]): TypeApply","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-apply-module/apply.html","searchKeys":["apply"]},{"name":" trait WithRadix[T] extends FromDigits[T]","description":"scala.util.FromDigits$","location":"api/scala/util/-from-digits$/-with-radix.html","searchKeys":["WithRadix"]},{"name":" object experimental","description":"scalaShadowing.language$","location":"api/scalaShadowing/language/experimental.html","searchKeys":["experimental"]},{"name":" def writeByte(b: Int): Unit","description":"dotty.tools.tasty.TastyBuffer.Callable(name=writeByte, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/write-byte.html","searchKeys":["writeByte"]},{"name":" def paramNames: List[String]","description":"scala.quoted.Quotes.Callable(name=paramNames, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-poly-type-methods/param-names.html","searchKeys":["paramNames"]},{"name":" def apply(x: Long): Constant","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-long-module/apply.html","searchKeys":["apply"]},{"name":" trait InlinedModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-inlined-module.html","searchKeys":["InlinedModule"]},{"name":" trait ImportSelectorModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-import-selector-module.html","searchKeys":["ImportSelectorModule"]},{"name":" def RootPackage: Symbol","description":"scala.quoted.Quotes.Callable(name=RootPackage, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-root-package.html","searchKeys":["RootPackage"]},{"name":" def doubleFromDigits(digits: String): Double","description":"scala.util.FromDigits$.Callable(name=doubleFromDigits, receiver=null, params=[])","location":"api/scala/util/-from-digits$/double-from-digits.html","searchKeys":["doubleFromDigits"]},{"name":"Multi-Stage Programming","description":"","location":"docs/reference/metaprogramming/staging.html","searchKeys":["Multi-Stage Programming"]},{"name":" def show: String","description":"scala.quoted.Quotes.Callable(name=show, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-methods/show.html","searchKeys":["show"]},{"name":" def rhs: Term","description":"scala.quoted.Quotes.Callable(name=rhs, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-assign-methods/rhs.html","searchKeys":["rhs"]},{"name":"given ListLiftable","description":"scala.quoted.Liftable$.Callable(name=ListLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-list-liftable.html","searchKeys":["ListLiftable"]},{"name":" def of(expr: Expr[Any]): Term","description":"scala.quoted.Quotes.Callable(name=of, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-module/of.html","searchKeys":["of"]},{"name":"Open Classes","description":"","location":"docs/reference/other-new-features/open-classes.html","searchKeys":["Open Classes"]},{"name":" def getLongNat(at: Addr): Long","description":"dotty.tools.tasty.TastyBuffer.Callable(name=getLongNat, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/get-long-nat.html","searchKeys":["getLongNat"]},{"name":" def Enum: Flags","description":"scala.quoted.Quotes.Callable(name=Enum, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-enum.html","searchKeys":["Enum"]},{"name":" def unapply[TypeBindings <: Tuple, Tup <: Tuple](scrutinee: Type[ <: AnyKind])(pattern: Type[ <: AnyKind]): Option[Tup]","description":"scala.quoted.runtime.QuoteMatching.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/runtime/-quote-matching/-type-match-module/unapply.html","searchKeys":["unapply"]},{"name":" def lhs: Term","description":"scala.quoted.Quotes.Callable(name=lhs, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-assign-methods/lhs.html","searchKeys":["lhs"]},{"name":" def meth: Term","description":"scala.quoted.Quotes.Callable(name=meth, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-closure-methods/meth.html","searchKeys":["meth"]},{"name":" given BigDecimalFromDigits as Floating[BigDecimal]","description":"scala.util.FromDigits$","location":"api/scala/util/-from-digits$/-big-decimal-from-digits.html","searchKeys":["BigDecimalFromDigits"]},{"name":" def PredefModule: Symbol","description":"scala.quoted.Quotes.Callable(name=PredefModule, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-predef-module.html","searchKeys":["PredefModule"]},{"name":" def requiredMethod(path: String): Symbol","description":"scala.quoted.Quotes.Callable(name=requiredMethod, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-module/required-method.html","searchKeys":["requiredMethod"]},{"name":" given IArrayLiftable[T](using evidence$5: Type[T], using ltArray: Liftable[Array[T]]) as Liftable[IArray[T]]","description":"scala.quoted.Liftable$","location":"api/scala/quoted/-liftable$/-i-array-liftable.html","searchKeys":["IArrayLiftable"]},{"name":" def apply(sym: Symbol): Ref","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-ref-module/apply.html","searchKeys":["apply"]},{"name":" object Varargs","description":"scala.quoted.Varargs$","location":"api/scala/quoted/-varargs.html","searchKeys":["Varargs"]},{"name":" def unapply(x: Closure): Option[(Term, Option[TypeRepr])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-closure-module/unapply.html","searchKeys":["unapply"]},{"name":" def requiredClass(path: String): Symbol","description":"scala.quoted.Quotes.Callable(name=requiredClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-module/required-class.html","searchKeys":["requiredClass"]},{"name":" def productArity: Int","description":"scala.deriving.ArrayProduct.Callable(name=productArity, receiver=null, params=[])","location":"api/scala/deriving/-array-product/product-arity.html","searchKeys":["productArity"]},{"name":"Core Data Structures","description":"","location":"docs/internals/core-data-structures.html","searchKeys":["Core Data Structures"]},{"name":"Implicit By-Name Parameters","description":"","location":"docs/reference/other-new-features/implicit-by-name-parameters.html","searchKeys":["Implicit By-Name Parameters"]},{"name":"given EmptyTupleUnliftable","description":"scala.quoted.Unliftable$.Callable(name=EmptyTupleUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-empty-tuple-unliftable.html","searchKeys":["EmptyTupleUnliftable"]},{"name":" def fullName: String","description":"scala.quoted.Quotes.Callable(name=fullName, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/full-name.html","searchKeys":["fullName"]},{"name":" given given_FromString_Byte as FromString[Byte]","description":"scala.util.CommandLineParser$","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-byte.html","searchKeys":["given_FromString_Byte"]},{"name":"sealed trait Mirror","description":"scala.deriving.Mirror","location":"api/scala/deriving/-mirror.html","searchKeys":["Mirror"]},{"name":" def isLegalTag(tag: Int): Boolean","description":"dotty.tools.tasty.TastyFormat$.Callable(name=isLegalTag, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-format/is-legal-tag.html","searchKeys":["isLegalTag"]},{"name":" def empty[T](evidence$1: ClassTag[T]): IArray[T]","description":"scala.IArray$package$.Callable(name=empty, receiver=null, params=[])","location":"api/scala/-i-array/empty.html","searchKeys":["empty"]},{"name":" def copy(original: Tree)(cases: List[CaseDef]): SummonFrom","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-summon-from-module/copy.html","searchKeys":["copy"]},{"name":" def copy(original: Tree)(patterns: List[Tree]): Alternatives","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-alternatives-module/copy.html","searchKeys":["copy"]},{"name":" def rhs: Option[Term]","description":"scala.quoted.Quotes.Callable(name=rhs, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-val-def-methods/rhs.html","searchKeys":["rhs"]},{"name":" trait TypeBlockModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-block-module.html","searchKeys":["TypeBlockModule"]},{"name":" def fromString(s: String): String","description":"scala.util.CommandLineParser$.Callable(name=fromString, receiver=null, params=[])","location":"api/scala/util/-command-line-parser/-from-string$/given_-from-string_-string/from-string.html","searchKeys":["fromString"]},{"name":" def |(that: Flags): Flags","description":"scala.quoted.Quotes.Callable(name=|, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-methods/[124].html","searchKeys":["|"]},{"name":" def unapply(constant: Constant): Option[Short]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-short-module/unapply.html","searchKeys":["unapply"]},{"name":" trait DefinitionModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-definition-module.html","searchKeys":["DefinitionModule"]},{"name":" def fun: Term","description":"scala.quoted.Quotes.Callable(name=fun, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-apply-methods/fun.html","searchKeys":["fun"]},{"name":" def takeWhile[T](p: T => Boolean): IArray[T]","description":"scala.opaques$.Callable(name=takeWhile, receiver=null, params=[])","location":"api/scala/opaques/array-ops/take-while.html","searchKeys":["takeWhile"]},{"name":" def apply(): Constant","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-null-module/apply.html","searchKeys":["apply"]},{"name":" def unapply(tree: Block): Option[(List[ValDef], Term)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-lambda-module/unapply.html","searchKeys":["unapply"]},{"name":" given MethodTypeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-method-type-methods.html","searchKeys":["MethodTypeMethods"]},{"name":"given TypeTest_Tree_Closure as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Closure, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-closure.html","searchKeys":["TypeTest_Tree_Closure"]},{"name":" def isTypeTreeTag(tag: Int): Boolean","description":"dotty.tools.tasty.TastyFormat$.Callable(name=isTypeTreeTag, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-format/is-type-tree-tag.html","searchKeys":["isTypeTreeTag"]},{"name":" def copy(original: Tree)(tpt: TypeTree, args: List[Tree]): Applied","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-applied-module/copy.html","searchKeys":["copy"]},{"name":"@compileTimeOnly(\"Illegal reference to `scala.quoted.runtime.Patterns`\")  object Patterns","description":"scala.quoted.runtime.Patterns$","location":"api/scala/quoted/runtime/-patterns.html","searchKeys":["Patterns"]},{"name":"Dropped: Class Shadowing","description":"","location":"docs/reference/dropped-features/class-shadowing.html","searchKeys":["Dropped: Class Shadowing"]},{"name":" def apply(cases: List[CaseDef]): SummonFrom","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-summon-from-module/apply.html","searchKeys":["apply"]},{"name":" object Arrays","description":"dotty.runtime.Arrays$","location":"api/dotty/runtime/-arrays.html","searchKeys":["Arrays"]},{"name":" trait LambdaTypeTreeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-lambda-type-tree-module.html","searchKeys":["LambdaTypeTreeModule"]},{"name":"@compileTimeOnly(\"Illegal reference to `scala.quoted.runtime.SplicedType`\")  class SplicedType extends Annotation","description":"scala.quoted.runtime.SplicedType","location":"api/scala/quoted/runtime/-spliced-type.html","searchKeys":["SplicedType"]},{"name":" def unapply(x: EmptyTuple): true","description":"scala.Tuple$.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/-tuple$/unapply.html","searchKeys":["unapply"]},{"name":"Erased Terms Spec","description":"","location":"docs/reference/metaprogramming/erased-terms-spec.html","searchKeys":["Erased Terms Spec"]},{"name":" def protectedWithin: Option[TypeRepr]","description":"scala.quoted.Quotes.Callable(name=protectedWithin, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/protected-within.html","searchKeys":["protectedWithin"]},{"name":" given ClassDefMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-class-def-methods.html","searchKeys":["ClassDefMethods"]},{"name":" def value: Any","description":"scala.quoted.Quotes.Callable(name=value, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-methods/value.html","searchKeys":["value"]},{"name":"Deprecated: Nonlocal Returns","description":"","location":"docs/reference/dropped-features/nonlocal-returns.html","searchKeys":["Deprecated: Nonlocal Returns"]},{"name":" object any","description":"scala.compiletime.ops.package$","location":"api/scala/compiletime/ops/any.html","searchKeys":["any"]},{"name":" def readUncompressedLong(): Long","description":"dotty.tools.tasty.TastyReader.Callable(name=readUncompressedLong, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/read-uncompressed-long.html","searchKeys":["readUncompressedLong"]},{"name":" def foreach[T, U](f: T => U): Unit","description":"scala.opaques$.Callable(name=foreach, receiver=null, params=[])","location":"api/scala/opaques/array-ops/foreach.html","searchKeys":["foreach"]},{"name":" def unapply(x: TypeBoundsTree): Option[(TypeTree, TypeTree)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-bounds-tree-module/unapply.html","searchKeys":["unapply"]},{"name":" def body: Term","description":"scala.quoted.Quotes.Callable(name=body, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-while-methods/body.html","searchKeys":["body"]},{"name":" def isTupleClass(sym: Symbol): Boolean","description":"scala.quoted.Quotes.Callable(name=isTupleClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/is-tuple-class.html","searchKeys":["isTupleClass"]},{"name":" def thistpe: TypeRepr","description":"scala.quoted.Quotes.Callable(name=thistpe, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-super-type-methods/thistpe.html","searchKeys":["thistpe"]},{"name":" trait WildcardTypeTreeModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-wildcard-type-tree-module.html","searchKeys":["WildcardTypeTreeModule"]},{"name":"given TypeTest_TypeRepr_AppliedType as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_AppliedType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-applied-type.html","searchKeys":["TypeTest_TypeRepr_AppliedType"]},{"name":"given TypeTest_Tree_Definition as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Definition, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-definition.html","searchKeys":["TypeTest_Tree_Definition"]},{"name":" given LongLiftable[T <: Long] as Liftable[T]","description":"scala.quoted.Liftable$","location":"api/scala/quoted/-liftable$/-long-liftable.html","searchKeys":["LongLiftable"]},{"name":"given Tuple20Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple20Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple20-liftable.html","searchKeys":["Tuple20Liftable"]},{"name":" def sourceFile: SourceFile","description":"scala.quoted.Quotes.Callable(name=sourceFile, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-position-methods/source-file.html","searchKeys":["sourceFile"]},{"name":" def cond: Term","description":"scala.quoted.Quotes.Callable(name=cond, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-if-methods/cond.html","searchKeys":["cond"]},{"name":" given LambdaTypeTreeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-lambda-type-tree-methods.html","searchKeys":["LambdaTypeTreeMethods"]},{"name":"given TypeTest_Tree_Ident as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Ident, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-ident.html","searchKeys":["TypeTest_Tree_Ident"]},{"name":" def resultSig: String","description":"scala.quoted.Quotes.Callable(name=resultSig, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-signature-methods/result-sig.html","searchKeys":["resultSig"]},{"name":"Macros","description":"","location":"docs/reference/metaprogramming/macros.html","searchKeys":["Macros"]},{"name":" def unapply(sc: Expr[StringContext])(x$2: Quotes): Option[Seq[Expr[String]]]","description":"scala.quoted.Expr$.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-expr$/-string-context/unapply.html","searchKeys":["unapply"]},{"name":" def apply(lhs: Term, rhs: Term): Assign","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-assign-module/apply.html","searchKeys":["apply"]},{"name":" def Abstract: Flags","description":"scala.quoted.Quotes.Callable(name=Abstract, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-abstract.html","searchKeys":["Abstract"]},{"name":" def recThis: RecursiveThis","description":"scala.quoted.Quotes.Callable(name=recThis, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-recursive-type-methods/rec-this.html","searchKeys":["recThis"]},{"name":" def apply(x: Short): Constant","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-short-module/apply.html","searchKeys":["apply"]},{"name":"given amb2","description":"scala.util.Not$.Callable(name=amb2, receiver=null, params=[])","location":"api/scala/util/-not$/amb2.html","searchKeys":["amb2"]},{"name":"given TypeTest_Tree_SummonFrom as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_SummonFrom, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-summon-from.html","searchKeys":["TypeTest_Tree_SummonFrom"]},{"name":" def apply(selector: Term, cases: List[CaseDef]): Match","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-module/apply.html","searchKeys":["apply"]},{"name":" object adhocExtensions","description":"scalaShadowing.language$","location":"api/scalaShadowing/language/adhoc-extensions.html","searchKeys":["adhocExtensions"]},{"name":"given TypeTest_Tree_Unapply as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-unapply.html","searchKeys":["TypeTest_Tree_Unapply"]},{"name":"inline def typeChecks(code: String): Boolean","description":"scala.compiletime.testing.package$.Callable(name=typeChecks, receiver=null, params=[])","location":"api/scala/compiletime/testing/type-checks.html","searchKeys":["typeChecks"]},{"name":" def unapply(constant: Constant): Option[Double]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-double-module/unapply.html","searchKeys":["unapply"]},{"name":"override def productArity: Int","description":"scala.runtime.EnumValue.Callable(name=productArity, receiver=null, params=[])","location":"api/scala/runtime/-enum-value/product-arity.html","searchKeys":["productArity"]},{"name":" def children: List[Symbol]","description":"scala.quoted.Quotes.Callable(name=children, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/children.html","searchKeys":["children"]},{"name":" def unapply(x: NamedArg): Option[(String, Term)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-named-arg-module/unapply.html","searchKeys":["unapply"]},{"name":" def toName: String","description":"scala.quoted.Quotes.Callable(name=toName, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-rename-selector-methods/to-name.html","searchKeys":["toName"]},{"name":"Context Functions","description":"","location":"docs/reference/contextual/context-functions.html","searchKeys":["Context Functions"]},{"name":" given ConstantTypeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-type-methods.html","searchKeys":["ConstantTypeMethods"]},{"name":" trait ImplicitsModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-implicits-module.html","searchKeys":["ImplicitsModule"]},{"name":" def isRefinementClass: Boolean","description":"scala.quoted.Quotes.Callable(name=isRefinementClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-refinement-class.html","searchKeys":["isRefinementClass"]},{"name":"Changes in Type Checking","description":"","location":"docs/reference/changed-features/type-checking.html","searchKeys":["Changes in Type Checking"]},{"name":" given arrayOps","description":"scala.opaques$","location":"api/scala/opaques/array-ops.html","searchKeys":["arrayOps"]},{"name":" given BigIntFromDigits as WithRadix[BigInt]","description":"scala.util.FromDigits$","location":"api/scala/util/-from-digits$/-big-int-from-digits.html","searchKeys":["BigIntFromDigits"]},{"name":" def elemtpt: TypeTree","description":"scala.quoted.Quotes.Callable(name=elemtpt, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-repeated-methods/elemtpt.html","searchKeys":["elemtpt"]},{"name":"Dropped: Package Objects","description":"","location":"docs/reference/dropped-features/package-objects.html","searchKeys":["Dropped: Package Objects"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-select-outer-methods/name.html","searchKeys":["name"]},{"name":" def ShortClass: Symbol","description":"scala.quoted.Quotes.Callable(name=ShortClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-short-class.html","searchKeys":["ShortClass"]},{"name":" def take[T](n: Int): IArray[T]","description":"scala.opaques$.Callable(name=take, receiver=null, params=[])","location":"api/scala/opaques/array-ops/take.html","searchKeys":["take"]},{"name":" def forall[T](p: T => Boolean): Boolean","description":"scala.opaques$.Callable(name=forall, receiver=null, params=[])","location":"api/scala/opaques/array-ops/forall.html","searchKeys":["forall"]},{"name":" trait RecursiveThisModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-recursive-this-module.html","searchKeys":["RecursiveThisModule"]},{"name":" trait TypeCaseDefModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-case-def-module.html","searchKeys":["TypeCaseDefModule"]},{"name":" def ClassClass: Symbol","description":"scala.quoted.Quotes.Callable(name=ClassClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-class-class.html","searchKeys":["ClassClass"]},{"name":" def transformTerm(tree: Term)(owner: Symbol): Term","description":"scala.quoted.Quotes.Callable(name=transformTerm, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-map/transform-term.html","searchKeys":["transformTerm"]},{"name":" def writeLongInt(x: Long): Unit","description":"dotty.tools.tasty.TastyBuffer.Callable(name=writeLongInt, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/write-long-int.html","searchKeys":["writeLongInt"]},{"name":" def copy(original: Tree)(ref: Term): Singleton","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-singleton-module/copy.html","searchKeys":["copy"]},{"name":"given Tuple4Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple4Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple4-liftable.html","searchKeys":["Tuple4Liftable"]},{"name":" def transform[T](e: Expr[T])(x$2: Quotes, x$3: Type[T]): Expr[T]","description":"scala.quoted.ExprMap.Callable(name=transform, receiver=null, params=[])","location":"api/scala/quoted/-expr-map/transform.html","searchKeys":["transform"]},{"name":" object Liftable","description":"scala.quoted.Liftable$","location":"api/scala/quoted/-liftable$.html","searchKeys":["Liftable"]},{"name":" object 3.1-migration","description":"scalaShadowing.language$","location":"api/scalaShadowing/language/3.1-migration.html","searchKeys":["3.1-migration"]},{"name":" def unapply(x: This): Option[Option[String]]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-this-module/unapply.html","searchKeys":["unapply"]},{"name":" def apply(qualifier: Term, name: String): TypeSelect","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-select-module/apply.html","searchKeys":["apply"]},{"name":" def elems: List[Term]","description":"scala.quoted.Quotes.Callable(name=elems, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-repeated-methods/elems.html","searchKeys":["elems"]},{"name":" trait RepeatedModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-repeated-module.html","searchKeys":["RepeatedModule"]},{"name":"override def toString(): String","description":"scala.runtime.FunctionXXL.Callable(name=toString, receiver=null, params=[])","location":"api/scala/runtime/-function-x-x-l/to-string.html","searchKeys":["toString"]},{"name":" def transformTrees(trees: List[Tree])(owner: Symbol): List[Tree]","description":"scala.quoted.Quotes.Callable(name=transformTrees, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-map/transform-trees.html","searchKeys":["transformTrees"]},{"name":" def isInstanceOfTuple(x: Any): Boolean","description":"scala.runtime.Tuple$.Callable(name=isInstanceOfTuple, receiver=null, params=[])","location":"api/scala/runtime/-tuple/is-instance-of-tuple.html","searchKeys":["isInstanceOfTuple"]},{"name":" def getByte(at: Addr): Int","description":"dotty.tools.tasty.TastyBuffer.Callable(name=getByte, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/get-byte.html","searchKeys":["getByte"]},{"name":" class Child[T] extends Annotation","description":"scala.annotation.internal.Child","location":"api/scala/annotation/internal/-child.html","searchKeys":["Child"]},{"name":"abstract class Expr[+T]","description":"scala.quoted.Expr","location":"api/scala/quoted/-expr.html","searchKeys":["Expr"]},{"name":"given TypeTest_Tree_Statement as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Statement, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-statement.html","searchKeys":["TypeTest_Tree_Statement"]},{"name":" def isAliasType: Boolean","description":"scala.quoted.Quotes.Callable(name=isAliasType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-alias-type.html","searchKeys":["isAliasType"]},{"name":" def toExpr(x: T): Quotes => Expr[T]","description":"scala.quoted.Liftable$.Callable(name=toExpr, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-short-liftable/to-expr.html","searchKeys":["toExpr"]},{"name":" def expr: Term","description":"scala.quoted.Quotes.Callable(name=expr, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-typed-methods/expr.html","searchKeys":["expr"]},{"name":"Contributing Knowledge","description":"","location":"docs/contributing/contribute-knowledge.html","searchKeys":["Contributing Knowledge"]},{"name":"given BooleanUnliftable","description":"scala.quoted.Unliftable$.Callable(name=BooleanUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-boolean-unliftable.html","searchKeys":["BooleanUnliftable"]},{"name":" def unapply(x: Refined): Option[(TypeTree, List[Definition])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-refined-module/unapply.html","searchKeys":["unapply"]},{"name":" def members: List[Symbol]","description":"scala.quoted.Quotes.Callable(name=members, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/members.html","searchKeys":["members"]},{"name":"Metaprogramming","description":"","location":"docs/Metaprogramming/index.html","searchKeys":["Metaprogramming"]},{"name":" def pid: Ref","description":"scala.quoted.Quotes.Callable(name=pid, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-package-clause-methods/pid.html","searchKeys":["pid"]},{"name":" def unapply(tree: If): Option[(Term, Term, Term)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-if-module/unapply.html","searchKeys":["unapply"]},{"name":" object ErrorKind","description":"scala.compiletime.testing.ErrorKind$","location":"api/scala/compiletime/testing/-error-kind$.html","searchKeys":["ErrorKind"]},{"name":" def subReader(start: Addr, end: Addr): TastyReader","description":"dotty.tools.tasty.TastyReader.Callable(name=subReader, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-reader/sub-reader.html","searchKeys":["subReader"]},{"name":"Announcing Dotty 0.20.0-RC1 – `with` starting indentation blocks, inline given specializations and more","description":"","location":"blog/_posts/2019-11-04-20th-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.20.0-RC1 – `with` starting indentation blocks, inline given specializations and more"]},{"name":"Opaque Type Aliases","description":"","location":"docs/reference/other-new-features/opaques.html","searchKeys":["Opaque Type Aliases"]},{"name":" def isLocalDummy: Boolean","description":"scala.quoted.Quotes.Callable(name=isLocalDummy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/is-local-dummy.html","searchKeys":["isLocalDummy"]},{"name":" def showExtractors: String","description":"scala.quoted.Quotes.Callable(name=showExtractors, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-symbol-methods/show-extractors.html","searchKeys":["showExtractors"]},{"name":"given IntUnliftable","description":"scala.quoted.Unliftable$.Callable(name=IntUnliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-int-unliftable.html","searchKeys":["IntUnliftable"]},{"name":"Scala Syntax Summary","description":"","location":"docs/internals/syntax-3.1.html","searchKeys":["Scala Syntax Summary"]},{"name":" def unapply(x: Match): Option[(Term, List[CaseDef])]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-match-module/unapply.html","searchKeys":["unapply"]},{"name":" def writeAddr(addr: Addr): Unit","description":"dotty.tools.tasty.TastyBuffer.Callable(name=writeAddr, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/write-addr.html","searchKeys":["writeAddr"]},{"name":" trait SimpleSelectorModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-simple-selector-module.html","searchKeys":["SimpleSelectorModule"]},{"name":" def fromStringOption(s: String): Option[T]","description":"scala.util.CommandLineParser$.Callable(name=fromStringOption, receiver=null, params=[])","location":"api/scala/util/-command-line-parser/-from-string/from-string-option.html","searchKeys":["fromStringOption"]},{"name":" def foldRight[T, U](z: U)(op: (T, U) => U)(evidence$19: ClassTag[U]): U","description":"scala.opaques$.Callable(name=foldRight, receiver=null, params=[])","location":"api/scala/opaques/array-ops/fold-right.html","searchKeys":["foldRight"]},{"name":" def level: Int","description":"scala.quoted.Quotes.Callable(name=level, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-select-outer-methods/level.html","searchKeys":["level"]},{"name":" def Array_update: Symbol","description":"scala.quoted.Quotes.Callable(name=Array_update, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-array_update.html","searchKeys":["Array_update"]},{"name":" given OrTypeMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-or-type-methods.html","searchKeys":["OrTypeMethods"]},{"name":"given TypeTest_Tree_Repeated as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_Repeated, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-repeated.html","searchKeys":["TypeTest_Tree_Repeated"]},{"name":"@compileTimeOnly(\"Illegal reference to `scala.quoted.runtime.Expr.quote`\")  def quote[T](x: T): Quotes => Expr[T]","description":"scala.quoted.runtime.Expr$.Callable(name=quote, receiver=null, params=[])","location":"api/scala/quoted/runtime/-expr/quote.html","searchKeys":["quote"]},{"name":" def tpt: TypeTree","description":"scala.quoted.Quotes.Callable(name=tpt, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-typed-methods/tpt.html","searchKeys":["tpt"]},{"name":" def EmptyPackageClass: Symbol","description":"scala.quoted.Quotes.Callable(name=EmptyPackageClass, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-defn-module/-empty-package-class.html","searchKeys":["EmptyPackageClass"]},{"name":" def name: String","description":"scala.quoted.Quotes.Callable(name=name, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-ref-methods/name.html","searchKeys":["name"]},{"name":"given Tuple6Unliftable","description":"scala.quoted.Unliftable$.Callable(name=Tuple6Unliftable, receiver=null, params=[])","location":"api/scala/quoted/-unliftable$/-tuple6-unliftable.html","searchKeys":["Tuple6Unliftable"]},{"name":"given SeqLiftable","description":"scala.quoted.Liftable$.Callable(name=SeqLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-seq-liftable.html","searchKeys":["SeqLiftable"]},{"name":" def apply(qual: TypeRepr, name: String): TermRef","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-term-ref-module/apply.html","searchKeys":["apply"]},{"name":" def cons(x: Any, self: Tuple): Tuple","description":"scala.runtime.Tuple$.Callable(name=cons, receiver=null, params=[])","location":"api/scala/runtime/-tuple/cons.html","searchKeys":["cons"]},{"name":" def paramBounds: List[TypeBounds]","description":"scala.quoted.Quotes.Callable(name=paramBounds, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-lambda-methods/param-bounds.html","searchKeys":["paramBounds"]},{"name":"given amb1","description":"scala.util.Not$.Callable(name=amb1, receiver=null, params=[])","location":"api/scala/util/-not$/amb1.html","searchKeys":["amb1"]},{"name":" def copy(original: Tree)(meth: Tree, tpe: Option[TypeRepr]): Closure","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-closure-module/copy.html","searchKeys":["copy"]},{"name":"given Tuple2Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple2Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple2-liftable.html","searchKeys":["Tuple2Liftable"]},{"name":" trait TypeReprModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-type-repr-module.html","searchKeys":["TypeReprModule"]},{"name":" def eqlAny[L, R]: Eql[L, R]","description":"scala.Eql$.Callable(name=eqlAny, receiver=null, params=[])","location":"api/scala/-eql$/eql-any.html","searchKeys":["eqlAny"]},{"name":" def head[T]: T","description":"scala.opaques$.Callable(name=head, receiver=null, params=[])","location":"api/scala/opaques/array-ops/head.html","searchKeys":["head"]},{"name":"given TypeTest_ImplicitSearchResult_DivergingImplicit as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_ImplicitSearchResult_DivergingImplicit, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-implicit-search-result_-diverging-implicit.html","searchKeys":["TypeTest_ImplicitSearchResult_DivergingImplicit"]},{"name":"Implicit Function Types","description":"","location":"blog/_posts/2016-12-05-implicit-function-types.html","searchKeys":["Implicit Function Types"]},{"name":" object CommandLineParser","description":"scala.util.CommandLineParser$","location":"api/scala/util/-command-line-parser.html","searchKeys":["CommandLineParser"]},{"name":"@compileTimeOnly(\"Illegal reference to `scala.quoted.runtime.Expr.splice`\")  def splice[T](x: Quotes => Expr[T]): T","description":"scala.quoted.runtime.Expr$.Callable(name=splice, receiver=null, params=[])","location":"api/scala/quoted/runtime/-expr/splice.html","searchKeys":["splice"]},{"name":"IDEs and Tools","description":"","location":"docs/IDEs and Tools/index.html","searchKeys":["IDEs and Tools"]},{"name":" def Covariant: Flags","description":"scala.quoted.Quotes.Callable(name=Covariant, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-module/-covariant.html","searchKeys":["Covariant"]},{"name":" def apply(pid: Ref, stats: List[Tree]): PackageClause","description":"scala.quoted.Quotes.Callable(name=apply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-package-clause-module/apply.html","searchKeys":["apply"]},{"name":" trait RefinedModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-refined-module.html","searchKeys":["RefinedModule"]},{"name":"Main Methods","description":"","location":"docs/reference/changed-features/main-functions.html","searchKeys":["Main Methods"]},{"name":"given ArrayOfShortLiftable","description":"scala.quoted.Liftable$.Callable(name=ArrayOfShortLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-array-of-short-liftable.html","searchKeys":["ArrayOfShortLiftable"]},{"name":" def constructor: DefDef","description":"scala.quoted.Quotes.Callable(name=constructor, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-class-def-methods/constructor.html","searchKeys":["constructor"]},{"name":" def unapply(tdef: TypeDef): Option[(String, Tree)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-def-module/unapply.html","searchKeys":["unapply"]},{"name":"given TypeTest_Tree_SelectOuter as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_Tree_SelectOuter, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-tree_-select-outer.html","searchKeys":["TypeTest_Tree_SelectOuter"]},{"name":" object TastyFormat","description":"dotty.tools.tasty.TastyFormat$","location":"api/dotty/tools.tasty/-tasty-format.html","searchKeys":["TastyFormat"]},{"name":"given TypeTest_TypeRepr_MatchType as Serializable","description":"scala.quoted.Quotes.Callable(name=given_TypeTest_TypeRepr_MatchType, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-test_-type-repr_-match-type.html","searchKeys":["TypeTest_TypeRepr_MatchType"]},{"name":"given Tuple12Liftable","description":"scala.quoted.Liftable$.Callable(name=Tuple12Liftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-tuple12-liftable.html","searchKeys":["Tuple12Liftable"]},{"name":"given ArrayOfLongLiftable","description":"scala.quoted.Liftable$.Callable(name=ArrayOfLongLiftable, receiver=null, params=[])","location":"api/scala/quoted/-liftable$/-array-of-long-liftable.html","searchKeys":["ArrayOfLongLiftable"]},{"name":" def asExpr: Expr[Any]","description":"scala.quoted.Quotes.Callable(name=asExpr, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-tree-methods/as-expr.html","searchKeys":["asExpr"]},{"name":" def &(that: Flags): Flags","description":"scala.quoted.Quotes.Callable(name=&, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-flags-methods/&.html","searchKeys":["&"]},{"name":" def tpt: TypeTree","description":"scala.quoted.Quotes.Callable(name=tpt, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-block-methods/tpt.html","searchKeys":["tpt"]},{"name":" trait ParamRefModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-param-ref-module.html","searchKeys":["ParamRefModule"]},{"name":"Lazy Vals initialization","description":"","location":"docs/reference/changed-features/lazy-vals-init.html","searchKeys":["Lazy Vals initialization"]},{"name":" def emptyByteIArray: IArray[Byte]","description":"scala.IArray$package$.Callable(name=emptyByteIArray, receiver=null, params=[])","location":"api/scala/-i-array/empty-byte-i-array.html","searchKeys":["emptyByteIArray"]},{"name":"inline def summonFrom[T](f: Nothing => T): T","description":"scala.compiletime.package$.Callable(name=summonFrom, receiver=null, params=[])","location":"api/scala/compiletime/summon-from.html","searchKeys":["summonFrom"]},{"name":" trait ConstantUnitModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-constant-module/-constant-unit-module.html","searchKeys":["ConstantUnitModule"]},{"name":" def copy(original: Tree)(qualifier: TypeTree, name: String): TypeProjection","description":"scala.quoted.Quotes.Callable(name=copy, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-type-projection-module/copy.html","searchKeys":["copy"]},{"name":"Announcing Dotty 0.1.2-RC1, a major step towards Scala 3","description":"","location":"blog/_posts/2017-05-31-first-dotty-milestone-release.html","searchKeys":["Announcing Dotty 0.1.2-RC1, a major step towards Scala 3"]},{"name":" def underlying: TypeRepr","description":"scala.quoted.Quotes.Callable(name=underlying, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-recursive-type-methods/underlying.html","searchKeys":["underlying"]},{"name":" def unapply(x: OmitSelector): Option[String]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-omit-selector-module/unapply.html","searchKeys":["unapply"]},{"name":" def unapply(x: ParamRef): Option[(LambdaType, Int)]","description":"scala.quoted.Quotes.Callable(name=unapply, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-param-ref-module/unapply.html","searchKeys":["unapply"]},{"name":" given TermRefMethods","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-term-ref-methods.html","searchKeys":["TermRefMethods"]},{"name":" trait SingletonModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-singleton-module.html","searchKeys":["SingletonModule"]},{"name":" trait ExprMatchModule","description":"scala.quoted.runtime.QuoteMatching","location":"api/scala/quoted/runtime/-quote-matching/-expr-match-module.html","searchKeys":["ExprMatchModule"]},{"name":" def left: TypeRepr","description":"scala.quoted.Quotes.Callable(name=left, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-or-type-methods/left.html","searchKeys":["left"]},{"name":" def putNat(at: Addr, x: Int, width: Int): Unit","description":"dotty.tools.tasty.TastyBuffer.Callable(name=putNat, receiver=null, params=[])","location":"api/dotty/tools.tasty/-tasty-buffer/put-nat.html","searchKeys":["putNat"]},{"name":" def param(idx: Int): TypeRepr","description":"scala.quoted.Quotes.Callable(name=param, receiver=null, params=[])","location":"api/scala/quoted/-quotes/-reflection/-method-type-methods/param.html","searchKeys":["param"]},{"name":" trait NamedArgModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-named-arg-module.html","searchKeys":["NamedArgModule"]},{"name":" trait IfModule","description":"scala.quoted.Quotes","location":"api/scala/quoted/-quotes/-reflection/-if-module.html","searchKeys":["IfModule"]},{"name":"final class mixin extends StaticAnnotation","description":"scala.annotation.mixin","location":"api/scala/annotation/mixin.html","searchKeys":["mixin"]},{"name":"inline def valueOf[T]: T","description":"dotty.DottyPredef$.Callable(name=valueOf, receiver=null, params=[])","location":"api/dotty/-dotty-predef/value-of.html","searchKeys":["valueOf"]},{"name":" def unliftOrError[T](x$1: Unliftable[T]): T","description":"scala.quoted.Quotes.Callable(name=unliftOrError, receiver=null, params=[])","location":"api/scala/quoted/-quotes/unlift-or-error.html","searchKeys":["unliftOrError"]}]
